
LED-Driver-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a7c  08003a7c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a7c  08003a7c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a7c  08003a7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a7c  08003a7c  00004a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a80  08003a80  00004a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  2000000c  08003a90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001360  08003a90  00005360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca60  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  00011a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00013c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c8  00000000  00000000  00014910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001936b  00000000  00000000  000152d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e11d  00000000  00000000  0002e643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f8f  00000000  00000000  0003c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d26ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000d2734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d5bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003a40 	.word	0x08003a40

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003a40 	.word	0x08003a40

08000224 <SK6812_Init>:
uint8_t	SK6812_DMA_BUF[SK6812_DMA_BUF_LEN];

volatile uint8_t SK6812_DMA_COMPLETE_FLAG;


HAL_StatusTypeDef SK6812_Init() {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Init(&SK6812_TIM);
 800022a:	480d      	ldr	r0, [pc, #52]	@ (8000260 <SK6812_Init+0x3c>)
 800022c:	f002 fbec 	bl	8002a08 <HAL_TIM_PWM_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	717b      	strb	r3, [r7, #5]

	for (uint16_t i = 0; i < SK6812_DMA_BUF_LEN; i++) {
 8000234:	2300      	movs	r3, #0
 8000236:	80fb      	strh	r3, [r7, #6]
 8000238:	e006      	b.n	8000248 <SK6812_Init+0x24>

		SK6812_DMA_BUF[i] = 0;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	4a09      	ldr	r2, [pc, #36]	@ (8000264 <SK6812_Init+0x40>)
 800023e:	2100      	movs	r1, #0
 8000240:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < SK6812_DMA_BUF_LEN; i++) {
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	3301      	adds	r3, #1
 8000246:	80fb      	strh	r3, [r7, #6]
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	f5b3 6f38 	cmp.w	r3, #2944	@ 0xb80
 800024e:	d3f4      	bcc.n	800023a <SK6812_Init+0x16>

	}

	SK6812_DMA_COMPLETE_FLAG = 1;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <SK6812_Init+0x44>)
 8000252:	2201      	movs	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]

	return ret;
 8000256:	797b      	ldrb	r3, [r7, #5]

}
 8000258:	4618      	mov	r0, r3
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000dd4 	.word	0x20000dd4
 8000264:	20000208 	.word	0x20000208
 8000268:	20000d88 	.word	0x20000d88

0800026c <SK6812_SetColour>:

void SK6812_SetColour(uint8_t index, uint8_t red, uint8_t green, uint8_t blue) {
 800026c:	b490      	push	{r4, r7}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4604      	mov	r4, r0
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4623      	mov	r3, r4
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4603      	mov	r3, r0
 8000280:	71bb      	strb	r3, [r7, #6]
 8000282:	460b      	mov	r3, r1
 8000284:	717b      	strb	r3, [r7, #5]
 8000286:	4613      	mov	r3, r2
 8000288:	713b      	strb	r3, [r7, #4]

	SK6812_LEDSTRIP_DATA[index].colour.red = red;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <SK6812_SetColour+0x4c>)
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	79ba      	ldrb	r2, [r7, #6]
 8000294:	705a      	strb	r2, [r3, #1]
	SK6812_LEDSTRIP_DATA[index].colour.green = green;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <SK6812_SetColour+0x4c>)
 800029a:	797a      	ldrb	r2, [r7, #5]
 800029c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	SK6812_LEDSTRIP_DATA[index].colour.blue = blue;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <SK6812_SetColour+0x4c>)
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	4413      	add	r3, r2
 80002a8:	793a      	ldrb	r2, [r7, #4]
 80002aa:	709a      	strb	r2, [r3, #2]

}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc90      	pop	{r4, r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000028 	.word	0x20000028

080002bc <SK6812_Update>:

HAL_StatusTypeDef SK6812_Update() {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0

	if (!SK6812_DMA_COMPLETE_FLAG) {
 80002c2:	4b2a      	ldr	r3, [pc, #168]	@ (800036c <SK6812_Update+0xb0>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d101      	bne.n	80002d0 <SK6812_Update+0x14>

		return HAL_BUSY;
 80002cc:	2302      	movs	r3, #2
 80002ce:	e049      	b.n	8000364 <SK6812_Update+0xa8>

	}

	uint16_t bufIndex = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	80fb      	strh	r3, [r7, #6]

	for (uint8_t ledIndex = 0; ledIndex < SK6812_NUM_LEDS; ledIndex++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	717b      	strb	r3, [r7, #5]
 80002d8:	e031      	b.n	800033e <SK6812_Update+0x82>

		uint8_t transmitBitIndex = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	70bb      	strb	r3, [r7, #2]

		for (uint8_t bitIndex = 0; bitIndex < SK6812_BITS_PER_LED; bitIndex++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	713b      	strb	r3, [r7, #4]
 80002e2:	e026      	b.n	8000332 <SK6812_Update+0x76>

			transmitBitIndex = (7 - (bitIndex % 8)) + ((bitIndex / 8) * 8);
 80002e4:	793b      	ldrb	r3, [r7, #4]
 80002e6:	43db      	mvns	r3, r3
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	f003 0307 	and.w	r3, r3, #7
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	793b      	ldrb	r3, [r7, #4]
 80002f2:	08db      	lsrs	r3, r3, #3
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4413      	add	r3, r2
 80002fc:	70bb      	strb	r3, [r7, #2]

			if ((SK6812_LEDSTRIP_DATA[ledIndex].data >> transmitBitIndex) & 0x01) {
 80002fe:	797b      	ldrb	r3, [r7, #5]
 8000300:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <SK6812_Update+0xb4>)
 8000302:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000306:	78bb      	ldrb	r3, [r7, #2]
 8000308:	fa22 f303 	lsr.w	r3, r2, r3
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d004      	beq.n	800031e <SK6812_Update+0x62>

				SK6812_DMA_BUF[bufIndex] = SK6812_T1H_VAL;
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	4a17      	ldr	r2, [pc, #92]	@ (8000374 <SK6812_Update+0xb8>)
 8000318:	212b      	movs	r1, #43	@ 0x2b
 800031a:	54d1      	strb	r1, [r2, r3]
 800031c:	e003      	b.n	8000326 <SK6812_Update+0x6a>

			} else {

				SK6812_DMA_BUF[bufIndex] = SK6812_T0H_VAL;
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	4a14      	ldr	r2, [pc, #80]	@ (8000374 <SK6812_Update+0xb8>)
 8000322:	2116      	movs	r1, #22
 8000324:	54d1      	strb	r1, [r2, r3]

			}

			bufIndex++;
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	3301      	adds	r3, #1
 800032a:	80fb      	strh	r3, [r7, #6]
		for (uint8_t bitIndex = 0; bitIndex < SK6812_BITS_PER_LED; bitIndex++) {
 800032c:	793b      	ldrb	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	713b      	strb	r3, [r7, #4]
 8000332:	793b      	ldrb	r3, [r7, #4]
 8000334:	2b17      	cmp	r3, #23
 8000336:	d9d5      	bls.n	80002e4 <SK6812_Update+0x28>
	for (uint8_t ledIndex = 0; ledIndex < SK6812_NUM_LEDS; ledIndex++) {
 8000338:	797b      	ldrb	r3, [r7, #5]
 800033a:	3301      	adds	r3, #1
 800033c:	717b      	strb	r3, [r7, #5]
 800033e:	797b      	ldrb	r3, [r7, #5]
 8000340:	2b77      	cmp	r3, #119	@ 0x77
 8000342:	d9ca      	bls.n	80002da <SK6812_Update+0x1e>

	}

	// 80us reset period from Init function's 0s

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Start_DMA(&SK6812_TIM, SK6812_TIM_CHANNEL, (uint32_t*)SK6812_DMA_BUF, SK6812_DMA_BUF_LEN);
 8000344:	f44f 6338 	mov.w	r3, #2944	@ 0xb80
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <SK6812_Update+0xb8>)
 800034a:	2100      	movs	r1, #0
 800034c:	480a      	ldr	r0, [pc, #40]	@ (8000378 <SK6812_Update+0xbc>)
 800034e:	f002 fbab 	bl	8002aa8 <HAL_TIM_PWM_Start_DMA>
 8000352:	4603      	mov	r3, r0
 8000354:	70fb      	strb	r3, [r7, #3]

	if (ret == HAL_OK) {
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d102      	bne.n	8000362 <SK6812_Update+0xa6>

		SK6812_DMA_COMPLETE_FLAG = 0;
 800035c:	4b03      	ldr	r3, [pc, #12]	@ (800036c <SK6812_Update+0xb0>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]

	}

	return ret;
 8000362:	78fb      	ldrb	r3, [r7, #3]

}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000d88 	.word	0x20000d88
 8000370:	20000028 	.word	0x20000028
 8000374:	20000208 	.word	0x20000208
 8000378:	20000dd4 	.word	0x20000dd4

0800037c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim5, TIM_CHANNEL_1);
 8000384:	2100      	movs	r1, #0
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000388:	f002 fd48 	bl	8002e1c <HAL_TIM_PWM_Stop_DMA>

	SK6812_DMA_COMPLETE_FLAG = 1;
 800038c:	4b04      	ldr	r3, [pc, #16]	@ (80003a0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]

}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000dd4 	.word	0x20000dd4
 80003a0:	20000d88 	.word	0x20000d88

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 fe19 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f851 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 fa93 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 80003b6:	f000 fa37 	bl	8000828 <MX_DMA_Init>
  MX_TIM5_Init();
 80003ba:	f000 f917 	bl	80005ec <MX_TIM5_Init>
  MX_USB_PCD_Init();
 80003be:	f000 fa11 	bl	80007e4 <MX_USB_PCD_Init>
  MX_TIM8_Init();
 80003c2:	f000 f98d 	bl	80006e0 <MX_TIM8_Init>
  MX_TIM3_Init();
 80003c6:	f000 f8a1 	bl	800050c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SK6812_Init();
 80003ca:	f7ff ff2b 	bl	8000224 <SK6812_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t led = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	71fb      	strb	r3, [r7, #7]
  uint8_t direction = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 80003d6:	2300      	movs	r3, #0
 80003d8:	717b      	strb	r3, [r7, #5]
 80003da:	e013      	b.n	8000404 <main+0x60>
			if (i == led)
 80003dc:	797a      	ldrb	r2, [r7, #5]
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d106      	bne.n	80003f2 <main+0x4e>
				SK6812_SetColour(i, 235, 52, 232);
 80003e4:	7978      	ldrb	r0, [r7, #5]
 80003e6:	23e8      	movs	r3, #232	@ 0xe8
 80003e8:	2234      	movs	r2, #52	@ 0x34
 80003ea:	21eb      	movs	r1, #235	@ 0xeb
 80003ec:	f7ff ff3e 	bl	800026c <SK6812_SetColour>
 80003f0:	e005      	b.n	80003fe <main+0x5a>
			else
				SK6812_SetColour(i, 0, 0, 0);
 80003f2:	7978      	ldrb	r0, [r7, #5]
 80003f4:	2300      	movs	r3, #0
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	f7ff ff37 	bl	800026c <SK6812_SetColour>
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 80003fe:	797b      	ldrb	r3, [r7, #5]
 8000400:	3301      	adds	r3, #1
 8000402:	717b      	strb	r3, [r7, #5]
 8000404:	797b      	ldrb	r3, [r7, #5]
 8000406:	2b77      	cmp	r3, #119	@ 0x77
 8000408:	d9e8      	bls.n	80003dc <main+0x38>
		}
		if (direction == 0)
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d103      	bne.n	8000418 <main+0x74>
			led++;
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	3301      	adds	r3, #1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	e002      	b.n	800041e <main+0x7a>
		else
			led--;
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	3b01      	subs	r3, #1
 800041c:	71fb      	strb	r3, [r7, #7]
		if (led >= SK6812_NUM_LEDS) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b77      	cmp	r3, #119	@ 0x77
 8000422:	d904      	bls.n	800042e <main+0x8a>
			led = SK6812_NUM_LEDS;
 8000424:	2378      	movs	r3, #120	@ 0x78
 8000426:	71fb      	strb	r3, [r7, #7]
			direction = 1;
 8000428:	2301      	movs	r3, #1
 800042a:	71bb      	strb	r3, [r7, #6]
 800042c:	e006      	b.n	800043c <main+0x98>
		}
		else if (led <= 0) {
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d103      	bne.n	800043c <main+0x98>
			led = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	71fb      	strb	r3, [r7, #7]
			direction = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	71bb      	strb	r3, [r7, #6]
		}
		SK6812_Update();
 800043c:	f7ff ff3e 	bl	80002bc <SK6812_Update>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000440:	2120      	movs	r1, #32
 8000442:	4803      	ldr	r0, [pc, #12]	@ (8000450 <main+0xac>)
 8000444:	f001 fd3c 	bl	8001ec0 <HAL_GPIO_TogglePin>

		HAL_Delay(10);
 8000448:	200a      	movs	r0, #10
 800044a:	f000 fe2b 	bl	80010a4 <HAL_Delay>
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 800044e:	e7c2      	b.n	80003d6 <main+0x32>
 8000450:	40010800 	.word	0x40010800

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b096      	sub	sp, #88	@ 0x58
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800045e:	2228      	movs	r2, #40	@ 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fabf 	bl	80039e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	f107 031c 	add.w	r3, r7, #28
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
 8000486:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000488:	2301      	movs	r3, #1
 800048a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000490:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000496:	2301      	movs	r3, #1
 8000498:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fe16 	bl	80020e0 <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004ba:	f000 fa49 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2302      	movs	r3, #2
 80004c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d4:	f107 031c 	add.w	r3, r7, #28
 80004d8:	2102      	movs	r1, #2
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 f882 	bl	80025e4 <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004e6:	f000 fa33 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ea:	2310      	movs	r3, #16
 80004ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 f9d1 	bl	800289c <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000500:	f000 fa26 	bl	8000950 <Error_Handler>
  }
}
 8000504:	bf00      	nop
 8000506:	3758      	adds	r7, #88	@ 0x58
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800052e:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 8000530:	4a2d      	ldr	r2, [pc, #180]	@ (80005e8 <MX_TIM3_Init+0xdc>)
 8000532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000534:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 8000542:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000554:	4823      	ldr	r0, [pc, #140]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 8000556:	f002 fa57 	bl	8002a08 <HAL_TIM_PWM_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 f9f6 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4619      	mov	r1, r3
 8000572:	481c      	ldr	r0, [pc, #112]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 8000574:	f003 f920 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800057e:	f000 f9e7 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000582:	2360      	movs	r3, #96	@ 0x60
 8000584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	4812      	ldr	r0, [pc, #72]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 800059a:	f002 fd11 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80005a4:	f000 f9d4 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2208      	movs	r2, #8
 80005ac:	4619      	mov	r1, r3
 80005ae:	480d      	ldr	r0, [pc, #52]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 80005b0:	f002 fd06 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80005ba:	f000 f9c9 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	220c      	movs	r2, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 80005c6:	f002 fcfb 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80005d0:	f000 f9be 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <MX_TIM3_Init+0xd8>)
 80005d6:	f000 fbb5 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000d8c 	.word	0x20000d8c
 80005e8:	40000400 	.word	0x40000400

080005ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800060e:	4b32      	ldr	r3, [pc, #200]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000610:	4a32      	ldr	r2, [pc, #200]	@ (80006dc <MX_TIM5_Init+0xf0>)
 8000612:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8000614:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <MX_TIM5_Init+0xec>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90-1;
 8000620:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000622:	2259      	movs	r2, #89	@ 0x59
 8000624:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <MX_TIM5_Init+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000632:	4829      	ldr	r0, [pc, #164]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000634:	f002 f9e8 	bl	8002a08 <HAL_TIM_PWM_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800063e:	f000 f987 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4619      	mov	r1, r3
 8000650:	4821      	ldr	r0, [pc, #132]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000652:	f003 f8b1 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800065c:	f000 f978 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000660:	2360      	movs	r3, #96	@ 0x60
 8000662:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	4818      	ldr	r0, [pc, #96]	@ (80006d8 <MX_TIM5_Init+0xec>)
 8000678:	f002 fca2 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000682:	f000 f965 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2204      	movs	r2, #4
 800068a:	4619      	mov	r1, r3
 800068c:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <MX_TIM5_Init+0xec>)
 800068e:	f002 fc97 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000698:	f000 f95a 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2208      	movs	r2, #8
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_TIM5_Init+0xec>)
 80006a4:	f002 fc8c 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 80006ae:	f000 f94f 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	220c      	movs	r2, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <MX_TIM5_Init+0xec>)
 80006ba:	f002 fc81 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 80006c4:	f000 f944 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <MX_TIM5_Init+0xec>)
 80006ca:	f000 fb3b 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000dd4 	.word	0x20000dd4
 80006dc:	40000c00 	.word	0x40000c00

080006e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b092      	sub	sp, #72	@ 0x48
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f96b 	bl	80039e6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <MX_TIM8_Init+0xfc>)
 8000712:	4a33      	ldr	r2, [pc, #204]	@ (80007e0 <MX_TIM8_Init+0x100>)
 8000714:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <MX_TIM8_Init+0xfc>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <MX_TIM8_Init+0xfc>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 90-1;
 8000722:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <MX_TIM8_Init+0xfc>)
 8000724:	2259      	movs	r2, #89	@ 0x59
 8000726:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <MX_TIM8_Init+0xfc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_TIM8_Init+0xfc>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_TIM8_Init+0xfc>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800073a:	4828      	ldr	r0, [pc, #160]	@ (80007dc <MX_TIM8_Init+0xfc>)
 800073c:	f002 f964 	bl	8002a08 <HAL_TIM_PWM_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000746:	f000 f903 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000752:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000756:	4619      	mov	r1, r3
 8000758:	4820      	ldr	r0, [pc, #128]	@ (80007dc <MX_TIM8_Init+0xfc>)
 800075a:	f003 f82d 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8000764:	f000 f8f4 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000768:	2360      	movs	r3, #96	@ 0x60
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	4813      	ldr	r0, [pc, #76]	@ (80007dc <MX_TIM8_Init+0xfc>)
 800078e:	f002 fc17 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8000798:	f000 f8da 	bl	8000950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM8_Init+0xfc>)
 80007c0:	f003 f866 	bl	8003890 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80007ca:	f000 f8c1 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM8_Init+0xfc>)
 80007d0:	f000 fab8 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3748      	adds	r7, #72	@ 0x48
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000e1c 	.word	0x20000e1c
 80007e0:	40013400 	.word	0x40013400

080007e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <MX_USB_PCD_Init+0x40>)
 80007ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 80007f0:	2208      	movs	r2, #8
 80007f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 8000802:	2200      	movs	r2, #0
 8000804:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 8000808:	2200      	movs	r2, #0
 800080a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_USB_PCD_Init+0x3c>)
 800080e:	f001 fb70 	bl	8001ef2 <HAL_PCD_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000818:	f000 f89a 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20001084 	.word	0x20001084
 8000824:	40005c00 	.word	0x40005c00

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <MX_DMA_Init+0xb0>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a29      	ldr	r2, [pc, #164]	@ (80008d8 <MX_DMA_Init+0xb0>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_DMA_Init+0xb0>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_DMA_Init+0xb0>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a23      	ldr	r2, [pc, #140]	@ (80008d8 <MX_DMA_Init+0xb0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_DMA_Init+0xb0>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	200c      	movs	r0, #12
 8000864:	f000 fd19 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000868:	200c      	movs	r0, #12
 800086a:	f000 fd32 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	200d      	movs	r0, #13
 8000874:	f000 fd11 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000878:	200d      	movs	r0, #13
 800087a:	f000 fd2a 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2010      	movs	r0, #16
 8000884:	f000 fd09 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000888:	2010      	movs	r0, #16
 800088a:	f000 fd22 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f000 fd01 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f000 fd1a 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f000 fcf9 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f000 fd12 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f000 fcf1 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f000 fd0a 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f000 fce9 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f000 fd02 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_GPIO_Init+0x70>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a19      	ldr	r2, [pc, #100]	@ (800094c <MX_GPIO_Init+0x70>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_GPIO_Init+0x70>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_GPIO_Init+0x70>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a13      	ldr	r2, [pc, #76]	@ (800094c <MX_GPIO_Init+0x70>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_GPIO_Init+0x70>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_GPIO_Init+0x70>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <MX_GPIO_Init+0x70>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_GPIO_Init+0x70>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_GPIO_Init+0x70>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a07      	ldr	r2, [pc, #28]	@ (800094c <MX_GPIO_Init+0x70>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <MX_GPIO_Init+0x70>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	40021000 	.word	0x40021000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <HAL_MspInit+0x5c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_MspInit+0x5c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_MspInit+0x5c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_MspInit+0x5c>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <HAL_MspInit+0x60>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <HAL_MspInit+0x60>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010000 	.word	0x40010000

080009c0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a4a      	ldr	r2, [pc, #296]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x138>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	f040 80a2 	bne.w	8000b18 <HAL_TIM_PWM_MspInit+0x158>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009d4:	4b49      	ldr	r3, [pc, #292]	@ (8000afc <HAL_TIM_PWM_MspInit+0x13c>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	4a48      	ldr	r2, [pc, #288]	@ (8000afc <HAL_TIM_PWM_MspInit+0x13c>)
 80009da:	f043 0302 	orr.w	r3, r3, #2
 80009de:	61d3      	str	r3, [r2, #28]
 80009e0:	4b46      	ldr	r3, [pc, #280]	@ (8000afc <HAL_TIM_PWM_MspInit+0x13c>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80009ec:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 80009ee:	4a45      	ldr	r2, [pc, #276]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x144>)
 80009f0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f2:	4b43      	ldr	r3, [pc, #268]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f8:	4b41      	ldr	r3, [pc, #260]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80009fe:	4b40      	ldr	r3, [pc, #256]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a00:	2280      	movs	r2, #128	@ 0x80
 8000a02:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a04:	4b3e      	ldr	r3, [pc, #248]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a0a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a12:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000a14:	4b3a      	ldr	r3, [pc, #232]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000a1a:	4b39      	ldr	r3, [pc, #228]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000a20:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a22:	f000 fc71 	bl	8001308 <HAL_DMA_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8000a2c:	f7ff ff90 	bl	8000950 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a33      	ldr	r2, [pc, #204]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a36:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a30      	ldr	r2, [pc, #192]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a40:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a42:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x140>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a4a:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <HAL_TIM_PWM_MspInit+0x14c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a60:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a68:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8000a70:	4b25      	ldr	r3, [pc, #148]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8000a7c:	4822      	ldr	r0, [pc, #136]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a7e:	f000 fc43 	bl	8001308 <HAL_DMA_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_TIM_PWM_MspInit+0xcc>
    {
      Error_Handler();
 8000a88:	f7ff ff62 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a92:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x148>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <HAL_TIM_PWM_MspInit+0x154>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000abe:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000acc:	4810      	ldr	r0, [pc, #64]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000ace:	f000 fc1b 	bl	8001308 <HAL_DMA_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_TIM_PWM_MspInit+0x11c>
    {
      Error_Handler();
 8000ad8:	f7ff ff3a 	bl	8000950 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000ae0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000aec:	621a      	str	r2, [r3, #32]
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <HAL_TIM_PWM_MspInit+0x150>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000af4:	e108      	b.n	8000d08 <HAL_TIM_PWM_MspInit+0x348>
 8000af6:	bf00      	nop
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	20000e64 	.word	0x20000e64
 8000b04:	4002006c 	.word	0x4002006c
 8000b08:	20000ea8 	.word	0x20000ea8
 8000b0c:	4002001c 	.word	0x4002001c
 8000b10:	20000eec 	.word	0x20000eec
 8000b14:	40020030 	.word	0x40020030
  else if(htim_pwm->Instance==TIM5)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8000d10 <HAL_TIM_PWM_MspInit+0x350>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f040 80b9 	bne.w	8000c96 <HAL_TIM_PWM_MspInit+0x2d6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b24:	4b7b      	ldr	r3, [pc, #492]	@ (8000d14 <HAL_TIM_PWM_MspInit+0x354>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a7a      	ldr	r2, [pc, #488]	@ (8000d14 <HAL_TIM_PWM_MspInit+0x354>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b78      	ldr	r3, [pc, #480]	@ (8000d14 <HAL_TIM_PWM_MspInit+0x354>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA2_Channel5;
 8000b3c:	4b76      	ldr	r3, [pc, #472]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b3e:	4a77      	ldr	r2, [pc, #476]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x35c>)
 8000b40:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b42:	4b75      	ldr	r3, [pc, #468]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b48:	4b73      	ldr	r3, [pc, #460]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4e:	4b72      	ldr	r3, [pc, #456]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b54:	4b70      	ldr	r3, [pc, #448]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b62:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000b64:	4b6c      	ldr	r3, [pc, #432]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000b70:	4869      	ldr	r0, [pc, #420]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b72:	f000 fbc9 	bl	8001308 <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_TIM_PWM_MspInit+0x1c0>
      Error_Handler();
 8000b7c:	f7ff fee8 	bl	8000950 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a65      	ldr	r2, [pc, #404]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b86:	4a64      	ldr	r2, [pc, #400]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x358>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch2.Instance = DMA2_Channel4;
 8000b8c:	4b64      	ldr	r3, [pc, #400]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000b8e:	4a65      	ldr	r2, [pc, #404]	@ (8000d24 <HAL_TIM_PWM_MspInit+0x364>)
 8000b90:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b63      	ldr	r3, [pc, #396]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b61      	ldr	r3, [pc, #388]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b60      	ldr	r3, [pc, #384]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000baa:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bac:	4b5c      	ldr	r3, [pc, #368]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b59      	ldr	r3, [pc, #356]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000bc0:	4857      	ldr	r0, [pc, #348]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000bc2:	f000 fba1 	bl	8001308 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_TIM_PWM_MspInit+0x210>
      Error_Handler();
 8000bcc:	f7ff fec0 	bl	8000950 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a53      	ldr	r2, [pc, #332]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bd6:	4a52      	ldr	r2, [pc, #328]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x360>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch3_up.Instance = DMA2_Channel2;
 8000bdc:	4b52      	ldr	r3, [pc, #328]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000bde:	4a53      	ldr	r2, [pc, #332]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x36c>)
 8000be0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b51      	ldr	r3, [pc, #324]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b4e      	ldr	r3, [pc, #312]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfa:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8000c04:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8000c0a:	4b47      	ldr	r3, [pc, #284]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8000c10:	4845      	ldr	r0, [pc, #276]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c12:	f000 fb79 	bl	8001308 <HAL_DMA_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_TIM_PWM_MspInit+0x260>
      Error_Handler();
 8000c1c:	f7ff fe98 	bl	8000950 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a41      	ldr	r2, [pc, #260]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c26:	4a40      	ldr	r2, [pc, #256]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c30:	621a      	str	r2, [r3, #32]
 8000c32:	4a3d      	ldr	r2, [pc, #244]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x368>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch4_trig.Instance = DMA2_Channel1;
 8000c38:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d34 <HAL_TIM_PWM_MspInit+0x374>)
 8000c3c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c50:	4b37      	ldr	r3, [pc, #220]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c58:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8000c60:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8000c6c:	4830      	ldr	r0, [pc, #192]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c6e:	f000 fb4b 	bl	8001308 <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_TIM_PWM_MspInit+0x2bc>
      Error_Handler();
 8000c78:	f7ff fe6a 	bl	8000950 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c82:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a29      	ldr	r2, [pc, #164]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c8e:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x370>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000c94:	e038      	b.n	8000d08 <HAL_TIM_PWM_MspInit+0x348>
  else if(htim_pwm->Instance==TIM8)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <HAL_TIM_PWM_MspInit+0x378>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d133      	bne.n	8000d08 <HAL_TIM_PWM_MspInit+0x348>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_TIM_PWM_MspInit+0x354>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <HAL_TIM_PWM_MspInit+0x354>)
 8000ca6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_TIM_PWM_MspInit+0x354>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000cba:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x380>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cde:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000cee:	f000 fb0b 	bl	8001308 <HAL_DMA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_TIM_PWM_MspInit+0x33c>
      Error_Handler();
 8000cf8:	f7ff fe2a 	bl	8000950 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d02:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x37c>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40000c00 	.word	0x40000c00
 8000d14:	40021000 	.word	0x40021000
 8000d18:	20000f30 	.word	0x20000f30
 8000d1c:	40020458 	.word	0x40020458
 8000d20:	20000f74 	.word	0x20000f74
 8000d24:	40020444 	.word	0x40020444
 8000d28:	20000fb8 	.word	0x20000fb8
 8000d2c:	4002041c 	.word	0x4002041c
 8000d30:	20000ffc 	.word	0x20000ffc
 8000d34:	40020408 	.word	0x40020408
 8000d38:	40013400 	.word	0x40013400
 8000d3c:	20001040 	.word	0x20001040
 8000d40:	40020430 	.word	0x40020430

08000d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a39      	ldr	r2, [pc, #228]	@ (8000e44 <HAL_TIM_MspPostInit+0x100>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d130      	bne.n	8000dc6 <HAL_TIM_MspPostInit+0x82>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b38      	ldr	r3, [pc, #224]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a37      	ldr	r2, [pc, #220]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a31      	ldr	r2, [pc, #196]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d94:	2340      	movs	r3, #64	@ 0x40
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <HAL_TIM_MspPostInit+0x108>)
 8000da8:	f000 fef6 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dac:	2303      	movs	r3, #3
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4824      	ldr	r0, [pc, #144]	@ (8000e50 <HAL_TIM_MspPostInit+0x10c>)
 8000dc0:	f000 feea 	bl	8001b98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000dc4:	e03a      	b.n	8000e3c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM5)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a22      	ldr	r2, [pc, #136]	@ (8000e54 <HAL_TIM_MspPostInit+0x110>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d118      	bne.n	8000e02 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000de8:	230f      	movs	r3, #15
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <HAL_TIM_MspPostInit+0x108>)
 8000dfc:	f000 fecc 	bl	8001b98 <HAL_GPIO_Init>
}
 8000e00:	e01c      	b.n	8000e3c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <HAL_TIM_MspPostInit+0x114>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d117      	bne.n	8000e3c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_TIM_MspPostInit+0x104>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e24:	2340      	movs	r3, #64	@ 0x40
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <HAL_TIM_MspPostInit+0x118>)
 8000e38:	f000 feae 	bl	8001b98 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	@ 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40000400 	.word	0x40000400
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	40000c00 	.word	0x40000c00
 8000e58:	40013400 	.word	0x40013400
 8000e5c:	40011000 	.word	0x40011000

08000e60 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <HAL_PCD_MspInit+0x34>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10b      	bne.n	8000e8a <HAL_PCD_MspInit+0x2a>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <HAL_PCD_MspInit+0x38>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a08      	ldr	r2, [pc, #32]	@ (8000e98 <HAL_PCD_MspInit+0x38>)
 8000e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_PCD_MspInit+0x38>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40005c00 	.word	0x40005c00
 8000e98:	40021000 	.word	0x40021000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8be 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel2_IRQHandler+0x10>)
 8000efa:	f000 fbe3 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000ea8 	.word	0x20000ea8

08000f08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <DMA1_Channel3_IRQHandler+0x10>)
 8000f0e:	f000 fbd9 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000eec 	.word	0x20000eec

08000f1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <DMA1_Channel6_IRQHandler+0x10>)
 8000f22:	f000 fbcf 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000e64 	.word	0x20000e64

08000f30 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <DMA2_Channel1_IRQHandler+0x10>)
 8000f36:	f000 fbc5 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000ffc 	.word	0x20000ffc

08000f44 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <DMA2_Channel2_IRQHandler+0x10>)
 8000f4a:	f000 fbbb 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000fb8 	.word	0x20000fb8

08000f58 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA2_Channel3_IRQHandler+0x10>)
 8000f5e:	f000 fbb1 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20001040 	.word	0x20001040

08000f6c <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <DMA2_Channel4_5_IRQHandler+0x14>)
 8000f72:	f000 fba7 	bl	80016c4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8000f76:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <DMA2_Channel4_5_IRQHandler+0x18>)
 8000f78:	f000 fba4 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000f74 	.word	0x20000f74
 8000f84:	20000f30 	.word	0x20000f30

08000f88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff fff8 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f9a:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb0:	4c09      	ldr	r4, [pc, #36]	@ (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f002 fd1b 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc2:	f7ff f9ef 	bl	80003a4 <main>
  bx lr
 8000fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd0:	08003a84 	.word	0x08003a84
  ldr r2, =_sbss
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd8:	20001360 	.word	0x20001360

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_Init+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <HAL_Init+0x28>)
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f947 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fcae 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f95f 	bl	80012ee <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001048:	f000 f927 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_IncTick+0x1c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_IncTick+0x20>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a03      	ldr	r2, [pc, #12]	@ (800108c <HAL_IncTick+0x20>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000008 	.word	0x20000008
 800108c:	2000135c 	.word	0x2000135c

08001090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b02      	ldr	r3, [pc, #8]	@ (80010a0 <HAL_GetTick+0x10>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	2000135c 	.word	0x2000135c

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff fff0 	bl	8001090 <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffe0 	bl	8001090 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4906      	ldr	r1, [pc, #24]	@ (8001184 <__NVIC_EnableIRQ+0x34>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	f7ff ff90 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff2d 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff42 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e059      	b.n	80013d2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_DMA_Init+0xd4>)
 8001326:	429a      	cmp	r2, r3
 8001328:	d80f      	bhi.n	800134a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <HAL_DMA_Init+0xd8>)
 8001332:	4413      	add	r3, r2
 8001334:	4a2b      	ldr	r2, [pc, #172]	@ (80013e4 <HAL_DMA_Init+0xdc>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	009a      	lsls	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <HAL_DMA_Init+0xe0>)
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001348:	e00e      	b.n	8001368 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <HAL_DMA_Init+0xe4>)
 8001352:	4413      	add	r3, r2
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_DMA_Init+0xdc>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	009a      	lsls	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <HAL_DMA_Init+0xe8>)
 8001366:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800137e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800138c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40020407 	.word	0x40020407
 80013e0:	bffdfff8 	.word	0xbffdfff8
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	40020000 	.word	0x40020000
 80013ec:	bffdfbf8 	.word	0xbffdfbf8
 80013f0:	40020400 	.word	0x40020400

080013f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_DMA_Start_IT+0x20>
 8001410:	2302      	movs	r3, #2
 8001412:	e04b      	b.n	80014ac <HAL_DMA_Start_IT+0xb8>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d13a      	bne.n	800149e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fb75 	bl	8001b3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 020e 	orr.w	r2, r2, #14
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e00f      	b.n	800148c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0204 	bic.w	r2, r2, #4
 800147a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 020a 	orr.w	r2, r2, #10
 800148a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e005      	b.n	80014aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014a6:	2302      	movs	r3, #2
 80014a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d005      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2204      	movs	r2, #4
 80014d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e0d6      	b.n	8001686 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020e 	bic.w	r2, r2, #14
 80014e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b64      	ldr	r3, [pc, #400]	@ (8001690 <HAL_DMA_Abort_IT+0x1dc>)
 8001500:	429a      	cmp	r2, r3
 8001502:	d958      	bls.n	80015b6 <HAL_DMA_Abort_IT+0x102>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a62      	ldr	r2, [pc, #392]	@ (8001694 <HAL_DMA_Abort_IT+0x1e0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d04f      	beq.n	80015ae <HAL_DMA_Abort_IT+0xfa>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a61      	ldr	r2, [pc, #388]	@ (8001698 <HAL_DMA_Abort_IT+0x1e4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d048      	beq.n	80015aa <HAL_DMA_Abort_IT+0xf6>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a5f      	ldr	r2, [pc, #380]	@ (800169c <HAL_DMA_Abort_IT+0x1e8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d040      	beq.n	80015a4 <HAL_DMA_Abort_IT+0xf0>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5e      	ldr	r2, [pc, #376]	@ (80016a0 <HAL_DMA_Abort_IT+0x1ec>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d038      	beq.n	800159e <HAL_DMA_Abort_IT+0xea>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a5c      	ldr	r2, [pc, #368]	@ (80016a4 <HAL_DMA_Abort_IT+0x1f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d030      	beq.n	8001598 <HAL_DMA_Abort_IT+0xe4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a5b      	ldr	r2, [pc, #364]	@ (80016a8 <HAL_DMA_Abort_IT+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d028      	beq.n	8001592 <HAL_DMA_Abort_IT+0xde>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_DMA_Abort_IT+0x1dc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d020      	beq.n	800158c <HAL_DMA_Abort_IT+0xd8>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a57      	ldr	r2, [pc, #348]	@ (80016ac <HAL_DMA_Abort_IT+0x1f8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d019      	beq.n	8001588 <HAL_DMA_Abort_IT+0xd4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a55      	ldr	r2, [pc, #340]	@ (80016b0 <HAL_DMA_Abort_IT+0x1fc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d012      	beq.n	8001584 <HAL_DMA_Abort_IT+0xd0>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <HAL_DMA_Abort_IT+0x200>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00a      	beq.n	800157e <HAL_DMA_Abort_IT+0xca>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a52      	ldr	r2, [pc, #328]	@ (80016b8 <HAL_DMA_Abort_IT+0x204>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d102      	bne.n	8001578 <HAL_DMA_Abort_IT+0xc4>
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	e01b      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 8001578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800157c:	e018      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 800157e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001582:	e015      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 8001584:	2310      	movs	r3, #16
 8001586:	e013      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 8001588:	2301      	movs	r3, #1
 800158a:	e011      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 800158c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001590:	e00e      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 8001592:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001596:	e00b      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 8001598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159c:	e008      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	e005      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 80015a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a8:	e002      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 80015aa:	2310      	movs	r3, #16
 80015ac:	e000      	b.n	80015b0 <HAL_DMA_Abort_IT+0xfc>
 80015ae:	2301      	movs	r3, #1
 80015b0:	4a42      	ldr	r2, [pc, #264]	@ (80016bc <HAL_DMA_Abort_IT+0x208>)
 80015b2:	6053      	str	r3, [r2, #4]
 80015b4:	e057      	b.n	8001666 <HAL_DMA_Abort_IT+0x1b2>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a36      	ldr	r2, [pc, #216]	@ (8001694 <HAL_DMA_Abort_IT+0x1e0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d04f      	beq.n	8001660 <HAL_DMA_Abort_IT+0x1ac>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a34      	ldr	r2, [pc, #208]	@ (8001698 <HAL_DMA_Abort_IT+0x1e4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d048      	beq.n	800165c <HAL_DMA_Abort_IT+0x1a8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a33      	ldr	r2, [pc, #204]	@ (800169c <HAL_DMA_Abort_IT+0x1e8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d040      	beq.n	8001656 <HAL_DMA_Abort_IT+0x1a2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a31      	ldr	r2, [pc, #196]	@ (80016a0 <HAL_DMA_Abort_IT+0x1ec>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d038      	beq.n	8001650 <HAL_DMA_Abort_IT+0x19c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a30      	ldr	r2, [pc, #192]	@ (80016a4 <HAL_DMA_Abort_IT+0x1f0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d030      	beq.n	800164a <HAL_DMA_Abort_IT+0x196>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2e      	ldr	r2, [pc, #184]	@ (80016a8 <HAL_DMA_Abort_IT+0x1f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d028      	beq.n	8001644 <HAL_DMA_Abort_IT+0x190>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a26      	ldr	r2, [pc, #152]	@ (8001690 <HAL_DMA_Abort_IT+0x1dc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d020      	beq.n	800163e <HAL_DMA_Abort_IT+0x18a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2a      	ldr	r2, [pc, #168]	@ (80016ac <HAL_DMA_Abort_IT+0x1f8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_DMA_Abort_IT+0x186>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a29      	ldr	r2, [pc, #164]	@ (80016b0 <HAL_DMA_Abort_IT+0x1fc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d012      	beq.n	8001636 <HAL_DMA_Abort_IT+0x182>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <HAL_DMA_Abort_IT+0x200>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00a      	beq.n	8001630 <HAL_DMA_Abort_IT+0x17c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <HAL_DMA_Abort_IT+0x204>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d102      	bne.n	800162a <HAL_DMA_Abort_IT+0x176>
 8001624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001628:	e01b      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 800162a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162e:	e018      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 8001630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001634:	e015      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 8001636:	2310      	movs	r3, #16
 8001638:	e013      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 800163a:	2301      	movs	r3, #1
 800163c:	e011      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 800163e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001642:	e00e      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 8001644:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001648:	e00b      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 800164a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800164e:	e008      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 8001650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001654:	e005      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 8001656:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800165a:	e002      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 800165c:	2310      	movs	r3, #16
 800165e:	e000      	b.n	8001662 <HAL_DMA_Abort_IT+0x1ae>
 8001660:	2301      	movs	r3, #1
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_DMA_Abort_IT+0x20c>)
 8001664:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
    } 
  }
  return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020080 	.word	0x40020080
 8001694:	40020008 	.word	0x40020008
 8001698:	4002001c 	.word	0x4002001c
 800169c:	40020030 	.word	0x40020030
 80016a0:	40020044 	.word	0x40020044
 80016a4:	40020058 	.word	0x40020058
 80016a8:	4002006c 	.word	0x4002006c
 80016ac:	40020408 	.word	0x40020408
 80016b0:	4002041c 	.word	0x4002041c
 80016b4:	40020430 	.word	0x40020430
 80016b8:	40020444 	.word	0x40020444
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2204      	movs	r2, #4
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80f1 	beq.w	80018d0 <HAL_DMA_IRQHandler+0x20c>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80eb 	beq.w	80018d0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b5f      	ldr	r3, [pc, #380]	@ (800189c <HAL_DMA_IRQHandler+0x1d8>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d958      	bls.n	80017d6 <HAL_DMA_IRQHandler+0x112>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5d      	ldr	r2, [pc, #372]	@ (80018a0 <HAL_DMA_IRQHandler+0x1dc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d04f      	beq.n	80017ce <HAL_DMA_IRQHandler+0x10a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5c      	ldr	r2, [pc, #368]	@ (80018a4 <HAL_DMA_IRQHandler+0x1e0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d048      	beq.n	80017ca <HAL_DMA_IRQHandler+0x106>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a5a      	ldr	r2, [pc, #360]	@ (80018a8 <HAL_DMA_IRQHandler+0x1e4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d040      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x100>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a59      	ldr	r2, [pc, #356]	@ (80018ac <HAL_DMA_IRQHandler+0x1e8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d038      	beq.n	80017be <HAL_DMA_IRQHandler+0xfa>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a57      	ldr	r2, [pc, #348]	@ (80018b0 <HAL_DMA_IRQHandler+0x1ec>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d030      	beq.n	80017b8 <HAL_DMA_IRQHandler+0xf4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a56      	ldr	r2, [pc, #344]	@ (80018b4 <HAL_DMA_IRQHandler+0x1f0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d028      	beq.n	80017b2 <HAL_DMA_IRQHandler+0xee>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4d      	ldr	r2, [pc, #308]	@ (800189c <HAL_DMA_IRQHandler+0x1d8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d020      	beq.n	80017ac <HAL_DMA_IRQHandler+0xe8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d019      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xe4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a50      	ldr	r2, [pc, #320]	@ (80018bc <HAL_DMA_IRQHandler+0x1f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d012      	beq.n	80017a4 <HAL_DMA_IRQHandler+0xe0>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a4f      	ldr	r2, [pc, #316]	@ (80018c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00a      	beq.n	800179e <HAL_DMA_IRQHandler+0xda>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4d      	ldr	r2, [pc, #308]	@ (80018c4 <HAL_DMA_IRQHandler+0x200>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d102      	bne.n	8001798 <HAL_DMA_IRQHandler+0xd4>
 8001792:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001796:	e01b      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 8001798:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800179c:	e018      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 800179e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a2:	e015      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017a4:	2340      	movs	r3, #64	@ 0x40
 80017a6:	e013      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e011      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80017b0:	e00e      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017b6:	e00b      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017bc:	e008      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c2:	e005      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c8:	e002      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	e000      	b.n	80017d0 <HAL_DMA_IRQHandler+0x10c>
 80017ce:	2304      	movs	r3, #4
 80017d0:	4a3d      	ldr	r2, [pc, #244]	@ (80018c8 <HAL_DMA_IRQHandler+0x204>)
 80017d2:	6053      	str	r3, [r2, #4]
 80017d4:	e057      	b.n	8001886 <HAL_DMA_IRQHandler+0x1c2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a31      	ldr	r2, [pc, #196]	@ (80018a0 <HAL_DMA_IRQHandler+0x1dc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d04f      	beq.n	8001880 <HAL_DMA_IRQHandler+0x1bc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2f      	ldr	r2, [pc, #188]	@ (80018a4 <HAL_DMA_IRQHandler+0x1e0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d048      	beq.n	800187c <HAL_DMA_IRQHandler+0x1b8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2e      	ldr	r2, [pc, #184]	@ (80018a8 <HAL_DMA_IRQHandler+0x1e4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d040      	beq.n	8001876 <HAL_DMA_IRQHandler+0x1b2>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	@ (80018ac <HAL_DMA_IRQHandler+0x1e8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d038      	beq.n	8001870 <HAL_DMA_IRQHandler+0x1ac>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a2b      	ldr	r2, [pc, #172]	@ (80018b0 <HAL_DMA_IRQHandler+0x1ec>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d030      	beq.n	800186a <HAL_DMA_IRQHandler+0x1a6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <HAL_DMA_IRQHandler+0x1f0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d028      	beq.n	8001864 <HAL_DMA_IRQHandler+0x1a0>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a21      	ldr	r2, [pc, #132]	@ (800189c <HAL_DMA_IRQHandler+0x1d8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d020      	beq.n	800185e <HAL_DMA_IRQHandler+0x19a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a25      	ldr	r2, [pc, #148]	@ (80018b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_DMA_IRQHandler+0x196>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a24      	ldr	r2, [pc, #144]	@ (80018bc <HAL_DMA_IRQHandler+0x1f8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d012      	beq.n	8001856 <HAL_DMA_IRQHandler+0x192>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00a      	beq.n	8001850 <HAL_DMA_IRQHandler+0x18c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <HAL_DMA_IRQHandler+0x200>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <HAL_DMA_IRQHandler+0x186>
 8001844:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001848:	e01b      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 800184a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800184e:	e018      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 8001850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001854:	e015      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 8001856:	2340      	movs	r3, #64	@ 0x40
 8001858:	e013      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 800185a:	2304      	movs	r3, #4
 800185c:	e011      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 800185e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001862:	e00e      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 8001864:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001868:	e00b      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 800186a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800186e:	e008      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 8001870:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001874:	e005      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 8001876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187a:	e002      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 800187c:	2340      	movs	r3, #64	@ 0x40
 800187e:	e000      	b.n	8001882 <HAL_DMA_IRQHandler+0x1be>
 8001880:	2304      	movs	r3, #4
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <HAL_DMA_IRQHandler+0x208>)
 8001884:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8136 	beq.w	8001afc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001898:	e130      	b.n	8001afc <HAL_DMA_IRQHandler+0x438>
 800189a:	bf00      	nop
 800189c:	40020080 	.word	0x40020080
 80018a0:	40020008 	.word	0x40020008
 80018a4:	4002001c 	.word	0x4002001c
 80018a8:	40020030 	.word	0x40020030
 80018ac:	40020044 	.word	0x40020044
 80018b0:	40020058 	.word	0x40020058
 80018b4:	4002006c 	.word	0x4002006c
 80018b8:	40020408 	.word	0x40020408
 80018bc:	4002041c 	.word	0x4002041c
 80018c0:	40020430 	.word	0x40020430
 80018c4:	40020444 	.word	0x40020444
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2202      	movs	r2, #2
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80dd 	beq.w	8001a9c <HAL_DMA_IRQHandler+0x3d8>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80d7 	beq.w	8001a9c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10b      	bne.n	8001914 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 020a 	bic.w	r2, r2, #10
 800190a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b08 <HAL_DMA_IRQHandler+0x444>)
 800191c:	429a      	cmp	r2, r3
 800191e:	d958      	bls.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a79      	ldr	r2, [pc, #484]	@ (8001b0c <HAL_DMA_IRQHandler+0x448>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d04f      	beq.n	80019ca <HAL_DMA_IRQHandler+0x306>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a78      	ldr	r2, [pc, #480]	@ (8001b10 <HAL_DMA_IRQHandler+0x44c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d048      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x302>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a76      	ldr	r2, [pc, #472]	@ (8001b14 <HAL_DMA_IRQHandler+0x450>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d040      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2fc>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a75      	ldr	r2, [pc, #468]	@ (8001b18 <HAL_DMA_IRQHandler+0x454>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d038      	beq.n	80019ba <HAL_DMA_IRQHandler+0x2f6>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a73      	ldr	r2, [pc, #460]	@ (8001b1c <HAL_DMA_IRQHandler+0x458>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d030      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x2f0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a72      	ldr	r2, [pc, #456]	@ (8001b20 <HAL_DMA_IRQHandler+0x45c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d028      	beq.n	80019ae <HAL_DMA_IRQHandler+0x2ea>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a69      	ldr	r2, [pc, #420]	@ (8001b08 <HAL_DMA_IRQHandler+0x444>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d020      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x2e4>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b24 <HAL_DMA_IRQHandler+0x460>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d019      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x2e0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6c      	ldr	r2, [pc, #432]	@ (8001b28 <HAL_DMA_IRQHandler+0x464>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d012      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2dc>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6b      	ldr	r2, [pc, #428]	@ (8001b2c <HAL_DMA_IRQHandler+0x468>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00a      	beq.n	800199a <HAL_DMA_IRQHandler+0x2d6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a69      	ldr	r2, [pc, #420]	@ (8001b30 <HAL_DMA_IRQHandler+0x46c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d102      	bne.n	8001994 <HAL_DMA_IRQHandler+0x2d0>
 800198e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001992:	e01b      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 8001994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001998:	e018      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 800199a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800199e:	e015      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019a0:	2320      	movs	r3, #32
 80019a2:	e013      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e011      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ac:	e00e      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019ae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80019b2:	e00b      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b8:	e008      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019be:	e005      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c4:	e002      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019c6:	2320      	movs	r3, #32
 80019c8:	e000      	b.n	80019cc <HAL_DMA_IRQHandler+0x308>
 80019ca:	2302      	movs	r3, #2
 80019cc:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_DMA_IRQHandler+0x470>)
 80019ce:	6053      	str	r3, [r2, #4]
 80019d0:	e057      	b.n	8001a82 <HAL_DMA_IRQHandler+0x3be>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a4d      	ldr	r2, [pc, #308]	@ (8001b0c <HAL_DMA_IRQHandler+0x448>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d04f      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x3b8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001b10 <HAL_DMA_IRQHandler+0x44c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d048      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x3b4>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001b14 <HAL_DMA_IRQHandler+0x450>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d040      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x3ae>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a48      	ldr	r2, [pc, #288]	@ (8001b18 <HAL_DMA_IRQHandler+0x454>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d038      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x3a8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a47      	ldr	r2, [pc, #284]	@ (8001b1c <HAL_DMA_IRQHandler+0x458>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d030      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x3a2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a45      	ldr	r2, [pc, #276]	@ (8001b20 <HAL_DMA_IRQHandler+0x45c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d028      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x39c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	@ (8001b08 <HAL_DMA_IRQHandler+0x444>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d020      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x396>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a41      	ldr	r2, [pc, #260]	@ (8001b24 <HAL_DMA_IRQHandler+0x460>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x392>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a40      	ldr	r2, [pc, #256]	@ (8001b28 <HAL_DMA_IRQHandler+0x464>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d012      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x38e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3e      	ldr	r2, [pc, #248]	@ (8001b2c <HAL_DMA_IRQHandler+0x468>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00a      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x388>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b30 <HAL_DMA_IRQHandler+0x46c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d102      	bne.n	8001a46 <HAL_DMA_IRQHandler+0x382>
 8001a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a44:	e01b      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a4a:	e018      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a50:	e015      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a52:	2320      	movs	r3, #32
 8001a54:	e013      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e011      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5e:	e00e      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a64:	e00b      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a6a:	e008      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a70:	e005      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a76:	e002      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e000      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3ba>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b38 <HAL_DMA_IRQHandler+0x474>)
 8001a80:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d034      	beq.n	8001afc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a9a:	e02f      	b.n	8001afc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d028      	beq.n	8001afe <HAL_DMA_IRQHandler+0x43a>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d023      	beq.n	8001afe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 020e 	bic.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
    }
  }
  return;
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
}
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40020080 	.word	0x40020080
 8001b0c:	40020008 	.word	0x40020008
 8001b10:	4002001c 	.word	0x4002001c
 8001b14:	40020030 	.word	0x40020030
 8001b18:	40020044 	.word	0x40020044
 8001b1c:	40020058 	.word	0x40020058
 8001b20:	4002006c 	.word	0x4002006c
 8001b24:	40020408 	.word	0x40020408
 8001b28:	4002041c 	.word	0x4002041c
 8001b2c:	40020430 	.word	0x40020430
 8001b30:	40020444 	.word	0x40020444
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020000 	.word	0x40020000

08001b3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d108      	bne.n	8001b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b7a:	e007      	b.n	8001b8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b08b      	sub	sp, #44	@ 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e179      	b.n	8001ea0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bac:	2201      	movs	r2, #1
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 8168 	bne.w	8001e9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a96      	ldr	r2, [pc, #600]	@ (8001e28 <HAL_GPIO_Init+0x290>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d05e      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bd4:	4a94      	ldr	r2, [pc, #592]	@ (8001e28 <HAL_GPIO_Init+0x290>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d875      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bda:	4a94      	ldr	r2, [pc, #592]	@ (8001e2c <HAL_GPIO_Init+0x294>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d058      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001be0:	4a92      	ldr	r2, [pc, #584]	@ (8001e2c <HAL_GPIO_Init+0x294>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d86f      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001be6:	4a92      	ldr	r2, [pc, #584]	@ (8001e30 <HAL_GPIO_Init+0x298>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d052      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bec:	4a90      	ldr	r2, [pc, #576]	@ (8001e30 <HAL_GPIO_Init+0x298>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d869      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a90      	ldr	r2, [pc, #576]	@ (8001e34 <HAL_GPIO_Init+0x29c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d04c      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8001e34 <HAL_GPIO_Init+0x29c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d863      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a8e      	ldr	r2, [pc, #568]	@ (8001e38 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d046      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001c04:	4a8c      	ldr	r2, [pc, #560]	@ (8001e38 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d85d      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d82a      	bhi.n	8001c64 <HAL_GPIO_Init+0xcc>
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d859      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001c12:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <HAL_GPIO_Init+0x80>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c93 	.word	0x08001c93
 8001c1c:	08001c6d 	.word	0x08001c6d
 8001c20:	08001c7f 	.word	0x08001c7f
 8001c24:	08001cc1 	.word	0x08001cc1
 8001c28:	08001cc7 	.word	0x08001cc7
 8001c2c:	08001cc7 	.word	0x08001cc7
 8001c30:	08001cc7 	.word	0x08001cc7
 8001c34:	08001cc7 	.word	0x08001cc7
 8001c38:	08001cc7 	.word	0x08001cc7
 8001c3c:	08001cc7 	.word	0x08001cc7
 8001c40:	08001cc7 	.word	0x08001cc7
 8001c44:	08001cc7 	.word	0x08001cc7
 8001c48:	08001cc7 	.word	0x08001cc7
 8001c4c:	08001cc7 	.word	0x08001cc7
 8001c50:	08001cc7 	.word	0x08001cc7
 8001c54:	08001cc7 	.word	0x08001cc7
 8001c58:	08001cc7 	.word	0x08001cc7
 8001c5c:	08001c75 	.word	0x08001c75
 8001c60:	08001c89 	.word	0x08001c89
 8001c64:	4a75      	ldr	r2, [pc, #468]	@ (8001e3c <HAL_GPIO_Init+0x2a4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c6a:	e02c      	b.n	8001cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e029      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e024      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	3308      	adds	r3, #8
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e01f      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e01a      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	623b      	str	r3, [r7, #32]
          break;
 8001c9e:	e013      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	611a      	str	r2, [r3, #16]
          break;
 8001cb2:	e009      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	615a      	str	r2, [r3, #20]
          break;
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          break;
 8001cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2bff      	cmp	r3, #255	@ 0xff
 8001ccc:	d801      	bhi.n	8001cd2 <HAL_GPIO_Init+0x13a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	e001      	b.n	8001cd6 <HAL_GPIO_Init+0x13e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	@ 0xff
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_GPIO_Init+0x14c>
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x152>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	3b08      	subs	r3, #8
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80c1 	beq.w	8001e9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d18:	4b49      	ldr	r3, [pc, #292]	@ (8001e40 <HAL_GPIO_Init+0x2a8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a48      	ldr	r2, [pc, #288]	@ (8001e40 <HAL_GPIO_Init+0x2a8>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_GPIO_Init+0x2a8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d30:	4a44      	ldr	r2, [pc, #272]	@ (8001e44 <HAL_GPIO_Init+0x2ac>)
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3c      	ldr	r2, [pc, #240]	@ (8001e48 <HAL_GPIO_Init+0x2b0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d01f      	beq.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e4c <HAL_GPIO_Init+0x2b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d019      	beq.n	8001d98 <HAL_GPIO_Init+0x200>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3a      	ldr	r2, [pc, #232]	@ (8001e50 <HAL_GPIO_Init+0x2b8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_GPIO_Init+0x1fc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a39      	ldr	r2, [pc, #228]	@ (8001e54 <HAL_GPIO_Init+0x2bc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00d      	beq.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a38      	ldr	r2, [pc, #224]	@ (8001e58 <HAL_GPIO_Init+0x2c0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0x1f4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a37      	ldr	r2, [pc, #220]	@ (8001e5c <HAL_GPIO_Init+0x2c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_GPIO_Init+0x1f0>
 8001d84:	2305      	movs	r3, #5
 8001d86:	e00a      	b.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d88:	2306      	movs	r3, #6
 8001d8a:	e008      	b.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d90:	2303      	movs	r3, #3
 8001d92:	e004      	b.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dae:	4925      	ldr	r1, [pc, #148]	@ (8001e44 <HAL_GPIO_Init+0x2ac>)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc8:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4924      	ldr	r1, [pc, #144]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4920      	ldr	r1, [pc, #128]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	491a      	ldr	r1, [pc, #104]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dfe:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4916      	ldr	r1, [pc, #88]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d025      	beq.n	8001e64 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4910      	ldr	r1, [pc, #64]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e025      	b.n	8001e72 <HAL_GPIO_Init+0x2da>
 8001e26:	bf00      	nop
 8001e28:	10320000 	.word	0x10320000
 8001e2c:	10310000 	.word	0x10310000
 8001e30:	10220000 	.word	0x10220000
 8001e34:	10210000 	.word	0x10210000
 8001e38:	10120000 	.word	0x10120000
 8001e3c:	10110000 	.word	0x10110000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	40011000 	.word	0x40011000
 8001e54:	40011400 	.word	0x40011400
 8001e58:	40011800 	.word	0x40011800
 8001e5c:	40011c00 	.word	0x40011c00
 8001e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4913      	ldr	r1, [pc, #76]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae7e 	bne.w	8001bac <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	@ 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	041a      	lsls	r2, r3, #16
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43d9      	mvns	r1, r3
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	611a      	str	r2, [r3, #16]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0e8      	b.n	80020d6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe ffa1 	bl	8000e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 fd0b 	bl	800394c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f40:	f001 fcf7 	bl	8003932 <USB_CoreInit>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0bf      	b.n	80020d6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fd0f 	bl	8003980 <USB_SetCurrentMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b0      	b.n	80020d6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e03e      	b.n	8001ff8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3311      	adds	r3, #17
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3310      	adds	r3, #16
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3313      	adds	r3, #19
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3320      	adds	r3, #32
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3324      	adds	r3, #36	@ 0x24
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3bb      	bcc.n	8001f7a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e044      	b.n	8002092 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	3301      	adds	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	429a      	cmp	r2, r3
 800209a:	d3b5      	bcc.n	8002008 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a6:	f001 fc77 	bl	8003998 <USB_DevInit>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e00c      	b.n	80020d6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fc7f 	bl	80039d2 <USB_DevDisconnect>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e272      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002100:	4b92      	ldr	r3, [pc, #584]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b04      	cmp	r3, #4
 800210a:	d00c      	beq.n	8002126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210c:	4b8f      	ldr	r3, [pc, #572]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d112      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
 8002118:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b89      	ldr	r3, [pc, #548]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d06c      	beq.n	800220c <HAL_RCC_OscConfig+0x12c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d168      	bne.n	800220c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e24c      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x76>
 8002148:	4b80      	ldr	r3, [pc, #512]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7f      	ldr	r2, [pc, #508]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e02e      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b7b      	ldr	r3, [pc, #492]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7a      	ldr	r2, [pc, #488]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b78      	ldr	r3, [pc, #480]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a77      	ldr	r2, [pc, #476]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0xbc>
 8002182:	4b72      	ldr	r3, [pc, #456]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a71      	ldr	r2, [pc, #452]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b6f      	ldr	r3, [pc, #444]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6e      	ldr	r2, [pc, #440]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 800219c:	4b6b      	ldr	r3, [pc, #428]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b68      	ldr	r3, [pc, #416]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a67      	ldr	r2, [pc, #412]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe ff68 	bl	8001090 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7fe ff64 	bl	8001090 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e200      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe4>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff54 	bl	8001090 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe ff50 	bl	8001090 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	@ 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1ec      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x10c>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221a:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002226:	4b49      	ldr	r3, [pc, #292]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
 8002232:	4b46      	ldr	r3, [pc, #280]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b43      	ldr	r3, [pc, #268]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1c0      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4939      	ldr	r1, [pc, #228]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_RCC_OscConfig+0x270>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe ff09 	bl	8001090 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7fe ff05 	bl	8001090 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1a1      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4927      	ldr	r1, [pc, #156]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <HAL_RCC_OscConfig+0x270>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fee8 	bl	8001090 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fee4 	bl	8001090 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e180      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03a      	beq.n	8002364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7fe fec8 	bl	8001090 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7fe fec4 	bl	8001090 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e160      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f000 fa9c 	bl	8002860 <RCC_Delay>
 8002328:	e01c      	b.n	8002364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_RCC_OscConfig+0x274>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe feae 	bl	8001090 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002336:	e00f      	b.n	8002358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe feaa 	bl	8001090 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d908      	bls.n	8002358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e146      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	42420000 	.word	0x42420000
 8002354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	4b92      	ldr	r3, [pc, #584]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e9      	bne.n	8002338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a6 	beq.w	80024be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b8b      	ldr	r3, [pc, #556]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a87      	ldr	r2, [pc, #540]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]
 800238e:	4b85      	ldr	r3, [pc, #532]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b82      	ldr	r3, [pc, #520]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b7f      	ldr	r3, [pc, #508]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7e      	ldr	r2, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fe6b 	bl	8001090 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe fe67 	bl	8001090 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	@ 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e103      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b75      	ldr	r3, [pc, #468]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x312>
 80023e4:	4b6f      	ldr	r3, [pc, #444]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a6e      	ldr	r2, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x334>
 80023fa:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a69      	ldr	r2, [pc, #420]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b67      	ldr	r3, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a66      	ldr	r2, [pc, #408]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x356>
 800241c:	4b61      	ldr	r3, [pc, #388]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a60      	ldr	r2, [pc, #384]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b5e      	ldr	r3, [pc, #376]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a5d      	ldr	r2, [pc, #372]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002436:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a5a      	ldr	r2, [pc, #360]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b58      	ldr	r3, [pc, #352]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a57      	ldr	r2, [pc, #348]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe fe1b 	bl	8001090 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fe17 	bl	8001090 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0b1      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b4b      	ldr	r3, [pc, #300]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x37e>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7fe fe05 	bl	8001090 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fe01 	bl	8001090 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e09b      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b40      	ldr	r3, [pc, #256]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b3c      	ldr	r3, [pc, #240]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d061      	beq.n	8002598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d146      	bne.n	800256a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b33      	ldr	r3, [pc, #204]	@ (80025ac <HAL_RCC_OscConfig+0x4cc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe fdd5 	bl	8001090 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fdd1 	bl	8001090 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e06d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4921      	ldr	r1, [pc, #132]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a19      	ldr	r1, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	430b      	orrs	r3, r1
 8002536:	491b      	ldr	r1, [pc, #108]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_RCC_OscConfig+0x4cc>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fda5 	bl	8001090 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fda1 	bl	8001090 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e03d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x46a>
 8002568:	e035      	b.n	80025d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_RCC_OscConfig+0x4cc>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fd8e 	bl	8001090 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fd8a 	bl	8001090 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e026      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x498>
 8002596:	e01e      	b.n	80025d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e019      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_RCC_OscConfig+0x500>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d0      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d910      	bls.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b67      	ldr	r3, [pc, #412]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4965      	ldr	r1, [pc, #404]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800264a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d040      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e073      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4936      	ldr	r1, [pc, #216]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fcdc 	bl	8001090 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe fcd8 	bl	8001090 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e053      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4922      	ldr	r1, [pc, #136]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275e:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	@ (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <HAL_RCC_ClockConfig+0x1cc>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc3a 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08003a58 	.word	0x08003a58
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <HAL_RCC_GetSysClockFreq+0x94>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x30>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x36>
 80027e6:	e027      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	e027      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a17      	ldr	r2, [pc, #92]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_RCC_GetSysClockFreq+0x94>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0c5b      	lsrs	r3, r3, #17
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	4a11      	ldr	r2, [pc, #68]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e004      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <HAL_RCC_GetSysClockFreq+0xa4>)
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	613b      	str	r3, [r7, #16]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	693b      	ldr	r3, [r7, #16]
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	08003a68 	.word	0x08003a68
 8002858:	08003a78 	.word	0x08003a78
 800285c:	003d0900 	.word	0x003d0900

08002860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <RCC_Delay+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <RCC_Delay+0x38>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800287c:	bf00      	nop
  }
  while (Delay --);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <RCC_Delay+0x1c>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d07d      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028bc:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	4a4b      	ldr	r2, [pc, #300]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	61d3      	str	r3, [r2, #28]
 80028d4:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b46      	ldr	r3, [pc, #280]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f0:	4b43      	ldr	r3, [pc, #268]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a42      	ldr	r2, [pc, #264]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fbc8 	bl	8001090 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fbc4 	bl	8001090 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e06d      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002922:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d02e      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d027      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002940:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002948:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002950:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002956:	4a29      	ldr	r2, [pc, #164]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d014      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fb93 	bl	8001090 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe fb8f 	bl	8001090 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e036      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ee      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002990:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4917      	ldr	r1, [pc, #92]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c0:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	490b      	ldr	r1, [pc, #44]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4904      	ldr	r1, [pc, #16]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42420440 	.word	0x42420440

08002a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd ffc6 	bl	80009c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fc60 	bl	800330c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e022      	b.n	8002b1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d109      	bne.n	8002aee <HAL_TIM_PWM_Start_DMA+0x46>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e015      	b.n	8002b1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start_DMA+0x60>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e008      	b.n	8002b1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e167      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start_DMA+0x94>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e022      	b.n	8002b82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d109      	bne.n	8002b56 <HAL_TIM_PWM_Start_DMA+0xae>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e015      	b.n	8002b82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d109      	bne.n	8002b70 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e008      	b.n	8002b82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_TIM_PWM_Start_DMA+0xea>
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e12d      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba4:	e016      	b.n	8002bd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb4:	e00e      	b.n	8002bd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bc4:	e006      	b.n	8002bd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bce:	e001      	b.n	8002bd4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e10e      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
  }

  switch (Channel)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	f200 80ae 	bhi.w	8002d38 <HAL_TIM_PWM_Start_DMA+0x290>
 8002bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002be4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002c19 	.word	0x08002c19
 8002be8:	08002d39 	.word	0x08002d39
 8002bec:	08002d39 	.word	0x08002d39
 8002bf0:	08002d39 	.word	0x08002d39
 8002bf4:	08002c61 	.word	0x08002c61
 8002bf8:	08002d39 	.word	0x08002d39
 8002bfc:	08002d39 	.word	0x08002d39
 8002c00:	08002d39 	.word	0x08002d39
 8002c04:	08002ca9 	.word	0x08002ca9
 8002c08:	08002d39 	.word	0x08002d39
 8002c0c:	08002d39 	.word	0x08002d39
 8002c10:	08002d39 	.word	0x08002d39
 8002c14:	08002cf1 	.word	0x08002cf1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	4a77      	ldr	r2, [pc, #476]	@ (8002dfc <HAL_TIM_PWM_Start_DMA+0x354>)
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	4a76      	ldr	r2, [pc, #472]	@ (8002e00 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	4a75      	ldr	r2, [pc, #468]	@ (8002e04 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3334      	adds	r3, #52	@ 0x34
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	f7fe fbd8 	bl	80013f4 <HAL_DMA_Start_IT>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0d1      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5c:	60da      	str	r2, [r3, #12]
      break;
 8002c5e:	e06e      	b.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c64:	4a65      	ldr	r2, [pc, #404]	@ (8002dfc <HAL_TIM_PWM_Start_DMA+0x354>)
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	4a64      	ldr	r2, [pc, #400]	@ (8002e00 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	4a63      	ldr	r2, [pc, #396]	@ (8002e04 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3338      	adds	r3, #56	@ 0x38
 8002c84:	461a      	mov	r2, r3
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	f7fe fbb4 	bl	80013f4 <HAL_DMA_Start_IT>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0ad      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ca4:	60da      	str	r2, [r3, #12]
      break;
 8002ca6:	e04a      	b.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	4a53      	ldr	r2, [pc, #332]	@ (8002dfc <HAL_TIM_PWM_Start_DMA+0x354>)
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	4a52      	ldr	r2, [pc, #328]	@ (8002e00 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	4a51      	ldr	r2, [pc, #324]	@ (8002e04 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	333c      	adds	r3, #60	@ 0x3c
 8002ccc:	461a      	mov	r2, r3
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	f7fe fb90 	bl	80013f4 <HAL_DMA_Start_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e089      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cec:	60da      	str	r2, [r3, #12]
      break;
 8002cee:	e026      	b.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	4a41      	ldr	r2, [pc, #260]	@ (8002dfc <HAL_TIM_PWM_Start_DMA+0x354>)
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	4a40      	ldr	r2, [pc, #256]	@ (8002e00 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	4a3f      	ldr	r2, [pc, #252]	@ (8002e04 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3340      	adds	r3, #64	@ 0x40
 8002d14:	461a      	mov	r2, r3
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	f7fe fb6c 	bl	80013f4 <HAL_DMA_Start_IT>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e065      	b.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d34:	60da      	str	r2, [r3, #12]
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d155      	bne.n	8002df0 <HAL_TIM_PWM_Start_DMA+0x348>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fd0f 	bl	8003770 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2c      	ldr	r2, [pc, #176]	@ (8002e08 <HAL_TIM_PWM_Start_DMA+0x360>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2a      	ldr	r2, [pc, #168]	@ (8002e0c <HAL_TIM_PWM_Start_DMA+0x364>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a20      	ldr	r2, [pc, #128]	@ (8002e08 <HAL_TIM_PWM_Start_DMA+0x360>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d018      	beq.n	8002dbc <HAL_TIM_PWM_Start_DMA+0x314>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e0c <HAL_TIM_PWM_Start_DMA+0x364>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_TIM_PWM_Start_DMA+0x314>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9c:	d00e      	beq.n	8002dbc <HAL_TIM_PWM_Start_DMA+0x314>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e10 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_TIM_PWM_Start_DMA+0x314>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a19      	ldr	r2, [pc, #100]	@ (8002e14 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_TIM_PWM_Start_DMA+0x314>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x338>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d010      	beq.n	8002df0 <HAL_TIM_PWM_Start_DMA+0x348>
      {
        __HAL_TIM_ENABLE(htim);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dde:	e007      	b.n	8002df0 <HAL_TIM_PWM_Start_DMA+0x348>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	080031fb 	.word	0x080031fb
 8002e00:	080032a3 	.word	0x080032a3
 8002e04:	08003169 	.word	0x08003169
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00

08002e1c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d855      	bhi.n	8002edc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002e30:	a201      	add	r2, pc, #4	@ (adr r2, 8002e38 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e6d 	.word	0x08002e6d
 8002e3c:	08002edd 	.word	0x08002edd
 8002e40:	08002edd 	.word	0x08002edd
 8002e44:	08002edd 	.word	0x08002edd
 8002e48:	08002e89 	.word	0x08002e89
 8002e4c:	08002edd 	.word	0x08002edd
 8002e50:	08002edd 	.word	0x08002edd
 8002e54:	08002edd 	.word	0x08002edd
 8002e58:	08002ea5 	.word	0x08002ea5
 8002e5c:	08002edd 	.word	0x08002edd
 8002e60:	08002edd 	.word	0x08002edd
 8002e64:	08002edd 	.word	0x08002edd
 8002e68:	08002ec1 	.word	0x08002ec1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fb17 	bl	80014b4 <HAL_DMA_Abort_IT>
      break;
 8002e86:	e02c      	b.n	8002ee2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fb09 	bl	80014b4 <HAL_DMA_Abort_IT>
      break;
 8002ea2:	e01e      	b.n	8002ee2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fafb 	bl	80014b4 <HAL_DMA_Abort_IT>
      break;
 8002ebe:	e010      	b.n	8002ee2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ece:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe faed 	bl	80014b4 <HAL_DMA_Abort_IT>
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d161      	bne.n	8002fac <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fc3d 	bl	8003770 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_TIM_PWM_Stop_DMA+0xee>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_PWM_Stop_DMA+0xf2>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d017      	beq.n	8002f44 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10f      	bne.n	8002f74 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_TIM_PWM_Stop_DMA+0x168>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f82:	e013      	b.n	8002fac <HAL_TIM_PWM_Stop_DMA+0x190>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d104      	bne.n	8002f94 <HAL_TIM_PWM_Stop_DMA+0x178>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f92:	e00b      	b.n	8002fac <HAL_TIM_PWM_Stop_DMA+0x190>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d104      	bne.n	8002fa4 <HAL_TIM_PWM_Stop_DMA+0x188>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa2:	e003      	b.n	8002fac <HAL_TIM_PWM_Stop_DMA+0x190>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40013400 	.word	0x40013400

08002fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0ae      	b.n	800313c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	f200 809f 	bhi.w	800312c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	0800312d 	.word	0x0800312d
 8002ffc:	0800312d 	.word	0x0800312d
 8003000:	0800312d 	.word	0x0800312d
 8003004:	08003069 	.word	0x08003069
 8003008:	0800312d 	.word	0x0800312d
 800300c:	0800312d 	.word	0x0800312d
 8003010:	0800312d 	.word	0x0800312d
 8003014:	080030ab 	.word	0x080030ab
 8003018:	0800312d 	.word	0x0800312d
 800301c:	0800312d 	.word	0x0800312d
 8003020:	0800312d 	.word	0x0800312d
 8003024:	080030eb 	.word	0x080030eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f9f2 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6999      	ldr	r1, [r3, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	619a      	str	r2, [r3, #24]
      break;
 8003066:	e064      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa42 	bl	80034f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6999      	ldr	r1, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
      break;
 80030a8:	e043      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fa95 	bl	80035e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0208 	orr.w	r2, r2, #8
 80030c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0204 	bic.w	r2, r2, #4
 80030d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69d9      	ldr	r1, [r3, #28]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	61da      	str	r2, [r3, #28]
      break;
 80030e8:	e023      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fae9 	bl	80036c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69d9      	ldr	r1, [r3, #28]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	021a      	lsls	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	61da      	str	r2, [r3, #28]
      break;
 800312a:	e002      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	75fb      	strb	r3, [r7, #23]
      break;
 8003130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800318e:	e02a      	b.n	80031e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d107      	bne.n	80031aa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a8:	e01d      	b.n	80031e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2204      	movs	r2, #4
 80031b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c2:	e010      	b.n	80031e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d107      	bne.n	80031de <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2208      	movs	r2, #8
 80031d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031dc:	e003      	b.n	80031e6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ffb5 	bl	8003156 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	771a      	strb	r2, [r3, #28]
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d10b      	bne.n	800322a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d136      	bne.n	800328e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003228:	e031      	b.n	800328e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d10b      	bne.n	800324c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2202      	movs	r2, #2
 8003238:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d125      	bne.n	800328e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800324a:	e020      	b.n	800328e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d10b      	bne.n	800326e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2204      	movs	r2, #4
 800325a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d114      	bne.n	800328e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	e00f      	b.n	800328e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d10a      	bne.n	800328e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2208      	movs	r2, #8
 800327c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7fd f874 	bl	800037c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	771a      	strb	r2, [r3, #28]
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d103      	bne.n	80032c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	771a      	strb	r2, [r3, #28]
 80032c0:	e019      	b.n	80032f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d103      	bne.n	80032d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2202      	movs	r2, #2
 80032d0:	771a      	strb	r2, [r3, #28]
 80032d2:	e010      	b.n	80032f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d103      	bne.n	80032e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2204      	movs	r2, #4
 80032e2:	771a      	strb	r2, [r3, #28]
 80032e4:	e007      	b.n	80032f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d102      	bne.n	80032f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2208      	movs	r2, #8
 80032f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff ff24 	bl	8003144 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a39      	ldr	r2, [pc, #228]	@ (8003404 <TIM_Base_SetConfig+0xf8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d013      	beq.n	800334c <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a38      	ldr	r2, [pc, #224]	@ (8003408 <TIM_Base_SetConfig+0xfc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00f      	beq.n	800334c <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d00b      	beq.n	800334c <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a35      	ldr	r2, [pc, #212]	@ (800340c <TIM_Base_SetConfig+0x100>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a34      	ldr	r2, [pc, #208]	@ (8003410 <TIM_Base_SetConfig+0x104>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d003      	beq.n	800334c <TIM_Base_SetConfig+0x40>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a33      	ldr	r2, [pc, #204]	@ (8003414 <TIM_Base_SetConfig+0x108>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d108      	bne.n	800335e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a28      	ldr	r2, [pc, #160]	@ (8003404 <TIM_Base_SetConfig+0xf8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <TIM_Base_SetConfig+0x82>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a27      	ldr	r2, [pc, #156]	@ (8003408 <TIM_Base_SetConfig+0xfc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00f      	beq.n	800338e <TIM_Base_SetConfig+0x82>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x82>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a24      	ldr	r2, [pc, #144]	@ (800340c <TIM_Base_SetConfig+0x100>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <TIM_Base_SetConfig+0x104>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a22      	ldr	r2, [pc, #136]	@ (8003414 <TIM_Base_SetConfig+0x108>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003404 <TIM_Base_SetConfig+0xf8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0xc8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003408 <TIM_Base_SetConfig+0xfc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d103      	bne.n	80033dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 0201 	bic.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]
  }
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0201 	bic.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <TIM_OC1_SetConfig+0xd8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_OC1_SetConfig+0x64>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <TIM_OC1_SetConfig+0xdc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10c      	bne.n	8003496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0308 	bic.w	r3, r3, #8
 8003482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 0304 	bic.w	r3, r3, #4
 8003494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <TIM_OC1_SetConfig+0xd8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC1_SetConfig+0x8e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <TIM_OC1_SetConfig+0xdc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	621a      	str	r2, [r3, #32]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40013400 	.word	0x40013400

080034f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f023 0210 	bic.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <TIM_OC2_SetConfig+0xe0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC2_SetConfig+0x68>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a20      	ldr	r2, [pc, #128]	@ (80035dc <TIM_OC2_SetConfig+0xe4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10d      	bne.n	800357c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800357a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <TIM_OC2_SetConfig+0xe0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_OC2_SetConfig+0x94>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <TIM_OC2_SetConfig+0xe4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d113      	bne.n	80035b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40013400 	.word	0x40013400

080035e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a21      	ldr	r2, [pc, #132]	@ (80036c0 <TIM_OC3_SetConfig+0xe0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_OC3_SetConfig+0x66>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a20      	ldr	r2, [pc, #128]	@ (80036c4 <TIM_OC3_SetConfig+0xe4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10d      	bne.n	8003662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800364c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a16      	ldr	r2, [pc, #88]	@ (80036c0 <TIM_OC3_SetConfig+0xe0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_OC3_SetConfig+0x92>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a15      	ldr	r2, [pc, #84]	@ (80036c4 <TIM_OC3_SetConfig+0xe4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d113      	bne.n	800369a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	621a      	str	r2, [r3, #32]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40013400 	.word	0x40013400

080036c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	031b      	lsls	r3, r3, #12
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <TIM_OC4_SetConfig+0xa0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_OC4_SetConfig+0x68>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a10      	ldr	r2, [pc, #64]	@ (800376c <TIM_OC4_SetConfig+0xa4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d109      	bne.n	8003744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40013400 	.word	0x40013400

08003770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2201      	movs	r2, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e050      	b.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a19      	ldr	r2, [pc, #100]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003826:	d00e      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a12      	ldr	r2, [pc, #72]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10c      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800384c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4313      	orrs	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00

08003890 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e03d      	b.n	8003928 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	4638      	mov	r0, r7
 800393c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003954:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003958:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	b29b      	uxth	r3, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	b29b      	uxth	r3, r3
 800396a:	4013      	ands	r3, r2
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	4638      	mov	r0, r7
 80039a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <memset>:
 80039e6:	4603      	mov	r3, r0
 80039e8:	4402      	add	r2, r0
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d100      	bne.n	80039f0 <memset+0xa>
 80039ee:	4770      	bx	lr
 80039f0:	f803 1b01 	strb.w	r1, [r3], #1
 80039f4:	e7f9      	b.n	80039ea <memset+0x4>
	...

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	2600      	movs	r6, #0
 80039fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003a30 <__libc_init_array+0x38>)
 80039fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003a34 <__libc_init_array+0x3c>)
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	f000 f81a 	bl	8003a40 <_init>
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	4d0a      	ldr	r5, [pc, #40]	@ (8003a38 <__libc_init_array+0x40>)
 8003a10:	4c0a      	ldr	r4, [pc, #40]	@ (8003a3c <__libc_init_array+0x44>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08003a7c 	.word	0x08003a7c
 8003a34:	08003a7c 	.word	0x08003a7c
 8003a38:	08003a7c 	.word	0x08003a7c
 8003a3c:	08003a80 	.word	0x08003a80

08003a40 <_init>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

08003a4c <_fini>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr
