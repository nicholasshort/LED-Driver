
LED-Driver-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a450  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800a634  0800a634  0000b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6d8  0800a6d8  0000c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a6d8  0800a6d8  0000c1cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a6d8  0800a6d8  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6d8  0800a6d8  0000b6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6dc  0800a6dc  0000b6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a6e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a4  200001cc  0800a8ac  0000c1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002670  0800a8ac  0000c670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b67  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363b  00000000  00000000  0001ed5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00022398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce9  00000000  00000000  000234a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6fc  00000000  00000000  00024191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d28  00000000  00000000  0004088d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9fb  00000000  00000000  000555b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a64  00000000  00000000  000f0ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f5a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a61c 	.word	0x0800a61c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	0800a61c 	.word	0x0800a61c

08000224 <SK6812_Init>:
		uint32_t channel,
		uint8_t* dma_buf,
		uint16_t dma_buf_len,
		SK6812_DATA_RGB* led_data,
		uint16_t num_leds
) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]

	stripHandle->timer        = timer;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
	stripHandle->channel      = channel;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
	stripHandle->dma_buf      = dma_buf;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	stripHandle->dma_buf_len  = dma_buf_len;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	8b3a      	ldrh	r2, [r7, #24]
 8000248:	819a      	strh	r2, [r3, #12]
	stripHandle->led_data     = led_data;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	69fa      	ldr	r2, [r7, #28]
 800024e:	611a      	str	r2, [r3, #16]
	stripHandle->num_leds     = num_leds;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	8c3a      	ldrh	r2, [r7, #32]
 8000254:	829a      	strh	r2, [r3, #20]
	stripHandle->dma_done_flag     = 1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	759a      	strb	r2, [r3, #22]

	memset(stripHandle->dma_buf, 0, stripHandle->dma_buf_len);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	6898      	ldr	r0, [r3, #8]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	899b      	ldrh	r3, [r3, #12]
 8000264:	461a      	mov	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f009 fd4a 	bl	8009d00 <memset>

	return HAL_TIM_PWM_Init(timer);
 800026c:	68b8      	ldr	r0, [r7, #8]
 800026e:	f004 f8ab 	bl	80043c8 <HAL_TIM_PWM_Init>
 8000272:	4603      	mov	r3, r0

}
 8000274:	4618      	mov	r0, r3
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <SK6812_SetColour>:


void SK6812_SetColour(SK6812_HandleTypeDef* stripHandle, uint16_t index, uint8_t red, uint8_t green, uint8_t blue) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	4608      	mov	r0, r1
 8000286:	4611      	mov	r1, r2
 8000288:	461a      	mov	r2, r3
 800028a:	4603      	mov	r3, r0
 800028c:	807b      	strh	r3, [r7, #2]
 800028e:	460b      	mov	r3, r1
 8000290:	707b      	strb	r3, [r7, #1]
 8000292:	4613      	mov	r3, r2
 8000294:	703b      	strb	r3, [r7, #0]

	if (index >= stripHandle->num_leds) return;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	8a9b      	ldrh	r3, [r3, #20]
 800029a:	887a      	ldrh	r2, [r7, #2]
 800029c:	429a      	cmp	r2, r3
 800029e:	d215      	bcs.n	80002cc <SK6812_SetColour+0x50>
	stripHandle->led_data[index].colour.red = red;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691a      	ldr	r2, [r3, #16]
 80002a4:	887b      	ldrh	r3, [r7, #2]
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	787a      	ldrb	r2, [r7, #1]
 80002ac:	705a      	strb	r2, [r3, #1]
	stripHandle->led_data[index].colour.green = green;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	691a      	ldr	r2, [r3, #16]
 80002b2:	887b      	ldrh	r3, [r7, #2]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	4413      	add	r3, r2
 80002b8:	783a      	ldrb	r2, [r7, #0]
 80002ba:	701a      	strb	r2, [r3, #0]
	stripHandle->led_data[index].colour.blue = blue;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691a      	ldr	r2, [r3, #16]
 80002c0:	887b      	ldrh	r3, [r7, #2]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	7c3a      	ldrb	r2, [r7, #16]
 80002c8:	709a      	strb	r2, [r3, #2]
 80002ca:	e000      	b.n	80002ce <SK6812_SetColour+0x52>
	if (index >= stripHandle->num_leds) return;
 80002cc:	bf00      	nop

}
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr

080002d6 <SK6812_Update>:


HAL_StatusTypeDef SK6812_Update(SK6812_HandleTypeDef* stripHandle) {
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b084      	sub	sp, #16
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]

    if (!stripHandle->dma_done_flag) return HAL_BUSY;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7d9b      	ldrb	r3, [r3, #22]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d101      	bne.n	80002ec <SK6812_Update+0x16>
 80002e8:	2302      	movs	r3, #2
 80002ea:	e04e      	b.n	800038a <SK6812_Update+0xb4>

    uint16_t buf_idx = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	81fb      	strh	r3, [r7, #14]
    for (uint16_t led = 0; led < stripHandle->num_leds; led++) {
 80002f0:	2300      	movs	r3, #0
 80002f2:	81bb      	strh	r3, [r7, #12]
 80002f4:	e031      	b.n	800035a <SK6812_Update+0x84>
        for (uint8_t bit = 0; bit < SK6812_BITS_PER_LED; bit++) {
 80002f6:	2300      	movs	r3, #0
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	e028      	b.n	800034e <SK6812_Update+0x78>
            uint8_t bit_pos = (7 - (bit % 8)) + ((bit / 8) * 8);
 80002fc:	7afb      	ldrb	r3, [r7, #11]
 80002fe:	43db      	mvns	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	b2da      	uxtb	r2, r3
 8000308:	7afb      	ldrb	r3, [r7, #11]
 800030a:	08db      	lsrs	r3, r3, #3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	4413      	add	r3, r2
 8000314:	72bb      	strb	r3, [r7, #10]
            uint8_t val = ((stripHandle->led_data[led].data >> bit_pos) & 0x01) ? SK6812_T1H_VAL : SK6812_T0H_VAL;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691a      	ldr	r2, [r3, #16]
 800031a:	89bb      	ldrh	r3, [r7, #12]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	7abb      	ldrb	r3, [r7, #10]
 8000324:	fa22 f303 	lsr.w	r3, r2, r3
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SK6812_Update+0x5e>
 8000330:	232b      	movs	r3, #43	@ 0x2b
 8000332:	e000      	b.n	8000336 <SK6812_Update+0x60>
 8000334:	2316      	movs	r3, #22
 8000336:	727b      	strb	r3, [r7, #9]
            stripHandle->dma_buf[buf_idx++] = val;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	89fb      	ldrh	r3, [r7, #14]
 800033e:	1c59      	adds	r1, r3, #1
 8000340:	81f9      	strh	r1, [r7, #14]
 8000342:	4413      	add	r3, r2
 8000344:	7a7a      	ldrb	r2, [r7, #9]
 8000346:	701a      	strb	r2, [r3, #0]
        for (uint8_t bit = 0; bit < SK6812_BITS_PER_LED; bit++) {
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	3301      	adds	r3, #1
 800034c:	72fb      	strb	r3, [r7, #11]
 800034e:	7afb      	ldrb	r3, [r7, #11]
 8000350:	2b17      	cmp	r3, #23
 8000352:	d9d3      	bls.n	80002fc <SK6812_Update+0x26>
    for (uint16_t led = 0; led < stripHandle->num_leds; led++) {
 8000354:	89bb      	ldrh	r3, [r7, #12]
 8000356:	3301      	adds	r3, #1
 8000358:	81bb      	strh	r3, [r7, #12]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	8a9b      	ldrh	r3, [r3, #20]
 800035e:	89ba      	ldrh	r2, [r7, #12]
 8000360:	429a      	cmp	r2, r3
 8000362:	d3c8      	bcc.n	80002f6 <SK6812_Update+0x20>
        }
    }

    if (HAL_TIM_PWM_Start_DMA(stripHandle->timer, stripHandle->channel, (uint32_t*)stripHandle->dma_buf, stripHandle->dma_buf_len) == HAL_OK) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6859      	ldr	r1, [r3, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	899b      	ldrh	r3, [r3, #12]
 8000374:	f004 f878 	bl	8004468 <HAL_TIM_PWM_Start_DMA>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d104      	bne.n	8000388 <SK6812_Update+0xb2>
        stripHandle->dma_done_flag = 0;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2200      	movs	r2, #0
 8000382:	759a      	strb	r2, [r3, #22]
        return HAL_OK;
 8000384:	2300      	movs	r3, #0
 8000386:	e000      	b.n	800038a <SK6812_Update+0xb4>
    }
    return HAL_ERROR;
 8000388:	2301      	movs	r3, #1

}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <SK6812_DMACompleteCallback>:

void SK6812_DMACompleteCallback(SK6812_HandleTypeDef* stripHandle) {
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(stripHandle->timer, stripHandle->channel);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	4619      	mov	r1, r3
 80003a4:	4610      	mov	r0, r2
 80003a6:	f004 fa19 	bl	80047dc <HAL_TIM_PWM_Stop_DMA>
    stripHandle->dma_done_flag = 1;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2201      	movs	r2, #1
 80003ae:	759a      	strb	r2, [r3, #22]

}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

	if (htim == strip1.timer) {
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d102      	bne.n	80003d0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		SK6812_DMACompleteCallback(&strip1);
 80003ca:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80003cc:	f7ff ffe1 	bl	8000392 <SK6812_DMACompleteCallback>
	}

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200005e8 	.word	0x200005e8

080003dc <USB_RxCallback>:

void USB_RxCallback(uint8_t* Buf, uint32_t* Len) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]

	memcpy(usbRxBuf, Buf, *Len);
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	4807      	ldr	r0, [pc, #28]	@ (800040c <USB_RxCallback+0x30>)
 80003f0:	f009 fcba 	bl	8009d68 <memcpy>
	usbRxBufLen = *Len;
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <USB_RxCallback+0x34>)
 80003fc:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 80003fe:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <USB_RxCallback+0x38>)
 8000400:	2201      	movs	r2, #1
 8000402:	701a      	strb	r2, [r3, #0]

}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000564 	.word	0x20000564
 8000410:	200005e4 	.word	0x200005e4
 8000414:	200005e6 	.word	0x200005e6

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 fe6f 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f88f 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 faad 	bl	8000984 <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 fa51 	bl	80008d0 <MX_DMA_Init>
  MX_TIM5_Init();
 800042e:	f000 f953 	bl	80006d8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000432:	f000 f9cb 	bl	80007cc <MX_TIM8_Init>
  MX_TIM3_Init();
 8000436:	f000 f8e1 	bl	80005fc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800043a:	f008 ff83 	bl	8009344 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SK6812_Init(&strip1, &htim5, TIM_CHANNEL_1, dma_buf1, SK6812_DMA_BUF_LEN(SK6812_NUM_LEDS), led_data1, SK6812_NUM_LEDS);
 800043e:	2378      	movs	r3, #120	@ 0x78
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	4b36      	ldr	r3, [pc, #216]	@ (800051c <main+0x104>)
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	f44f 6338 	mov.w	r3, #2944	@ 0xb80
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	4b34      	ldr	r3, [pc, #208]	@ (8000520 <main+0x108>)
 800044e:	2200      	movs	r2, #0
 8000450:	4934      	ldr	r1, [pc, #208]	@ (8000524 <main+0x10c>)
 8000452:	4835      	ldr	r0, [pc, #212]	@ (8000528 <main+0x110>)
 8000454:	f7ff fee6 	bl	8000224 <SK6812_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t led = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	71fb      	strb	r3, [r7, #7]
  uint8_t direction = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 8000460:	2300      	movs	r3, #0
 8000462:	717b      	strb	r3, [r7, #5]
 8000464:	e019      	b.n	800049a <main+0x82>
			if (i == led)
 8000466:	797a      	ldrb	r2, [r7, #5]
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	429a      	cmp	r2, r3
 800046c:	d109      	bne.n	8000482 <main+0x6a>
				SK6812_SetColour(&strip1, i, 235, 52, 232);
 800046e:	797b      	ldrb	r3, [r7, #5]
 8000470:	b299      	uxth	r1, r3
 8000472:	23e8      	movs	r3, #232	@ 0xe8
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2334      	movs	r3, #52	@ 0x34
 8000478:	22eb      	movs	r2, #235	@ 0xeb
 800047a:	482b      	ldr	r0, [pc, #172]	@ (8000528 <main+0x110>)
 800047c:	f7ff fefe 	bl	800027c <SK6812_SetColour>
 8000480:	e008      	b.n	8000494 <main+0x7c>
			else
				SK6812_SetColour(&strip1, i, 0, 0, 0);
 8000482:	797b      	ldrb	r3, [r7, #5]
 8000484:	b299      	uxth	r1, r3
 8000486:	2300      	movs	r3, #0
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	2200      	movs	r2, #0
 800048e:	4826      	ldr	r0, [pc, #152]	@ (8000528 <main+0x110>)
 8000490:	f7ff fef4 	bl	800027c <SK6812_SetColour>
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 8000494:	797b      	ldrb	r3, [r7, #5]
 8000496:	3301      	adds	r3, #1
 8000498:	717b      	strb	r3, [r7, #5]
 800049a:	797b      	ldrb	r3, [r7, #5]
 800049c:	2b77      	cmp	r3, #119	@ 0x77
 800049e:	d9e2      	bls.n	8000466 <main+0x4e>
		}
		if (direction == 0)
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d103      	bne.n	80004ae <main+0x96>
			led++;
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	3301      	adds	r3, #1
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	e002      	b.n	80004b4 <main+0x9c>
		else
			led--;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	71fb      	strb	r3, [r7, #7]
		if (led >= SK6812_NUM_LEDS) {
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	2b77      	cmp	r3, #119	@ 0x77
 80004b8:	d904      	bls.n	80004c4 <main+0xac>
			led = SK6812_NUM_LEDS;
 80004ba:	2378      	movs	r3, #120	@ 0x78
 80004bc:	71fb      	strb	r3, [r7, #7]
			direction = 1;
 80004be:	2301      	movs	r3, #1
 80004c0:	71bb      	strb	r3, [r7, #6]
 80004c2:	e006      	b.n	80004d2 <main+0xba>
		}
		else if (led <= 0) {
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d103      	bne.n	80004d2 <main+0xba>
			led = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71fb      	strb	r3, [r7, #7]
			direction = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71bb      	strb	r3, [r7, #6]
		}
		SK6812_Update(&strip1);
 80004d2:	4815      	ldr	r0, [pc, #84]	@ (8000528 <main+0x110>)
 80004d4:	f7ff feff 	bl	80002d6 <SK6812_Update>

		if (usbRxFlag && usbRxBufLen) {
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <main+0x114>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d019      	beq.n	8000514 <main+0xfc>
 80004e0:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <main+0x118>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d015      	beq.n	8000514 <main+0xfc>

			usbTxBufLen = snprintf((char*)usbTxBuf, USB_BUFLEN, "%s\n", usbRxBuf);
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <main+0x11c>)
 80004ea:	4a13      	ldr	r2, [pc, #76]	@ (8000538 <main+0x120>)
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	4813      	ldr	r0, [pc, #76]	@ (800053c <main+0x124>)
 80004f0:	f009 fbd0 	bl	8009c94 <sniprintf>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <main+0x128>)
 80004fa:	801a      	strh	r2, [r3, #0]

			CDC_Transmit_FS(usbTxBuf, usbTxBufLen);
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <main+0x128>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	480e      	ldr	r0, [pc, #56]	@ (800053c <main+0x124>)
 8000504:	f008 ffe0 	bl	80094c8 <CDC_Transmit_FS>

			usbRxFlag = 0;
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <main+0x114>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
			usbRxBufLen = 0;
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <main+0x118>)
 8000510:	2200      	movs	r2, #0
 8000512:	801a      	strh	r2, [r3, #0]

		}

		HAL_Delay(10);
 8000514:	200a      	movs	r0, #10
 8000516:	f000 fe55 	bl	80011c4 <HAL_Delay>
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 800051a:	e7a1      	b.n	8000460 <main+0x48>
 800051c:	20000600 	.word	0x20000600
 8000520:	200007e0 	.word	0x200007e0
 8000524:	20000230 	.word	0x20000230
 8000528:	200005e8 	.word	0x200005e8
 800052c:	200005e6 	.word	0x200005e6
 8000530:	200005e4 	.word	0x200005e4
 8000534:	20000564 	.word	0x20000564
 8000538:	0800a634 	.word	0x0800a634
 800053c:	200004e0 	.word	0x200004e0
 8000540:	20000560 	.word	0x20000560

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	@ 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800054e:	2228      	movs	r2, #40	@ 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f009 fbd4 	bl	8009d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
 8000576:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000580:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000592:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000594:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fa7e 	bl	8003aa0 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005aa:	f000 fa25 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fcea 	bl	8003fa4 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d6:	f000 fa0f 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005da:	2310      	movs	r3, #16
 80005dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fe39 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005f0:	f000 fa02 	bl	80009f8 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3758      	adds	r7, #88	@ 0x58
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000620:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <MX_TIM3_Init+0xd8>)
 8000622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000624:	4b2a      	ldr	r3, [pc, #168]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000632:	2259      	movs	r2, #89	@ 0x59
 8000634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000642:	4823      	ldr	r0, [pc, #140]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000644:	f003 fec0 	bl	80043c8 <HAL_TIM_PWM_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800064e:	f000 f9d3 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4619      	mov	r1, r3
 8000660:	481b      	ldr	r0, [pc, #108]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000662:	f004 fe9d 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800066c:	f000 f9c4 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000670:	2360      	movs	r3, #96	@ 0x60
 8000672:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 8000688:	f004 fa6a 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000692:	f000 f9b1 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2208      	movs	r2, #8
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 800069e:	f004 fa5f 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006a8:	f000 f9a6 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	220c      	movs	r2, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 80006b4:	f004 fa54 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80006be:	f000 f99b 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <MX_TIM3_Init+0xd4>)
 80006c4:	f000 fb98 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200001e8 	.word	0x200001e8
 80006d4:	40000400 	.word	0x40000400

080006d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80006fa:	4b32      	ldr	r3, [pc, #200]	@ (80007c4 <MX_TIM5_Init+0xec>)
 80006fc:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <MX_TIM5_Init+0xf0>)
 80006fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8000700:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <MX_TIM5_Init+0xec>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b2f      	ldr	r3, [pc, #188]	@ (80007c4 <MX_TIM5_Init+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90-1;
 800070c:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <MX_TIM5_Init+0xec>)
 800070e:	2259      	movs	r2, #89	@ 0x59
 8000710:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <MX_TIM5_Init+0xec>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b2a      	ldr	r3, [pc, #168]	@ (80007c4 <MX_TIM5_Init+0xec>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800071e:	4829      	ldr	r0, [pc, #164]	@ (80007c4 <MX_TIM5_Init+0xec>)
 8000720:	f003 fe52 	bl	80043c8 <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800072a:	f000 f965 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4619      	mov	r1, r3
 800073c:	4821      	ldr	r0, [pc, #132]	@ (80007c4 <MX_TIM5_Init+0xec>)
 800073e:	f004 fe2f 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000748:	f000 f956 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074c:	2360      	movs	r3, #96	@ 0x60
 800074e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	4818      	ldr	r0, [pc, #96]	@ (80007c4 <MX_TIM5_Init+0xec>)
 8000764:	f004 f9fc 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800076e:	f000 f943 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2204      	movs	r2, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <MX_TIM5_Init+0xec>)
 800077a:	f004 f9f1 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000784:	f000 f938 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2208      	movs	r2, #8
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <MX_TIM5_Init+0xec>)
 8000790:	f004 f9e6 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 800079a:	f000 f92d 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	220c      	movs	r2, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <MX_TIM5_Init+0xec>)
 80007a6:	f004 f9db 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 80007b0:	f000 f922 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007b4:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <MX_TIM5_Init+0xec>)
 80007b6:	f000 fb1f 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	@ 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000230 	.word	0x20000230
 80007c8:	40000c00 	.word	0x40000c00

080007cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b092      	sub	sp, #72	@ 0x48
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 fa82 	bl	8009d00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 80007fe:	4a33      	ldr	r2, [pc, #204]	@ (80008cc <MX_TIM8_Init+0x100>)
 8000800:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000802:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 90-1;
 800080e:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 8000810:	2259      	movs	r2, #89	@ 0x59
 8000812:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000826:	4828      	ldr	r0, [pc, #160]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 8000828:	f003 fdce 	bl	80043c8 <HAL_TIM_PWM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 f8e1 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800083e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000842:	4619      	mov	r1, r3
 8000844:	4820      	ldr	r0, [pc, #128]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 8000846:	f004 fdab 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8000850:	f000 f8d2 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	@ 0x60
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 800087a:	f004 f971 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8000884:	f000 f8b8 	bl	80009f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 80008ac:	f004 fde4 	bl	8005478 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80008b6:	f000 f89f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80008ba:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <MX_TIM8_Init+0xfc>)
 80008bc:	f000 fa9c 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 80008c0:	bf00      	nop
 80008c2:	3748      	adds	r7, #72	@ 0x48
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000278 	.word	0x20000278
 80008cc:	40013400 	.word	0x40013400

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <MX_DMA_Init+0xb0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a29      	ldr	r2, [pc, #164]	@ (8000980 <MX_DMA_Init+0xb0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_DMA_Init+0xb0>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_DMA_Init+0xb0>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a23      	ldr	r2, [pc, #140]	@ (8000980 <MX_DMA_Init+0xb0>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_DMA_Init+0xb0>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	200c      	movs	r0, #12
 800090c:	f000 fd55 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000910:	200c      	movs	r0, #12
 8000912:	f000 fd6e 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	200d      	movs	r0, #13
 800091c:	f000 fd4d 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000920:	200d      	movs	r0, #13
 8000922:	f000 fd66 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2010      	movs	r0, #16
 800092c:	f000 fd45 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000930:	2010      	movs	r0, #16
 8000932:	f000 fd5e 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2038      	movs	r0, #56	@ 0x38
 800093c:	f000 fd3d 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000940:	2038      	movs	r0, #56	@ 0x38
 8000942:	f000 fd56 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2039      	movs	r0, #57	@ 0x39
 800094c:	f000 fd35 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000950:	2039      	movs	r0, #57	@ 0x39
 8000952:	f000 fd4e 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	203a      	movs	r0, #58	@ 0x3a
 800095c:	f000 fd2d 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000960:	203a      	movs	r0, #58	@ 0x3a
 8000962:	f000 fd46 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	203b      	movs	r0, #59	@ 0x3b
 800096c:	f000 fd25 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8000970:	203b      	movs	r0, #59	@ 0x3b
 8000972:	f000 fd3e 	bl	80013f2 <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_GPIO_Init+0x70>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a19      	ldr	r2, [pc, #100]	@ (80009f4 <MX_GPIO_Init+0x70>)
 8000990:	f043 0320 	orr.w	r3, r3, #32
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_GPIO_Init+0x70>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6193      	str	r3, [r2, #24]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <MX_GPIO_Init+0x70>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_MspInit+0x60>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <HAL_MspInit+0x60>)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000

08000a68 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a4d      	ldr	r2, [pc, #308]	@ (8000bac <HAL_TIM_PWM_MspInit+0x144>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	f040 80a8 	bne.w	8000bcc <HAL_TIM_PWM_MspInit+0x164>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb0 <HAL_TIM_PWM_MspInit+0x148>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a4b      	ldr	r2, [pc, #300]	@ (8000bb0 <HAL_TIM_PWM_MspInit+0x148>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	61d3      	str	r3, [r2, #28]
 8000a88:	4b49      	ldr	r3, [pc, #292]	@ (8000bb0 <HAL_TIM_PWM_MspInit+0x148>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000a94:	4b47      	ldr	r3, [pc, #284]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a96:	4a48      	ldr	r2, [pc, #288]	@ (8000bb8 <HAL_TIM_PWM_MspInit+0x150>)
 8000a98:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9a:	4b46      	ldr	r3, [pc, #280]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa0:	4b44      	ldr	r3, [pc, #272]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000aa6:	4b43      	ldr	r3, [pc, #268]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000aa8:	2280      	movs	r2, #128	@ 0x80
 8000aaa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aac:	4b41      	ldr	r3, [pc, #260]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000abc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000ac8:	483a      	ldr	r0, [pc, #232]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000aca:	f000 fcad 	bl	8001428 <HAL_DMA_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8000ad4:	f7ff ff90 	bl	80009f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a36      	ldr	r2, [pc, #216]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ade:	4a35      	ldr	r2, [pc, #212]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a33      	ldr	r2, [pc, #204]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000ae8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aea:	4a32      	ldr	r2, [pc, #200]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x14c>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8000af0:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000af2:	4a33      	ldr	r2, [pc, #204]	@ (8000bc0 <HAL_TIM_PWM_MspInit+0x158>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000af8:	2210      	movs	r2, #16
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8000b16:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8000b22:	4826      	ldr	r0, [pc, #152]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b24:	f000 fc80 	bl	8001428 <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_TIM_PWM_MspInit+0xca>
    {
      Error_Handler();
 8000b2e:	f7ff ff63 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b38:	4a20      	ldr	r2, [pc, #128]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x154>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <HAL_TIM_PWM_MspInit+0x160>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b52:	2280      	movs	r2, #128	@ 0x80
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b5c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b74:	f000 fc58 	bl	8001428 <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_TIM_PWM_MspInit+0x11a>
    {
      Error_Handler();
 8000b7e:	f7ff ff3b 	bl	80009f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b88:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b92:	621a      	str	r2, [r3, #32]
 8000b94:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x15c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	201d      	movs	r0, #29
 8000ba0:	f000 fc0b 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ba4:	201d      	movs	r0, #29
 8000ba6:	f000 fc24 	bl	80013f2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000baa:	e107      	b.n	8000dbc <HAL_TIM_PWM_MspInit+0x354>
 8000bac:	40000400 	.word	0x40000400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	200002c0 	.word	0x200002c0
 8000bb8:	4002006c 	.word	0x4002006c
 8000bbc:	20000304 	.word	0x20000304
 8000bc0:	4002001c 	.word	0x4002001c
 8000bc4:	20000348 	.word	0x20000348
 8000bc8:	40020030 	.word	0x40020030
  else if(htim_pwm->Instance==TIM5)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a7c      	ldr	r2, [pc, #496]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x35c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 80b9 	bne.w	8000d4a <HAL_TIM_PWM_MspInit+0x2e2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x360>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	4a7a      	ldr	r2, [pc, #488]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x360>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	61d3      	str	r3, [r2, #28]
 8000be4:	4b78      	ldr	r3, [pc, #480]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x360>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch2.Instance = DMA2_Channel4;
 8000bf0:	4b76      	ldr	r3, [pc, #472]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000bf2:	4a77      	ldr	r2, [pc, #476]	@ (8000dd0 <HAL_TIM_PWM_MspInit+0x368>)
 8000bf4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf6:	4b75      	ldr	r3, [pc, #468]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfc:	4b73      	ldr	r3, [pc, #460]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000c02:	4b72      	ldr	r3, [pc, #456]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c08:	4b70      	ldr	r3, [pc, #448]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c10:	4b6e      	ldr	r3, [pc, #440]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000c18:	4b6c      	ldr	r3, [pc, #432]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000c24:	4869      	ldr	r0, [pc, #420]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c26:	f000 fbff 	bl	8001428 <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_TIM_PWM_MspInit+0x1cc>
      Error_Handler();
 8000c30:	f7ff fee2 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a65      	ldr	r2, [pc, #404]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c3a:	4a64      	ldr	r2, [pc, #400]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x364>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch3_up.Instance = DMA2_Channel2;
 8000c40:	4b64      	ldr	r3, [pc, #400]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c42:	4a65      	ldr	r2, [pc, #404]	@ (8000dd8 <HAL_TIM_PWM_MspInit+0x370>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b63      	ldr	r3, [pc, #396]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b61      	ldr	r3, [pc, #388]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b60      	ldr	r3, [pc, #384]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c54:	2280      	movs	r2, #128	@ 0x80
 8000c56:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c58:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c60:	4b5c      	ldr	r3, [pc, #368]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8000c68:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b59      	ldr	r3, [pc, #356]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8000c74:	4857      	ldr	r0, [pc, #348]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c76:	f000 fbd7 	bl	8001428 <HAL_DMA_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_TIM_PWM_MspInit+0x21c>
      Error_Handler();
 8000c80:	f7ff feba 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a53      	ldr	r2, [pc, #332]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c8a:	4a52      	ldr	r2, [pc, #328]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a50      	ldr	r2, [pc, #320]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c94:	621a      	str	r2, [r3, #32]
 8000c96:	4a4f      	ldr	r2, [pc, #316]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x36c>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch4_trig.Instance = DMA2_Channel1;
 8000c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000c9e:	4a50      	ldr	r2, [pc, #320]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x378>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000cae:	4b4b      	ldr	r3, [pc, #300]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cb0:	2280      	movs	r2, #128	@ 0x80
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb4:	4b49      	ldr	r3, [pc, #292]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cba:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cbc:	4b47      	ldr	r3, [pc, #284]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8000cc4:	4b45      	ldr	r3, [pc, #276]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000cca:	4b44      	ldr	r3, [pc, #272]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8000cd0:	4842      	ldr	r0, [pc, #264]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cd2:	f000 fba9 	bl	8001428 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_TIM_PWM_MspInit+0x278>
      Error_Handler();
 8000cdc:	f7ff fe8c 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000ce4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cf2:	4a3a      	ldr	r2, [pc, #232]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x374>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch1.Instance = DMA2_Channel5;
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000de8 <HAL_TIM_PWM_MspInit+0x380>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfe:	4b39      	ldr	r3, [pc, #228]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0a:	4b36      	ldr	r3, [pc, #216]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d10:	4b34      	ldr	r3, [pc, #208]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d18:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000d20:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d26:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000d2c:	482d      	ldr	r0, [pc, #180]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d2e:	f000 fb7b 	bl	8001428 <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_TIM_PWM_MspInit+0x2d4>
      Error_Handler();
 8000d38:	f7ff fe5e 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a29      	ldr	r2, [pc, #164]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d42:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x37c>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000d48:	e038      	b.n	8000dbc <HAL_TIM_PWM_MspInit+0x354>
  else if(htim_pwm->Instance==TIM8)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a27      	ldr	r2, [pc, #156]	@ (8000dec <HAL_TIM_PWM_MspInit+0x384>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d133      	bne.n	8000dbc <HAL_TIM_PWM_MspInit+0x354>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x360>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x360>)
 8000d5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x360>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d6e:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d80:	2280      	movs	r2, #128	@ 0x80
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000da2:	f000 fb41 	bl	8001428 <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_TIM_PWM_MspInit+0x348>
      Error_Handler();
 8000dac:	f7ff fe24 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0f      	ldr	r2, [pc, #60]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000db6:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <HAL_TIM_PWM_MspInit+0x388>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40000c00 	.word	0x40000c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	2000038c 	.word	0x2000038c
 8000dd0:	40020444 	.word	0x40020444
 8000dd4:	200003d0 	.word	0x200003d0
 8000dd8:	4002041c 	.word	0x4002041c
 8000ddc:	20000414 	.word	0x20000414
 8000de0:	40020408 	.word	0x40020408
 8000de4:	20000458 	.word	0x20000458
 8000de8:	40020458 	.word	0x40020458
 8000dec:	40013400 	.word	0x40013400
 8000df0:	2000049c 	.word	0x2000049c
 8000df4:	40020430 	.word	0x40020430

08000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a39      	ldr	r2, [pc, #228]	@ (8000ef8 <HAL_TIM_MspPostInit+0x100>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d130      	bne.n	8000e7a <HAL_TIM_MspPostInit+0x82>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a37      	ldr	r2, [pc, #220]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a31      	ldr	r2, [pc, #196]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e48:	2340      	movs	r3, #64	@ 0x40
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4829      	ldr	r0, [pc, #164]	@ (8000f00 <HAL_TIM_MspPostInit+0x108>)
 8000e5c:	f000 ff2c 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <HAL_TIM_MspPostInit+0x10c>)
 8000e74:	f000 ff20 	bl	8001cb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e78:	e03a      	b.n	8000ef0 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM5)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	@ (8000f08 <HAL_TIM_MspPostInit+0x110>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d118      	bne.n	8000eb6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <HAL_TIM_MspPostInit+0x108>)
 8000eb0:	f000 ff02 	bl	8001cb8 <HAL_GPIO_Init>
}
 8000eb4:	e01c      	b.n	8000ef0 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_TIM_MspPostInit+0x114>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d117      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_TIM_MspPostInit+0x104>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed8:	2340      	movs	r3, #64	@ 0x40
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4809      	ldr	r0, [pc, #36]	@ (8000f10 <HAL_TIM_MspPostInit+0x118>)
 8000eec:	f000 fee4 	bl	8001cb8 <HAL_GPIO_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	@ 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40000c00 	.word	0x40000c00
 8000f0c:	40013400 	.word	0x40013400
 8000f10:	40011000 	.word	0x40011000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f912 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <DMA1_Channel2_IRQHandler+0x10>)
 8000f72:	f000 fc37 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000304 	.word	0x20000304

08000f80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <DMA1_Channel3_IRQHandler+0x10>)
 8000f86:	f000 fc2d 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000348 	.word	0x20000348

08000f94 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Channel6_IRQHandler+0x10>)
 8000f9a:	f000 fc23 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200002c0 	.word	0x200002c0

08000fa8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000fae:	f001 f933 	bl	8002218 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20002030 	.word	0x20002030

08000fbc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fc2:	f001 f929 	bl	8002218 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20002030 	.word	0x20002030

08000fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <TIM3_IRQHandler+0x10>)
 8000fd6:	f003 fcd3 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001e8 	.word	0x200001e8

08000fe4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <DMA2_Channel1_IRQHandler+0x10>)
 8000fea:	f000 fbfb 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000414 	.word	0x20000414

08000ff8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DMA2_Channel2_IRQHandler+0x10>)
 8000ffe:	f000 fbf1 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003d0 	.word	0x200003d0

0800100c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <DMA2_Channel3_IRQHandler+0x10>)
 8001012:	f000 fbe7 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000049c 	.word	0x2000049c

08001020 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <DMA2_Channel4_5_IRQHandler+0x14>)
 8001026:	f000 fbdd 	bl	80017e4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <DMA2_Channel4_5_IRQHandler+0x18>)
 800102c:	f000 fbda 	bl	80017e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000038c 	.word	0x2000038c
 8001038:	20000458 	.word	0x20000458

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f008 fe50 	bl	8009d10 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000c000 	.word	0x2000c000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20001360 	.word	0x20001360
 80010a4:	20002670 	.word	0x20002670

080010a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff fff8 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ba:	490c      	ldr	r1, [pc, #48]	@ (80010ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010bc:	4a0c      	ldr	r2, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010d0:	4c09      	ldr	r4, [pc, #36]	@ (80010f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f008 fe1d 	bl	8009d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff f999 	bl	8000418 <main>
  bx lr
 80010e6:	4770      	bx	lr
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80010f0:	0800a6e0 	.word	0x0800a6e0
  ldr r2, =_sbss
 80010f4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80010f8:	20002670 	.word	0x20002670

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_Init+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <HAL_Init+0x28>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f947 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fc72 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f95f 	bl	800140e <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001168:	f000 f927 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_IncTick+0x1c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_IncTick+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a03      	ldr	r2, [pc, #12]	@ (80011ac <HAL_IncTick+0x20>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20001364 	.word	0x20001364

080011b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b02      	ldr	r3, [pc, #8]	@ (80011c0 <HAL_GetTick+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20001364 	.word	0x20001364

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff fff0 	bl	80011b0 <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffe0 	bl	80011b0 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <__NVIC_EnableIRQ+0x34>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001384:	f7ff ff90 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff2d 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff42 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff90 	bl	80012fc <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5f 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff35 	bl	8001270 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e059      	b.n	80014f2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_DMA_Init+0xd4>)
 8001446:	429a      	cmp	r2, r3
 8001448:	d80f      	bhi.n	800146a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <HAL_DMA_Init+0xd8>)
 8001452:	4413      	add	r3, r2
 8001454:	4a2b      	ldr	r2, [pc, #172]	@ (8001504 <HAL_DMA_Init+0xdc>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	009a      	lsls	r2, r3, #2
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <HAL_DMA_Init+0xe0>)
 8001466:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001468:	e00e      	b.n	8001488 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_DMA_Init+0xe4>)
 8001472:	4413      	add	r3, r2
 8001474:	4a23      	ldr	r2, [pc, #140]	@ (8001504 <HAL_DMA_Init+0xdc>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	009a      	lsls	r2, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <HAL_DMA_Init+0xe8>)
 8001486:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2202      	movs	r2, #2
 800148c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800149e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80014a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40020407 	.word	0x40020407
 8001500:	bffdfff8 	.word	0xbffdfff8
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	40020000 	.word	0x40020000
 800150c:	bffdfbf8 	.word	0xbffdfbf8
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_DMA_Start_IT+0x20>
 8001530:	2302      	movs	r3, #2
 8001532:	e04b      	b.n	80015cc <HAL_DMA_Start_IT+0xb8>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d13a      	bne.n	80015be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0201 	bic.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fb75 	bl	8001c5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 020e 	orr.w	r2, r2, #14
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e00f      	b.n	80015ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0204 	bic.w	r2, r2, #4
 800159a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 020a 	orr.w	r2, r2, #10
 80015aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e005      	b.n	80015ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015c6:	2302      	movs	r3, #2
 80015c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d005      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e0d6      	b.n	80017a6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 020e 	bic.w	r2, r2, #14
 8001606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b64      	ldr	r3, [pc, #400]	@ (80017b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001620:	429a      	cmp	r2, r3
 8001622:	d958      	bls.n	80016d6 <HAL_DMA_Abort_IT+0x102>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a62      	ldr	r2, [pc, #392]	@ (80017b4 <HAL_DMA_Abort_IT+0x1e0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d04f      	beq.n	80016ce <HAL_DMA_Abort_IT+0xfa>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a61      	ldr	r2, [pc, #388]	@ (80017b8 <HAL_DMA_Abort_IT+0x1e4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d048      	beq.n	80016ca <HAL_DMA_Abort_IT+0xf6>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a5f      	ldr	r2, [pc, #380]	@ (80017bc <HAL_DMA_Abort_IT+0x1e8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d040      	beq.n	80016c4 <HAL_DMA_Abort_IT+0xf0>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5e      	ldr	r2, [pc, #376]	@ (80017c0 <HAL_DMA_Abort_IT+0x1ec>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d038      	beq.n	80016be <HAL_DMA_Abort_IT+0xea>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a5c      	ldr	r2, [pc, #368]	@ (80017c4 <HAL_DMA_Abort_IT+0x1f0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d030      	beq.n	80016b8 <HAL_DMA_Abort_IT+0xe4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5b      	ldr	r2, [pc, #364]	@ (80017c8 <HAL_DMA_Abort_IT+0x1f4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d028      	beq.n	80016b2 <HAL_DMA_Abort_IT+0xde>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a52      	ldr	r2, [pc, #328]	@ (80017b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d020      	beq.n	80016ac <HAL_DMA_Abort_IT+0xd8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a57      	ldr	r2, [pc, #348]	@ (80017cc <HAL_DMA_Abort_IT+0x1f8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d019      	beq.n	80016a8 <HAL_DMA_Abort_IT+0xd4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a55      	ldr	r2, [pc, #340]	@ (80017d0 <HAL_DMA_Abort_IT+0x1fc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d012      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xd0>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a54      	ldr	r2, [pc, #336]	@ (80017d4 <HAL_DMA_Abort_IT+0x200>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d00a      	beq.n	800169e <HAL_DMA_Abort_IT+0xca>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a52      	ldr	r2, [pc, #328]	@ (80017d8 <HAL_DMA_Abort_IT+0x204>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d102      	bne.n	8001698 <HAL_DMA_Abort_IT+0xc4>
 8001692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001696:	e01b      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 8001698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800169c:	e018      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 800169e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a2:	e015      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016a4:	2310      	movs	r3, #16
 80016a6:	e013      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e011      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016b0:	e00e      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016b6:	e00b      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016bc:	e008      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c2:	e005      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c8:	e002      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016ca:	2310      	movs	r3, #16
 80016cc:	e000      	b.n	80016d0 <HAL_DMA_Abort_IT+0xfc>
 80016ce:	2301      	movs	r3, #1
 80016d0:	4a42      	ldr	r2, [pc, #264]	@ (80017dc <HAL_DMA_Abort_IT+0x208>)
 80016d2:	6053      	str	r3, [r2, #4]
 80016d4:	e057      	b.n	8001786 <HAL_DMA_Abort_IT+0x1b2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a36      	ldr	r2, [pc, #216]	@ (80017b4 <HAL_DMA_Abort_IT+0x1e0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d04f      	beq.n	8001780 <HAL_DMA_Abort_IT+0x1ac>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a34      	ldr	r2, [pc, #208]	@ (80017b8 <HAL_DMA_Abort_IT+0x1e4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d048      	beq.n	800177c <HAL_DMA_Abort_IT+0x1a8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a33      	ldr	r2, [pc, #204]	@ (80017bc <HAL_DMA_Abort_IT+0x1e8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d040      	beq.n	8001776 <HAL_DMA_Abort_IT+0x1a2>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a31      	ldr	r2, [pc, #196]	@ (80017c0 <HAL_DMA_Abort_IT+0x1ec>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d038      	beq.n	8001770 <HAL_DMA_Abort_IT+0x19c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <HAL_DMA_Abort_IT+0x1f0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d030      	beq.n	800176a <HAL_DMA_Abort_IT+0x196>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2e      	ldr	r2, [pc, #184]	@ (80017c8 <HAL_DMA_Abort_IT+0x1f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d028      	beq.n	8001764 <HAL_DMA_Abort_IT+0x190>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a26      	ldr	r2, [pc, #152]	@ (80017b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d020      	beq.n	800175e <HAL_DMA_Abort_IT+0x18a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2a      	ldr	r2, [pc, #168]	@ (80017cc <HAL_DMA_Abort_IT+0x1f8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_DMA_Abort_IT+0x186>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <HAL_DMA_Abort_IT+0x1fc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d012      	beq.n	8001756 <HAL_DMA_Abort_IT+0x182>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a27      	ldr	r2, [pc, #156]	@ (80017d4 <HAL_DMA_Abort_IT+0x200>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00a      	beq.n	8001750 <HAL_DMA_Abort_IT+0x17c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a26      	ldr	r2, [pc, #152]	@ (80017d8 <HAL_DMA_Abort_IT+0x204>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_DMA_Abort_IT+0x176>
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	e01b      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 800174a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800174e:	e018      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	e015      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 8001756:	2310      	movs	r3, #16
 8001758:	e013      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 800175a:	2301      	movs	r3, #1
 800175c:	e011      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 800175e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001762:	e00e      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 8001764:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001768:	e00b      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 800176a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800176e:	e008      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 8001770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001774:	e005      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 8001776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177a:	e002      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 800177c:	2310      	movs	r3, #16
 800177e:	e000      	b.n	8001782 <HAL_DMA_Abort_IT+0x1ae>
 8001780:	2301      	movs	r3, #1
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_DMA_Abort_IT+0x20c>)
 8001784:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
    } 
  }
  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020080 	.word	0x40020080
 80017b4:	40020008 	.word	0x40020008
 80017b8:	4002001c 	.word	0x4002001c
 80017bc:	40020030 	.word	0x40020030
 80017c0:	40020044 	.word	0x40020044
 80017c4:	40020058 	.word	0x40020058
 80017c8:	4002006c 	.word	0x4002006c
 80017cc:	40020408 	.word	0x40020408
 80017d0:	4002041c 	.word	0x4002041c
 80017d4:	40020430 	.word	0x40020430
 80017d8:	40020444 	.word	0x40020444
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	2204      	movs	r2, #4
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80f1 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x20c>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80eb 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b5f      	ldr	r3, [pc, #380]	@ (80019bc <HAL_DMA_IRQHandler+0x1d8>)
 8001840:	429a      	cmp	r2, r3
 8001842:	d958      	bls.n	80018f6 <HAL_DMA_IRQHandler+0x112>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a5d      	ldr	r2, [pc, #372]	@ (80019c0 <HAL_DMA_IRQHandler+0x1dc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d04f      	beq.n	80018ee <HAL_DMA_IRQHandler+0x10a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5c      	ldr	r2, [pc, #368]	@ (80019c4 <HAL_DMA_IRQHandler+0x1e0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d048      	beq.n	80018ea <HAL_DMA_IRQHandler+0x106>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5a      	ldr	r2, [pc, #360]	@ (80019c8 <HAL_DMA_IRQHandler+0x1e4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d040      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x100>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a59      	ldr	r2, [pc, #356]	@ (80019cc <HAL_DMA_IRQHandler+0x1e8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d038      	beq.n	80018de <HAL_DMA_IRQHandler+0xfa>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a57      	ldr	r2, [pc, #348]	@ (80019d0 <HAL_DMA_IRQHandler+0x1ec>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d030      	beq.n	80018d8 <HAL_DMA_IRQHandler+0xf4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a56      	ldr	r2, [pc, #344]	@ (80019d4 <HAL_DMA_IRQHandler+0x1f0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d028      	beq.n	80018d2 <HAL_DMA_IRQHandler+0xee>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <HAL_DMA_IRQHandler+0x1d8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d020      	beq.n	80018cc <HAL_DMA_IRQHandler+0xe8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_DMA_IRQHandler+0x1f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d019      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xe4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a50      	ldr	r2, [pc, #320]	@ (80019dc <HAL_DMA_IRQHandler+0x1f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d012      	beq.n	80018c4 <HAL_DMA_IRQHandler+0xe0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a4f      	ldr	r2, [pc, #316]	@ (80019e0 <HAL_DMA_IRQHandler+0x1fc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00a      	beq.n	80018be <HAL_DMA_IRQHandler+0xda>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a4d      	ldr	r2, [pc, #308]	@ (80019e4 <HAL_DMA_IRQHandler+0x200>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d102      	bne.n	80018b8 <HAL_DMA_IRQHandler+0xd4>
 80018b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018b6:	e01b      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018bc:	e018      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c2:	e015      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018c4:	2340      	movs	r3, #64	@ 0x40
 80018c6:	e013      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e011      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018d0:	e00e      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018d6:	e00b      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018dc:	e008      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018e2:	e005      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e8:	e002      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018ea:	2340      	movs	r3, #64	@ 0x40
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_IRQHandler+0x10c>
 80018ee:	2304      	movs	r3, #4
 80018f0:	4a3d      	ldr	r2, [pc, #244]	@ (80019e8 <HAL_DMA_IRQHandler+0x204>)
 80018f2:	6053      	str	r3, [r2, #4]
 80018f4:	e057      	b.n	80019a6 <HAL_DMA_IRQHandler+0x1c2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a31      	ldr	r2, [pc, #196]	@ (80019c0 <HAL_DMA_IRQHandler+0x1dc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04f      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x1bc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2f      	ldr	r2, [pc, #188]	@ (80019c4 <HAL_DMA_IRQHandler+0x1e0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d048      	beq.n	800199c <HAL_DMA_IRQHandler+0x1b8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2e      	ldr	r2, [pc, #184]	@ (80019c8 <HAL_DMA_IRQHandler+0x1e4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d040      	beq.n	8001996 <HAL_DMA_IRQHandler+0x1b2>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2c      	ldr	r2, [pc, #176]	@ (80019cc <HAL_DMA_IRQHandler+0x1e8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d038      	beq.n	8001990 <HAL_DMA_IRQHandler+0x1ac>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <HAL_DMA_IRQHandler+0x1ec>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d030      	beq.n	800198a <HAL_DMA_IRQHandler+0x1a6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a29      	ldr	r2, [pc, #164]	@ (80019d4 <HAL_DMA_IRQHandler+0x1f0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d028      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1a0>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_DMA_IRQHandler+0x1d8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d020      	beq.n	800197e <HAL_DMA_IRQHandler+0x19a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <HAL_DMA_IRQHandler+0x1f4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_DMA_IRQHandler+0x196>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <HAL_DMA_IRQHandler+0x1f8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d012      	beq.n	8001976 <HAL_DMA_IRQHandler+0x192>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00a      	beq.n	8001970 <HAL_DMA_IRQHandler+0x18c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	@ (80019e4 <HAL_DMA_IRQHandler+0x200>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d102      	bne.n	800196a <HAL_DMA_IRQHandler+0x186>
 8001964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001968:	e01b      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 800196a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800196e:	e018      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 8001970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001974:	e015      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 8001976:	2340      	movs	r3, #64	@ 0x40
 8001978:	e013      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 800197a:	2304      	movs	r3, #4
 800197c:	e011      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 800197e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001982:	e00e      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 8001984:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001988:	e00b      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 800198a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800198e:	e008      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 8001990:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001994:	e005      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 8001996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800199a:	e002      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 800199c:	2340      	movs	r3, #64	@ 0x40
 800199e:	e000      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1be>
 80019a0:	2304      	movs	r3, #4
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <HAL_DMA_IRQHandler+0x208>)
 80019a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8136 	beq.w	8001c1c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	e130      	b.n	8001c1c <HAL_DMA_IRQHandler+0x438>
 80019ba:	bf00      	nop
 80019bc:	40020080 	.word	0x40020080
 80019c0:	40020008 	.word	0x40020008
 80019c4:	4002001c 	.word	0x4002001c
 80019c8:	40020030 	.word	0x40020030
 80019cc:	40020044 	.word	0x40020044
 80019d0:	40020058 	.word	0x40020058
 80019d4:	4002006c 	.word	0x4002006c
 80019d8:	40020408 	.word	0x40020408
 80019dc:	4002041c 	.word	0x4002041c
 80019e0:	40020430 	.word	0x40020430
 80019e4:	40020444 	.word	0x40020444
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	2202      	movs	r2, #2
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80dd 	beq.w	8001bbc <HAL_DMA_IRQHandler+0x3d8>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80d7 	beq.w	8001bbc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 020a 	bic.w	r2, r2, #10
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c28 <HAL_DMA_IRQHandler+0x444>)
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d958      	bls.n	8001af2 <HAL_DMA_IRQHandler+0x30e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a79      	ldr	r2, [pc, #484]	@ (8001c2c <HAL_DMA_IRQHandler+0x448>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d04f      	beq.n	8001aea <HAL_DMA_IRQHandler+0x306>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a78      	ldr	r2, [pc, #480]	@ (8001c30 <HAL_DMA_IRQHandler+0x44c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d048      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x302>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a76      	ldr	r2, [pc, #472]	@ (8001c34 <HAL_DMA_IRQHandler+0x450>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d040      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x2fc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a75      	ldr	r2, [pc, #468]	@ (8001c38 <HAL_DMA_IRQHandler+0x454>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d038      	beq.n	8001ada <HAL_DMA_IRQHandler+0x2f6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a73      	ldr	r2, [pc, #460]	@ (8001c3c <HAL_DMA_IRQHandler+0x458>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d030      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2f0>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a72      	ldr	r2, [pc, #456]	@ (8001c40 <HAL_DMA_IRQHandler+0x45c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d028      	beq.n	8001ace <HAL_DMA_IRQHandler+0x2ea>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a69      	ldr	r2, [pc, #420]	@ (8001c28 <HAL_DMA_IRQHandler+0x444>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d020      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2e4>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c44 <HAL_DMA_IRQHandler+0x460>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d019      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x2e0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6c      	ldr	r2, [pc, #432]	@ (8001c48 <HAL_DMA_IRQHandler+0x464>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d012      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x2dc>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8001c4c <HAL_DMA_IRQHandler+0x468>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00a      	beq.n	8001aba <HAL_DMA_IRQHandler+0x2d6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a69      	ldr	r2, [pc, #420]	@ (8001c50 <HAL_DMA_IRQHandler+0x46c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d102      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x2d0>
 8001aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab2:	e01b      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	e018      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001abe:	e015      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e013      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e011      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001acc:	e00e      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ace:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ad2:	e00b      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ad8:	e008      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ada:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ade:	e005      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae4:	e002      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e000      	b.n	8001aec <HAL_DMA_IRQHandler+0x308>
 8001aea:	2302      	movs	r3, #2
 8001aec:	4a59      	ldr	r2, [pc, #356]	@ (8001c54 <HAL_DMA_IRQHandler+0x470>)
 8001aee:	6053      	str	r3, [r2, #4]
 8001af0:	e057      	b.n	8001ba2 <HAL_DMA_IRQHandler+0x3be>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_DMA_IRQHandler+0x448>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04f      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x3b8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	@ (8001c30 <HAL_DMA_IRQHandler+0x44c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d048      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x3b4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c34 <HAL_DMA_IRQHandler+0x450>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x3ae>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a48      	ldr	r2, [pc, #288]	@ (8001c38 <HAL_DMA_IRQHandler+0x454>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d038      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x3a8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a47      	ldr	r2, [pc, #284]	@ (8001c3c <HAL_DMA_IRQHandler+0x458>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d030      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x3a2>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a45      	ldr	r2, [pc, #276]	@ (8001c40 <HAL_DMA_IRQHandler+0x45c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d028      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x39c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_DMA_IRQHandler+0x444>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d020      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x396>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a41      	ldr	r2, [pc, #260]	@ (8001c44 <HAL_DMA_IRQHandler+0x460>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x392>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a40      	ldr	r2, [pc, #256]	@ (8001c48 <HAL_DMA_IRQHandler+0x464>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d012      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x38e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3e      	ldr	r2, [pc, #248]	@ (8001c4c <HAL_DMA_IRQHandler+0x468>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00a      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x388>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c50 <HAL_DMA_IRQHandler+0x46c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_DMA_IRQHandler+0x382>
 8001b60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b64:	e01b      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6a:	e018      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b70:	e015      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b72:	2320      	movs	r3, #32
 8001b74:	e013      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e011      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b7e:	e00e      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b84:	e00b      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b8a:	e008      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b90:	e005      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b96:	e002      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e000      	b.n	8001b9e <HAL_DMA_IRQHandler+0x3ba>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <HAL_DMA_IRQHandler+0x474>)
 8001ba0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d034      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bba:	e02f      	b.n	8001c1c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d028      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x43a>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d023      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 020e 	bic.w	r2, r2, #14
 8001be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d004      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
    }
  }
  return;
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
}
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40020080 	.word	0x40020080
 8001c2c:	40020008 	.word	0x40020008
 8001c30:	4002001c 	.word	0x4002001c
 8001c34:	40020030 	.word	0x40020030
 8001c38:	40020044 	.word	0x40020044
 8001c3c:	40020058 	.word	0x40020058
 8001c40:	4002006c 	.word	0x4002006c
 8001c44:	40020408 	.word	0x40020408
 8001c48:	4002041c 	.word	0x4002041c
 8001c4c:	40020430 	.word	0x40020430
 8001c50:	40020444 	.word	0x40020444
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020000 	.word	0x40020000

08001c5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d108      	bne.n	8001c9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c9a:	e007      	b.n	8001cac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	@ 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e179      	b.n	8001fc0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8168 	bne.w	8001fba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a96      	ldr	r2, [pc, #600]	@ (8001f48 <HAL_GPIO_Init+0x290>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d05e      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a94      	ldr	r2, [pc, #592]	@ (8001f48 <HAL_GPIO_Init+0x290>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d875      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001cfa:	4a94      	ldr	r2, [pc, #592]	@ (8001f4c <HAL_GPIO_Init+0x294>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d058      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d00:	4a92      	ldr	r2, [pc, #584]	@ (8001f4c <HAL_GPIO_Init+0x294>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d86f      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d06:	4a92      	ldr	r2, [pc, #584]	@ (8001f50 <HAL_GPIO_Init+0x298>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d052      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a90      	ldr	r2, [pc, #576]	@ (8001f50 <HAL_GPIO_Init+0x298>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d869      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d12:	4a90      	ldr	r2, [pc, #576]	@ (8001f54 <HAL_GPIO_Init+0x29c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d04c      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d18:	4a8e      	ldr	r2, [pc, #568]	@ (8001f54 <HAL_GPIO_Init+0x29c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d863      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d1e:	4a8e      	ldr	r2, [pc, #568]	@ (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d046      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a8c      	ldr	r2, [pc, #560]	@ (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d85d      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d82a      	bhi.n	8001d84 <HAL_GPIO_Init+0xcc>
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d859      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d32:	a201      	add	r2, pc, #4	@ (adr r2, 8001d38 <HAL_GPIO_Init+0x80>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001d8d 	.word	0x08001d8d
 8001d40:	08001d9f 	.word	0x08001d9f
 8001d44:	08001de1 	.word	0x08001de1
 8001d48:	08001de7 	.word	0x08001de7
 8001d4c:	08001de7 	.word	0x08001de7
 8001d50:	08001de7 	.word	0x08001de7
 8001d54:	08001de7 	.word	0x08001de7
 8001d58:	08001de7 	.word	0x08001de7
 8001d5c:	08001de7 	.word	0x08001de7
 8001d60:	08001de7 	.word	0x08001de7
 8001d64:	08001de7 	.word	0x08001de7
 8001d68:	08001de7 	.word	0x08001de7
 8001d6c:	08001de7 	.word	0x08001de7
 8001d70:	08001de7 	.word	0x08001de7
 8001d74:	08001de7 	.word	0x08001de7
 8001d78:	08001de7 	.word	0x08001de7
 8001d7c:	08001d95 	.word	0x08001d95
 8001d80:	08001da9 	.word	0x08001da9
 8001d84:	4a75      	ldr	r2, [pc, #468]	@ (8001f5c <HAL_GPIO_Init+0x2a4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d8a:	e02c      	b.n	8001de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e029      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e024      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	3308      	adds	r3, #8
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e01f      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	330c      	adds	r3, #12
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e01a      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	623b      	str	r3, [r7, #32]
          break;
 8001dbe:	e013      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	611a      	str	r2, [r3, #16]
          break;
 8001dd2:	e009      	b.n	8001de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	615a      	str	r2, [r3, #20]
          break;
 8001dde:	e003      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          break;
 8001de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2bff      	cmp	r3, #255	@ 0xff
 8001dec:	d801      	bhi.n	8001df2 <HAL_GPIO_Init+0x13a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_Init+0x13e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2bff      	cmp	r3, #255	@ 0xff
 8001dfc:	d802      	bhi.n	8001e04 <HAL_GPIO_Init+0x14c>
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0x152>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	3b08      	subs	r3, #8
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	210f      	movs	r1, #15
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	6a39      	ldr	r1, [r7, #32]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80c1 	beq.w	8001fba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e38:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a48      	ldr	r2, [pc, #288]	@ (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b46      	ldr	r3, [pc, #280]	@ (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e50:	4a44      	ldr	r2, [pc, #272]	@ (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3c      	ldr	r2, [pc, #240]	@ (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01f      	beq.n	8001ebc <HAL_GPIO_Init+0x204>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f6c <HAL_GPIO_Init+0x2b4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d019      	beq.n	8001eb8 <HAL_GPIO_Init+0x200>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3a      	ldr	r2, [pc, #232]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_GPIO_Init+0x1fc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a39      	ldr	r2, [pc, #228]	@ (8001f74 <HAL_GPIO_Init+0x2bc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00d      	beq.n	8001eb0 <HAL_GPIO_Init+0x1f8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a38      	ldr	r2, [pc, #224]	@ (8001f78 <HAL_GPIO_Init+0x2c0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <HAL_GPIO_Init+0x1f4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a37      	ldr	r2, [pc, #220]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_GPIO_Init+0x1f0>
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	e00a      	b.n	8001ebe <HAL_GPIO_Init+0x206>
 8001ea8:	2306      	movs	r3, #6
 8001eaa:	e008      	b.n	8001ebe <HAL_GPIO_Init+0x206>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e006      	b.n	8001ebe <HAL_GPIO_Init+0x206>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e004      	b.n	8001ebe <HAL_GPIO_Init+0x206>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x206>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_Init+0x206>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ece:	4925      	ldr	r1, [pc, #148]	@ (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4924      	ldr	r1, [pc, #144]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4920      	ldr	r1, [pc, #128]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	491a      	ldr	r1, [pc, #104]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4916      	ldr	r1, [pc, #88]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d025      	beq.n	8001f84 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4910      	ldr	r1, [pc, #64]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e025      	b.n	8001f92 <HAL_GPIO_Init+0x2da>
 8001f46:	bf00      	nop
 8001f48:	10320000 	.word	0x10320000
 8001f4c:	10310000 	.word	0x10310000
 8001f50:	10220000 	.word	0x10220000
 8001f54:	10210000 	.word	0x10210000
 8001f58:	10120000 	.word	0x10120000
 8001f5c:	10110000 	.word	0x10110000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40010c00 	.word	0x40010c00
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40011400 	.word	0x40011400
 8001f78:	40011800 	.word	0x40011800
 8001f7c:	40011c00 	.word	0x40011c00
 8001f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4913      	ldr	r1, [pc, #76]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4909      	ldr	r1, [pc, #36]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae7e 	bne.w	8001ccc <HAL_GPIO_Init+0x14>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	372c      	adds	r7, #44	@ 0x2c
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0e8      	b.n	80021c4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f007 fb92 	bl	8009730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fab0 	bl	8005584 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202e:	f003 fa86 	bl	800553e <USB_CoreInit>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0bf      	b.n	80021c4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fab4 	bl	80055b8 <USB_SetCurrentMode>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0b0      	b.n	80021c4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e03e      	b.n	80020e6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3311      	adds	r3, #17
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3310      	adds	r3, #16
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3313      	adds	r3, #19
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3320      	adds	r3, #32
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	3324      	adds	r3, #36	@ 0x24
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d3bb      	bcc.n	8002068 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e044      	b.n	8002180 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	3301      	adds	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	791b      	ldrb	r3, [r3, #4]
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	429a      	cmp	r2, r3
 8002188:	d3b5      	bcc.n	80020f6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002194:	f003 fa1c 	bl	80055d0 <USB_DevInit>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00c      	b.n	80021c4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f005 fc9c 	bl	8007afa <USB_DevDisconnect>

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_Start+0x16>
 80021de:	2302      	movs	r3, #2
 80021e0:	e016      	b.n	8002210 <HAL_PCD_Start+0x44>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 f9b2 	bl	8005558 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80021f4:	2101      	movs	r1, #1
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f007 fd15 	bl	8009c26 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f005 fc70 	bl	8007ae6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f005 fc72 	bl	8007b0e <USB_ReadInterrupts>
 800222a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fb1a 	bl	8002870 <PCD_EP_ISR_Handler>

    return;
 800223c:	e119      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800225a:	b292      	uxth	r2, r2
 800225c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f007 fae8 	bl	8009836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f905 	bl	8002478 <HAL_PCD_SetAddress>

    return;
 800226e:	e100      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800228c:	b292      	uxth	r2, r2
 800228e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002292:	e0ee      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022b0:	b292      	uxth	r2, r2
 80022b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022b6:	e0dc      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d027      	beq.n	8002312 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0204 	bic.w	r2, r2, #4
 80022d4:	b292      	uxth	r2, r2
 80022d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0208 	bic.w	r2, r2, #8
 80022ec:	b292      	uxth	r2, r2
 80022ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f007 fad8 	bl	80098a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800230a:	b292      	uxth	r2, r2
 800230c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002310:	e0af      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8083 	beq.w	8002424 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	77fb      	strb	r3, [r7, #31]
 8002322:	e010      	b.n	8002346 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	441a      	add	r2, r3
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	b292      	uxth	r2, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	3320      	adds	r3, #32
 800233a:	443b      	add	r3, r7
 800233c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002340:	7ffb      	ldrb	r3, [r7, #31]
 8002342:	3301      	adds	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	7ffb      	ldrb	r3, [r7, #31]
 8002348:	2b07      	cmp	r3, #7
 800234a:	d9eb      	bls.n	8002324 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	b292      	uxth	r2, r2
 8002360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800236c:	b29a      	uxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	b292      	uxth	r2, r2
 8002378:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800237c:	bf00      	nop
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002386:	b29b      	uxth	r3, r3
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f6      	beq.n	800237e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a2:	b292      	uxth	r2, r2
 80023a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	e00f      	b.n	80023ce <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4611      	mov	r1, r2
 80023b6:	7ffa      	ldrb	r2, [r7, #31]
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	440a      	add	r2, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	3320      	adds	r3, #32
 80023c0:	443b      	add	r3, r7
 80023c2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023c6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80023c8:	7ffb      	ldrb	r3, [r7, #31]
 80023ca:	3301      	adds	r3, #1
 80023cc:	77fb      	strb	r3, [r7, #31]
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d9ec      	bls.n	80023ae <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	b292      	uxth	r2, r2
 80023e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023fe:	b292      	uxth	r2, r2
 8002400:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800240c:	b29a      	uxth	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0204 	orr.w	r2, r2, #4
 8002416:	b292      	uxth	r2, r2
 8002418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f007 fa29 	bl	8009874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002422:	e026      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00f      	beq.n	800244e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002440:	b292      	uxth	r2, r2
 8002442:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f007 f9e7 	bl	800981a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800244c:	e011      	b.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002460:	b29a      	uxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800246a:	b292      	uxth	r2, r2
 800246c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002470:	bf00      	nop
  }
}
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_PCD_SetAddress+0x1a>
 800248e:	2302      	movs	r3, #2
 8002490:	e012      	b.n	80024b8 <HAL_PCD_SetAddress+0x40>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f005 fb09 	bl	8007ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	70fb      	strb	r3, [r7, #3]
 80024d2:	460b      	mov	r3, r1
 80024d4:	803b      	strh	r3, [r7, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da0e      	bge.n	8002504 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 0207 	and.w	r2, r3, #7
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3310      	adds	r3, #16
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
 8002502:	e00e      	b.n	8002522 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 0207 	and.w	r2, r3, #7
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800252e:	883a      	ldrh	r2, [r7, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	78ba      	ldrb	r2, [r7, #2]
 8002538:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800253a:	78bb      	ldrb	r3, [r7, #2]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d102      	bne.n	8002546 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_PCD_EP_Open+0x94>
 8002550:	2302      	movs	r3, #2
 8002552:	e00e      	b.n	8002572 <HAL_PCD_EP_Open+0xb2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 f852 	bl	800560c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002570:	7afb      	ldrb	r3, [r7, #11]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800258a:	2b00      	cmp	r3, #0
 800258c:	da0e      	bge.n	80025ac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	f003 0207 	and.w	r2, r3, #7
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3310      	adds	r3, #16
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	705a      	strb	r2, [r3, #1]
 80025aa:	e00e      	b.n	80025ca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	f003 0207 	and.w	r2, r3, #7
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_PCD_EP_Close+0x6a>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e00e      	b.n	8002602 <HAL_PCD_EP_Close+0x88>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68f9      	ldr	r1, [r7, #12]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fbca 	bl	8005d8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 0207 	and.w	r2, r3, #7
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	b2da      	uxtb	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6979      	ldr	r1, [r7, #20]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fd81 	bl	8006164 <USB_EPStartXfer>

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 0207 	and.w	r2, r3, #7
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	460b      	mov	r3, r1
 80026a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	f003 0207 	and.w	r2, r3, #7
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	3310      	adds	r3, #16
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2201      	movs	r2, #1
 80026e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6979      	ldr	r1, [r7, #20]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fd33 	bl	8006164 <USB_EPStartXfer>

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	7912      	ldrb	r2, [r2, #4]
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e04c      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da0e      	bge.n	800274c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 0207 	and.w	r2, r3, #7
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	3310      	adds	r3, #16
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	e00c      	b.n	8002766 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_PCD_EP_SetStall+0x7e>
 8002782:	2302      	movs	r3, #2
 8002784:	e01c      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68f9      	ldr	r1, [r7, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f005 f896 	bl	80078c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d108      	bne.n	80027b6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f005 f9bb 	bl	8007b2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	7912      	ldrb	r2, [r2, #4]
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e040      	b.n	8002868 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0e      	bge.n	800280c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 0207 	and.w	r2, r3, #7
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	3310      	adds	r3, #16
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	705a      	strb	r2, [r3, #1]
 800280a:	e00e      	b.n	800282a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 0207 	and.w	r2, r3, #7
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_PCD_EP_ClrStall+0x82>
 8002846:	2302      	movs	r3, #2
 8002848:	e00e      	b.n	8002868 <HAL_PCD_EP_ClrStall+0xa0>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	4618      	mov	r0, r3
 800285a:	f005 f884 	bl	8007966 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b096      	sub	sp, #88	@ 0x58
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002878:	e3bb      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002882:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002894:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 8175 	bne.w	8002b88 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800289e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d14e      	bne.n	8002948 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80028b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ba:	81fb      	strh	r3, [r7, #14]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3310      	adds	r3, #16
 80028d2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	3302      	adds	r3, #2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	441a      	add	r2, r3
 800290a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800290e:	2100      	movs	r1, #0
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f006 ff68 	bl	80097e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b5b      	ldrb	r3, [r3, #13]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8368 	beq.w	8002ff2 <PCD_EP_ISR_Handler+0x782>
 8002922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8363 	bne.w	8002ff2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7b5b      	ldrb	r3, [r3, #13]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002936:	b2da      	uxtb	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	735a      	strb	r2, [r3, #13]
 8002946:	e354      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800294e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800295a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800295e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002962:	2b00      	cmp	r3, #0
 8002964:	d034      	beq.n	80029d0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	3306      	adds	r3, #6
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800298e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002990:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800299c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f005 f912 	bl	8007bce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029b6:	4013      	ands	r3, r2
 80029b8:	823b      	strh	r3, [r7, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	8a3a      	ldrh	r2, [r7, #16]
 80029c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029c4:	b292      	uxth	r2, r2
 80029c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f006 fedf 	bl	800978c <HAL_PCD_SetupStageCallback>
 80029ce:	e310      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f280 830c 	bge.w	8002ff2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029e6:	4013      	ands	r3, r2
 80029e8:	83fb      	strh	r3, [r7, #30]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	8bfa      	ldrh	r2, [r7, #30]
 80029f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029f4:	b292      	uxth	r2, r2
 80029f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3306      	adds	r3, #6
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a22:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d019      	beq.n	8002a60 <PCD_EP_ISR_Handler+0x1f0>
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d015      	beq.n	8002a60 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3a:	6959      	ldr	r1, [r3, #20]
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a42:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f005 f8c2 	bl	8007bce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	441a      	add	r2, r3
 8002a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a56:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f006 fea8 	bl	80097b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002a6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 82bd 	bne.w	8002ff2 <PCD_EP_ISR_Handler+0x782>
 8002a78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a7c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a84:	f000 82b5 	beq.w	8002ff2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002abe:	d91d      	bls.n	8002afc <PCD_EP_ISR_Handler+0x28c>
 8002ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <PCD_EP_ISR_Handler+0x26a>
 8002ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	e026      	b.n	8002b4a <PCD_EP_ISR_Handler+0x2da>
 8002afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <PCD_EP_ISR_Handler+0x2aa>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e017      	b.n	8002b4a <PCD_EP_ISR_Handler+0x2da>
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <PCD_EP_ISR_Handler+0x2c4>
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b30:	3301      	adds	r3, #1
 8002b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5a:	827b      	strh	r3, [r7, #18]
 8002b5c:	8a7b      	ldrh	r3, [r7, #18]
 8002b5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002b62:	827b      	strh	r3, [r7, #18]
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b6a:	827b      	strh	r3, [r7, #18]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	8a7b      	ldrh	r3, [r7, #18]
 8002b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8013      	strh	r3, [r2, #0]
 8002b86:	e234      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b9c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f280 80fc 	bge.w	8002d9e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002bd4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002bdc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	7b1b      	ldrb	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d125      	bne.n	8002c46 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3306      	adds	r3, #6
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c22:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002c26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8092 	beq.w	8002d54 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c36:	6959      	ldr	r1, [r3, #20]
 8002c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3a:	88da      	ldrh	r2, [r3, #6]
 8002c3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c40:	f004 ffc5 	bl	8007bce <USB_ReadPMA>
 8002c44:	e086      	b.n	8002d54 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c48:	78db      	ldrb	r3, [r3, #3]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d10a      	bne.n	8002c64 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c52:	461a      	mov	r2, r3
 8002c54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9d9 	bl	800300e <HAL_PCD_EP_DB_Receive>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002c62:	e077      	b.n	8002d54 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	441a      	add	r2, r3
 8002c90:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d024      	beq.n	8002d0c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002cee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02e      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	6959      	ldr	r1, [r3, #20]
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	891a      	ldrh	r2, [r3, #8]
 8002d02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d06:	f004 ff62 	bl	8007bce <USB_ReadPMA>
 8002d0a:	e023      	b.n	8002d54 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3306      	adds	r3, #6
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d34:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002d38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d46:	6959      	ldr	r1, [r3, #20]
 8002d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4a:	895a      	ldrh	r2, [r3, #10]
 8002d4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d50:	f004 ff3d 	bl	8007bce <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d5c:	441a      	add	r2, r3
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d6a:	441a      	add	r2, r3
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <PCD_EP_ISR_Handler+0x514>
 8002d78:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d206      	bcs.n	8002d92 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f006 fd10 	bl	80097b0 <HAL_PCD_DataOutStageCallback>
 8002d90:	e005      	b.n	8002d9e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 f9e3 	bl	8006164 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8123 	beq.w	8002ff2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002dac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3310      	adds	r3, #16
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	441a      	add	r2, r3
 8002dec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	78db      	ldrb	r3, [r3, #3]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	f040 80a2 	bne.w	8002f4a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8093 	beq.w	8002f3c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d046      	beq.n	8002eb0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d126      	bne.n	8002e78 <PCD_EP_ISR_Handler+0x608>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	4413      	add	r3, r2
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	011a      	lsls	r2, r3, #4
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	e061      	b.n	8002f3c <PCD_EP_ISR_Handler+0x6cc>
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d15d      	bne.n	8002f3c <PCD_EP_ISR_Handler+0x6cc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e94:	4413      	add	r3, r2
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	011a      	lsls	r2, r3, #4
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	2200      	movs	r2, #0
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	e045      	b.n	8002f3c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d126      	bne.n	8002f0c <PCD_EP_ISR_Handler+0x69c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed2:	4413      	add	r3, r2
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	011a      	lsls	r2, r3, #4
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	4413      	add	r3, r2
 8002ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	e017      	b.n	8002f3c <PCD_EP_ISR_Handler+0x6cc>
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d113      	bne.n	8002f3c <PCD_EP_ISR_Handler+0x6cc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f22:	4413      	add	r3, r2
 8002f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	011a      	lsls	r2, r3, #4
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2e:	4413      	add	r3, r2
 8002f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	2200      	movs	r2, #0
 8002f3a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f006 fc4f 	bl	80097e6 <HAL_PCD_DataInStageCallback>
 8002f48:	e053      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002f4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d146      	bne.n	8002fe4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d907      	bls.n	8002f9e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	e002      	b.n	8002fa4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f006 fc17 	bl	80097e6 <HAL_PCD_DataInStageCallback>
 8002fb8:	e01b      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fd0:	441a      	add	r2, r3
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 f8c1 	bl	8006164 <USB_EPStartXfer>
 8002fe2:	e006      	b.n	8002ff2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002fe4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f91b 	bl	8003228 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f6ff ac3b 	blt.w	800287a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3758      	adds	r7, #88	@ 0x58
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b088      	sub	sp, #32
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	4613      	mov	r3, r2
 800301a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d07e      	beq.n	8003124 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	3302      	adds	r3, #2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	8b7b      	ldrh	r3, [r7, #26]
 8003056:	429a      	cmp	r2, r3
 8003058:	d306      	bcc.n	8003068 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	8b7b      	ldrh	r3, [r7, #26]
 8003060:	1ad2      	subs	r2, r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	619a      	str	r2, [r3, #24]
 8003066:	e002      	b.n	800306e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d123      	bne.n	80030be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800308c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003090:	833b      	strh	r3, [r7, #24]
 8003092:	8b3b      	ldrh	r3, [r7, #24]
 8003094:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003098:	833b      	strh	r3, [r7, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	8b3b      	ldrh	r3, [r7, #24]
 80030aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01f      	beq.n	8003108 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e2:	82fb      	strh	r3, [r7, #22]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	8afb      	ldrh	r3, [r7, #22]
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003100:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003108:	8b7b      	ldrh	r3, [r7, #26]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8087 	beq.w	800321e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6959      	ldr	r1, [r3, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	891a      	ldrh	r2, [r3, #8]
 800311c:	8b7b      	ldrh	r3, [r7, #26]
 800311e:	f004 fd56 	bl	8007bce <USB_ReadPMA>
 8003122:	e07c      	b.n	800321e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800312c:	b29b      	uxth	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	3306      	adds	r3, #6
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	8b7b      	ldrh	r3, [r7, #26]
 8003154:	429a      	cmp	r2, r3
 8003156:	d306      	bcc.n	8003166 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	8b7b      	ldrh	r3, [r7, #26]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	619a      	str	r2, [r3, #24]
 8003164:	e002      	b.n	800316c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d123      	bne.n	80031bc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800318a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318e:	83fb      	strh	r3, [r7, #30]
 8003190:	8bfb      	ldrh	r3, [r7, #30]
 8003192:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003196:	83fb      	strh	r3, [r7, #30]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	8bfb      	ldrh	r3, [r7, #30]
 80031a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11f      	bne.n	8003206 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e0:	83bb      	strh	r3, [r7, #28]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	441a      	add	r2, r3
 80031f0:	8bbb      	ldrh	r3, [r7, #28]
 80031f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003202:	b29b      	uxth	r3, r3
 8003204:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003206:	8b7b      	ldrh	r3, [r7, #26]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6959      	ldr	r1, [r3, #20]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	895a      	ldrh	r2, [r3, #10]
 8003218:	8b7b      	ldrh	r3, [r7, #26]
 800321a:	f004 fcd8 	bl	8007bce <USB_ReadPMA>
    }
  }

  return count;
 800321e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b0a4      	sub	sp, #144	@ 0x90
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 81dd 	beq.w	80035fc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	3302      	adds	r3, #2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003276:	429a      	cmp	r2, r3
 8003278:	d907      	bls.n	800328a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	619a      	str	r2, [r3, #24]
 8003288:	e002      	b.n	8003290 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 80b9 	bne.w	800340c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d126      	bne.n	80032f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	4413      	add	r3, r2
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	011a      	lsls	r2, r3, #4
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c2:	4413      	add	r3, r2
 80032c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	801a      	strh	r2, [r3, #0]
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	801a      	strh	r2, [r3, #0]
 80032ee:	e01a      	b.n	8003326 <HAL_PCD_EP_DB_Transmit+0xfe>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d116      	bne.n	8003326 <HAL_PCD_EP_DB_Transmit+0xfe>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	4413      	add	r3, r2
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	011a      	lsls	r2, r3, #4
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	4413      	add	r3, r2
 800331a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	2200      	movs	r2, #0
 8003324:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d126      	bne.n	8003382 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	011a      	lsls	r2, r3, #4
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003366:	b29a      	uxth	r2, r3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800337a:	b29a      	uxth	r2, r3
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	e017      	b.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d113      	bne.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	4413      	add	r3, r2
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	011a      	lsls	r2, r3, #4
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	4413      	add	r3, r2
 80033a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2200      	movs	r2, #0
 80033b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4619      	mov	r1, r3
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f006 fa14 	bl	80097e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 82fc 	beq.w	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e4:	82fb      	strh	r3, [r7, #22]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	8afb      	ldrh	r3, [r7, #22]
 80033f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003406:	b29b      	uxth	r3, r3
 8003408:	8013      	strh	r3, [r2, #0]
 800340a:	e2da      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d021      	beq.n	800345a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800342c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003430:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800344a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800344e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003456:	b29b      	uxth	r3, r3
 8003458:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003460:	2b01      	cmp	r3, #1
 8003462:	f040 82ae 	bne.w	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800346e:	441a      	add	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800347c:	441a      	add	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d30b      	bcc.n	80034a6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	621a      	str	r2, [r3, #32]
 80034a4:	e017      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d108      	bne.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80034ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034be:	e00a      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d165      	bne.n	80035aa <HAL_PCD_EP_DB_Transmit+0x382>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f2:	4413      	add	r3, r2
 80034f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	011a      	lsls	r2, r3, #4
 80034fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fe:	4413      	add	r3, r2
 8003500:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003510:	b29a      	uxth	r2, r3
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351a:	2b3e      	cmp	r3, #62	@ 0x3e
 800351c:	d91d      	bls.n	800355a <HAL_PCD_EP_DB_Transmit+0x332>
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_PCD_EP_DB_Transmit+0x310>
 8003532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003534:	3b01      	subs	r3, #1
 8003536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29a      	uxth	r2, r3
 800353e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003540:	b29b      	uxth	r3, r3
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	b29b      	uxth	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800354e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003552:	b29a      	uxth	r2, r3
 8003554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	e044      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800355a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_PCD_EP_DB_Transmit+0x350>
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003570:	b29a      	uxth	r2, r3
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	e035      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_PCD_EP_DB_Transmit+0x36a>
 800358c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800358e:	3301      	adds	r3, #1
 8003590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29a      	uxth	r2, r3
 8003598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359a:	b29b      	uxth	r3, r3
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	b29b      	uxth	r3, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	e01c      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d118      	bne.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c6:	4413      	add	r3, r2
 80035c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	011a      	lsls	r2, r3, #4
 80035d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d2:	4413      	add	r3, r2
 80035d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035de:	b29a      	uxth	r2, r3
 80035e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	6959      	ldr	r1, [r3, #20]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	891a      	ldrh	r2, [r3, #8]
 80035f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f004 faa4 	bl	8007b42 <USB_WritePMA>
 80035fa:	e1e2      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	3306      	adds	r3, #6
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003624:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003630:	429a      	cmp	r2, r3
 8003632:	d307      	bcc.n	8003644 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800363c:	1ad2      	subs	r2, r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	619a      	str	r2, [r3, #24]
 8003642:	e002      	b.n	800364a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80c0 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d126      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0x482>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003670:	4413      	add	r3, r2
 8003672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	011a      	lsls	r2, r3, #4
 800367a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800367c:	4413      	add	r3, r2
 800367e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003682:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368e:	b29a      	uxth	r2, r3
 8003690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e01a      	b.n	80036e0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d116      	bne.n	80036e0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036c6:	4413      	add	r3, r2
 80036c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	011a      	lsls	r2, r3, #4
 80036d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d2:	4413      	add	r3, r2
 80036d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036dc:	2200      	movs	r2, #0
 80036de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d12b      	bne.n	8003746 <HAL_PCD_EP_DB_Transmit+0x51e>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003702:	4413      	add	r3, r2
 8003704:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	011a      	lsls	r2, r3, #4
 800370c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370e:	4413      	add	r3, r2
 8003710:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003724:	b29a      	uxth	r2, r3
 8003726:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800372a:	801a      	strh	r2, [r3, #0]
 800372c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800373c:	b29a      	uxth	r2, r3
 800373e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	e017      	b.n	8003776 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d113      	bne.n	8003776 <HAL_PCD_EP_DB_Transmit+0x54e>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375c:	4413      	add	r3, r2
 800375e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	011a      	lsls	r2, r3, #4
 8003766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003768:	4413      	add	r3, r2
 800376a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800376e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003772:	2200      	movs	r2, #0
 8003774:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f006 f832 	bl	80097e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 811a 	bne.w	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	8013      	strh	r3, [r2, #0]
 80037d2:	e0f6      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d121      	bne.n	8003822 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800380e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800381a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 80ca 	bne.w	80039c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003836:	441a      	add	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003844:	441a      	add	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d30b      	bcc.n	800386e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003866:	1ad2      	subs	r2, r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	621a      	str	r2, [r3, #32]
 800386c:	e017      	b.n	800389e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003876:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800387a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003886:	e00a      	b.n	800389e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d165      	bne.n	8003978 <HAL_PCD_EP_DB_Transmit+0x750>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c0:	4413      	add	r3, r2
 80038c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	011a      	lsls	r2, r3, #4
 80038ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038cc:	4413      	add	r3, r2
 80038ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038de:	b29a      	uxth	r2, r3
 80038e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80038ea:	d91d      	bls.n	8003928 <HAL_PCD_EP_DB_Transmit+0x700>
 80038ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003902:	3b01      	subs	r3, #1
 8003904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29a      	uxth	r2, r3
 800390c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800390e:	b29b      	uxth	r3, r3
 8003910:	029b      	lsls	r3, r3, #10
 8003912:	b29b      	uxth	r3, r3
 8003914:	4313      	orrs	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003920:	b29a      	uxth	r2, r3
 8003922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	e041      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x784>
 8003928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393e:	b29a      	uxth	r2, r3
 8003940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003942:	801a      	strh	r2, [r3, #0]
 8003944:	e032      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x784>
 8003946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800394e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_PCD_EP_DB_Transmit+0x738>
 800395a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395c:	3301      	adds	r3, #1
 800395e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29a      	uxth	r2, r3
 8003966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003968:	b29b      	uxth	r3, r3
 800396a:	029b      	lsls	r3, r3, #10
 800396c:	b29b      	uxth	r3, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	b29a      	uxth	r2, r3
 8003972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	e019      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x784>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d115      	bne.n	80039ac <HAL_PCD_EP_DB_Transmit+0x784>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	4413      	add	r3, r2
 8003990:	657b      	str	r3, [r7, #84]	@ 0x54
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	011a      	lsls	r2, r3, #4
 8003998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399a:	4413      	add	r3, r2
 800399c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80039a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6959      	ldr	r1, [r3, #20]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	895a      	ldrh	r2, [r3, #10]
 80039b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f004 f8c0 	bl	8007b42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039dc:	82bb      	strh	r3, [r7, #20]
 80039de:	8abb      	ldrh	r3, [r7, #20]
 80039e0:	f083 0310 	eor.w	r3, r3, #16
 80039e4:	82bb      	strh	r3, [r7, #20]
 80039e6:	8abb      	ldrh	r3, [r7, #20]
 80039e8:	f083 0320 	eor.w	r3, r3, #32
 80039ec:	82bb      	strh	r3, [r7, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	441a      	add	r2, r3
 80039fc:	8abb      	ldrh	r3, [r7, #20]
 80039fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3790      	adds	r7, #144	@ 0x90
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	f003 0207 	and.w	r2, r3, #7
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	3310      	adds	r3, #16
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e009      	b.n	8003a66 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a52:	897a      	ldrh	r2, [r7, #10]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a66:	893b      	ldrh	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	80da      	strh	r2, [r3, #6]
 8003a7a:	e00b      	b.n	8003a94 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e272      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8087 	beq.w	8003bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac0:	4b92      	ldr	r3, [pc, #584]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d00c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003acc:	4b8f      	ldr	r3, [pc, #572]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d112      	bne.n	8003afe <HAL_RCC_OscConfig+0x5e>
 8003ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae4:	d10b      	bne.n	8003afe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae6:	4b89      	ldr	r3, [pc, #548]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d06c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x12c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d168      	bne.n	8003bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e24c      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x76>
 8003b08:	4b80      	ldr	r3, [pc, #512]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e02e      	b.n	8003b74 <HAL_RCC_OscConfig+0xd4>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x98>
 8003b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7a      	ldr	r2, [pc, #488]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b78      	ldr	r3, [pc, #480]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a77      	ldr	r2, [pc, #476]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xd4>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0xbc>
 8003b42:	4b72      	ldr	r3, [pc, #456]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a71      	ldr	r2, [pc, #452]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6e      	ldr	r2, [pc, #440]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xd4>
 8003b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6a      	ldr	r2, [pc, #424]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b68      	ldr	r3, [pc, #416]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a67      	ldr	r2, [pc, #412]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fb18 	bl	80011b0 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd fb14 	bl	80011b0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e200      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b5d      	ldr	r3, [pc, #372]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe4>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fb04 	bl	80011b0 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fd fb00 	bl	80011b0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	@ 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1ec      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b53      	ldr	r3, [pc, #332]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x10c>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bda:	4b4c      	ldr	r3, [pc, #304]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003be6:	4b49      	ldr	r3, [pc, #292]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x18c>
 8003bf2:	4b46      	ldr	r3, [pc, #280]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b43      	ldr	r3, [pc, #268]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x176>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c0      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b3d      	ldr	r3, [pc, #244]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4939      	ldr	r1, [pc, #228]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b36      	ldr	r3, [pc, #216]	@ (8003d10 <HAL_RCC_OscConfig+0x270>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fab9 	bl	80011b0 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fd fab5 	bl	80011b0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a1      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b2a      	ldr	r3, [pc, #168]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4927      	ldr	r1, [pc, #156]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b26      	ldr	r3, [pc, #152]	@ (8003d10 <HAL_RCC_OscConfig+0x270>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fa98 	bl	80011b0 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fd fa94 	bl	80011b0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e180      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1d      	ldr	r3, [pc, #116]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d03a      	beq.n	8003d24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d019      	beq.n	8003cea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbc:	f7fd fa78 	bl	80011b0 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd fa74 	bl	80011b0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e160      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f000 fa9c 	bl	8004220 <RCC_Delay>
 8003ce8:	e01c      	b.n	8003d24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <HAL_RCC_OscConfig+0x274>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fa5e 	bl	80011b0 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf6:	e00f      	b.n	8003d18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fa5a 	bl	80011b0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d908      	bls.n	8003d18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e146      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	42420000 	.word	0x42420000
 8003d14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	4b92      	ldr	r3, [pc, #584]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e9      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a6 	beq.w	8003e7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b8b      	ldr	r3, [pc, #556]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b88      	ldr	r3, [pc, #544]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4a87      	ldr	r2, [pc, #540]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	61d3      	str	r3, [r2, #28]
 8003d4e:	4b85      	ldr	r3, [pc, #532]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b82      	ldr	r3, [pc, #520]	@ (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fd fa1b 	bl	80011b0 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fd fa17 	bl	80011b0 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	@ 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e103      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b75      	ldr	r3, [pc, #468]	@ (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x312>
 8003da4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6213      	str	r3, [r2, #32]
 8003db0:	e02d      	b.n	8003e0e <HAL_RCC_OscConfig+0x36e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x334>
 8003dba:	4b6a      	ldr	r3, [pc, #424]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4a69      	ldr	r2, [pc, #420]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	4b67      	ldr	r3, [pc, #412]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	4a66      	ldr	r2, [pc, #408]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6213      	str	r3, [r2, #32]
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCC_OscConfig+0x36e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x356>
 8003ddc:	4b61      	ldr	r3, [pc, #388]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a60      	ldr	r2, [pc, #384]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a5d      	ldr	r2, [pc, #372]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6213      	str	r3, [r2, #32]
 8003df4:	e00b      	b.n	8003e0e <HAL_RCC_OscConfig+0x36e>
 8003df6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a5a      	ldr	r2, [pc, #360]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6213      	str	r3, [r2, #32]
 8003e02:	4b58      	ldr	r3, [pc, #352]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a57      	ldr	r2, [pc, #348]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fd f9cb 	bl	80011b0 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fd f9c7 	bl	80011b0 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0b1      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	4b4b      	ldr	r3, [pc, #300]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ee      	beq.n	8003e1e <HAL_RCC_OscConfig+0x37e>
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fd f9b5 	bl	80011b0 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd f9b1 	bl	80011b0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e09b      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	4b40      	ldr	r3, [pc, #256]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b3c      	ldr	r3, [pc, #240]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8087 	beq.w	8003f96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d061      	beq.n	8003f58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d146      	bne.n	8003f2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b33      	ldr	r3, [pc, #204]	@ (8003f6c <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fd f985 	bl	80011b0 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fd f981 	bl	80011b0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e06d      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ebc:	4b29      	ldr	r3, [pc, #164]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4921      	ldr	r1, [pc, #132]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a19      	ldr	r1, [r3, #32]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	491b      	ldr	r1, [pc, #108]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <HAL_RCC_OscConfig+0x4cc>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f02:	f7fd f955 	bl	80011b0 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fd f951 	bl	80011b0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e03d      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1c:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x46a>
 8003f28:	e035      	b.n	8003f96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <HAL_RCC_OscConfig+0x4cc>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd f93e 	bl	80011b0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fd f93a 	bl	80011b0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e026      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x498>
 8003f56:	e01e      	b.n	8003f96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e019      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <HAL_RCC_OscConfig+0x500>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d0      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b67      	ldr	r3, [pc, #412]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4965      	ldr	r1, [pc, #404]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a58      	ldr	r2, [pc, #352]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800400a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a52      	ldr	r2, [pc, #328]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d040      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e073      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3d      	ldr	r3, [pc, #244]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06b      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4936      	ldr	r1, [pc, #216]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fd f88c 	bl	80011b0 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fd f888 	bl	80011b0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e053      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b27      	ldr	r3, [pc, #156]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d210      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4922      	ldr	r1, [pc, #136]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800411e:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	@ (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	@ (8004170 <HAL_RCC_ClockConfig+0x1cc>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <HAL_RCC_ClockConfig+0x1d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fc ffea 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40022000 	.word	0x40022000
 8004168:	40021000 	.word	0x40021000
 800416c:	0800a680 	.word	0x0800a680
 8004170:	20000000 	.word	0x20000000
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_RCC_GetSysClockFreq+0x94>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x30>
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x36>
 80041a6:	e027      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x98>)
 80041aa:	613b      	str	r3, [r7, #16]
      break;
 80041ac:	e027      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	0c9b      	lsrs	r3, r3, #18
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	4a17      	ldr	r2, [pc, #92]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041b8:	5cd3      	ldrb	r3, [r2, r3]
 80041ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c6:	4b11      	ldr	r3, [pc, #68]	@ (800420c <HAL_RCC_GetSysClockFreq+0x94>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	0c5b      	lsrs	r3, r3, #17
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	4a11      	ldr	r2, [pc, #68]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x98>)
 80041da:	fb03 f202 	mul.w	r2, r3, r2
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e004      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0c      	ldr	r2, [pc, #48]	@ (800421c <HAL_RCC_GetSysClockFreq+0xa4>)
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	613b      	str	r3, [r7, #16]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x98>)
 80041fa:	613b      	str	r3, [r7, #16]
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	693b      	ldr	r3, [r7, #16]
}
 8004200:	4618      	mov	r0, r3
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	007a1200 	.word	0x007a1200
 8004214:	0800a690 	.word	0x0800a690
 8004218:	0800a6a0 	.word	0x0800a6a0
 800421c:	003d0900 	.word	0x003d0900

08004220 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <RCC_Delay+0x34>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <RCC_Delay+0x38>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0a5b      	lsrs	r3, r3, #9
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800423c:	bf00      	nop
  }
  while (Delay --);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f9      	bne.n	800423c <RCC_Delay+0x1c>
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20000000 	.word	0x20000000
 8004258:	10624dd3 	.word	0x10624dd3

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d07d      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004278:	2300      	movs	r3, #0
 800427a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427c:	4b4f      	ldr	r3, [pc, #316]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b4c      	ldr	r3, [pc, #304]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4a4b      	ldr	r2, [pc, #300]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	61d3      	str	r3, [r2, #28]
 8004294:	4b49      	ldr	r3, [pc, #292]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	4b46      	ldr	r3, [pc, #280]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d118      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b0:	4b43      	ldr	r3, [pc, #268]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a42      	ldr	r2, [pc, #264]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042bc:	f7fc ff78 	bl	80011b0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c2:	e008      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fc ff74 	bl	80011b0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	@ 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e06d      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	4b3a      	ldr	r3, [pc, #232]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e2:	4b36      	ldr	r3, [pc, #216]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d02e      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d027      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004300:	4b2e      	ldr	r3, [pc, #184]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800430a:	4b2e      	ldr	r3, [pc, #184]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004310:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004316:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d014      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fc ff43 	bl	80011b0 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fc ff3f 	bl	80011b0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e036      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ee      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004350:	4b1a      	ldr	r3, [pc, #104]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4917      	ldr	r1, [pc, #92]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	4313      	orrs	r3, r2
 8004360:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004372:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004380:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	490b      	ldr	r1, [pc, #44]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439e:	4b07      	ldr	r3, [pc, #28]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	4904      	ldr	r1, [pc, #16]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42420440 	.word	0x42420440

080043c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e041      	b.n	800445e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fb3a 	bl	8000a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 fd74 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e022      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x72>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d109      	bne.n	80044ae <HAL_TIM_PWM_Start_DMA+0x46>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e015      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x72>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e008      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x72>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	e167      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_TIM_PWM_Start_DMA+0x94>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e022      	b.n	8004542 <HAL_TIM_PWM_Start_DMA+0xda>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d109      	bne.n	8004516 <HAL_TIM_PWM_Start_DMA+0xae>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e015      	b.n	8004542 <HAL_TIM_PWM_Start_DMA+0xda>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d109      	bne.n	8004530 <HAL_TIM_PWM_Start_DMA+0xc8>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e008      	b.n	8004542 <HAL_TIM_PWM_Start_DMA+0xda>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d024      	beq.n	8004590 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_TIM_PWM_Start_DMA+0xea>
 800454c:	887b      	ldrh	r3, [r7, #2]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e12d      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Start_DMA+0xfe>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004564:	e016      	b.n	8004594 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d104      	bne.n	8004576 <HAL_TIM_PWM_Start_DMA+0x10e>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004574:	e00e      	b.n	8004594 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d104      	bne.n	8004586 <HAL_TIM_PWM_Start_DMA+0x11e>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004584:	e006      	b.n	8004594 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800458e:	e001      	b.n	8004594 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e10e      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
  }

  switch (Channel)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	f200 80ae 	bhi.w	80046f8 <HAL_TIM_PWM_Start_DMA+0x290>
 800459c:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080046f9 	.word	0x080046f9
 80045ac:	080046f9 	.word	0x080046f9
 80045b0:	080046f9 	.word	0x080046f9
 80045b4:	08004621 	.word	0x08004621
 80045b8:	080046f9 	.word	0x080046f9
 80045bc:	080046f9 	.word	0x080046f9
 80045c0:	080046f9 	.word	0x080046f9
 80045c4:	08004669 	.word	0x08004669
 80045c8:	080046f9 	.word	0x080046f9
 80045cc:	080046f9 	.word	0x080046f9
 80045d0:	080046f9 	.word	0x080046f9
 80045d4:	080046b1 	.word	0x080046b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	4a77      	ldr	r2, [pc, #476]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x354>)
 80045de:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	4a76      	ldr	r2, [pc, #472]	@ (80047c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 80045e6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	4a75      	ldr	r2, [pc, #468]	@ (80047c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3334      	adds	r3, #52	@ 0x34
 80045fc:	461a      	mov	r2, r3
 80045fe:	887b      	ldrh	r3, [r7, #2]
 8004600:	f7fc ff88 	bl	8001514 <HAL_DMA_Start_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0d1      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461c:	60da      	str	r2, [r3, #12]
      break;
 800461e:	e06e      	b.n	80046fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	4a65      	ldr	r2, [pc, #404]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x354>)
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	4a64      	ldr	r2, [pc, #400]	@ (80047c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800462e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	4a63      	ldr	r2, [pc, #396]	@ (80047c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3338      	adds	r3, #56	@ 0x38
 8004644:	461a      	mov	r2, r3
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	f7fc ff64 	bl	8001514 <HAL_DMA_Start_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0ad      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004664:	60da      	str	r2, [r3, #12]
      break;
 8004666:	e04a      	b.n	80046fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	4a53      	ldr	r2, [pc, #332]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x354>)
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	4a52      	ldr	r2, [pc, #328]	@ (80047c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004676:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	4a51      	ldr	r2, [pc, #324]	@ (80047c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	333c      	adds	r3, #60	@ 0x3c
 800468c:	461a      	mov	r2, r3
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	f7fc ff40 	bl	8001514 <HAL_DMA_Start_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e089      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ac:	60da      	str	r2, [r3, #12]
      break;
 80046ae:	e026      	b.n	80046fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	4a41      	ldr	r2, [pc, #260]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x354>)
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	4a40      	ldr	r2, [pc, #256]	@ (80047c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 80046be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	4a3f      	ldr	r2, [pc, #252]	@ (80047c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3340      	adds	r3, #64	@ 0x40
 80046d4:	461a      	mov	r2, r3
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	f7fc ff1c 	bl	8001514 <HAL_DMA_Start_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e065      	b.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046f4:	60da      	str	r2, [r3, #12]
      break;
 80046f6:	e002      	b.n	80046fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d155      	bne.n	80047b0 <HAL_TIM_PWM_Start_DMA+0x348>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fe23 	bl	8005358 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <HAL_TIM_PWM_Start_DMA+0x360>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_PWM_Start_DMA+0x2be>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_TIM_PWM_Start_DMA+0x364>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a20      	ldr	r2, [pc, #128]	@ (80047c8 <HAL_TIM_PWM_Start_DMA+0x360>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x314>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_TIM_PWM_Start_DMA+0x364>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x314>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d00e      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x314>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x314>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x314>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_TIM_PWM_Start_DMA+0x338>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d010      	beq.n	80047b0 <HAL_TIM_PWM_Start_DMA+0x348>
      {
        __HAL_TIM_ENABLE(htim);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e007      	b.n	80047b0 <HAL_TIM_PWM_Start_DMA+0x348>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08004de3 	.word	0x08004de3
 80047c0:	08004e8b 	.word	0x08004e8b
 80047c4:	08004d51 	.word	0x08004d51
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00

080047dc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d855      	bhi.n	800489c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80047f0:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800482d 	.word	0x0800482d
 80047fc:	0800489d 	.word	0x0800489d
 8004800:	0800489d 	.word	0x0800489d
 8004804:	0800489d 	.word	0x0800489d
 8004808:	08004849 	.word	0x08004849
 800480c:	0800489d 	.word	0x0800489d
 8004810:	0800489d 	.word	0x0800489d
 8004814:	0800489d 	.word	0x0800489d
 8004818:	08004865 	.word	0x08004865
 800481c:	0800489d 	.word	0x0800489d
 8004820:	0800489d 	.word	0x0800489d
 8004824:	0800489d 	.word	0x0800489d
 8004828:	08004881 	.word	0x08004881
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800483a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	4618      	mov	r0, r3
 8004842:	f7fc fec7 	bl	80015d4 <HAL_DMA_Abort_IT>
      break;
 8004846:	e02c      	b.n	80048a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004856:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc feb9 	bl	80015d4 <HAL_DMA_Abort_IT>
      break;
 8004862:	e01e      	b.n	80048a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004872:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	4618      	mov	r0, r3
 800487a:	f7fc feab 	bl	80015d4 <HAL_DMA_Abort_IT>
      break;
 800487e:	e010      	b.n	80048a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800488e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	4618      	mov	r0, r3
 8004896:	f7fc fe9d 	bl	80015d4 <HAL_DMA_Abort_IT>
      break;
 800489a:	e002      	b.n	80048a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d161      	bne.n	800496c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fd51 	bl	8005358 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004978 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIM_PWM_Stop_DMA+0xee>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2d      	ldr	r2, [pc, #180]	@ (800497c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_PWM_Stop_DMA+0xf2>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d017      	beq.n	8004904 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10f      	bne.n	8004904 <HAL_TIM_PWM_Stop_DMA+0x128>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_PWM_Stop_DMA+0x128>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004902:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	f240 4344 	movw	r3, #1092	@ 0x444
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_TIM_PWM_Stop_DMA+0x168>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004942:	e013      	b.n	800496c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b04      	cmp	r3, #4
 8004948:	d104      	bne.n	8004954 <HAL_TIM_PWM_Stop_DMA+0x178>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004952:	e00b      	b.n	800496c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d104      	bne.n	8004964 <HAL_TIM_PWM_Stop_DMA+0x188>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004962:	e003      	b.n	800496c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40013400 	.word	0x40013400

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d020      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0202 	mvn.w	r2, #2
 80049b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f99c 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f98f 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fb fced 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d020      	beq.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01b      	beq.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f976 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f969 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fb fcc7 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d020      	beq.n	8004a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0208 	mvn.w	r2, #8
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f950 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f943 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fb fca1 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d020      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0210 	mvn.w	r2, #16
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f92a 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f91d 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fb fc7b 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0201 	mvn.w	r2, #1
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8fc 	bl	8004ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fd0e 	bl	800552c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8fc 	bl	8004d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0220 	mvn.w	r2, #32
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fce1 	bl	800551a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e0ae      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	f200 809f 	bhi.w	8004ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004ccd 	.word	0x08004ccd
 8004b9c:	08004ccd 	.word	0x08004ccd
 8004ba0:	08004ccd 	.word	0x08004ccd
 8004ba4:	08004c09 	.word	0x08004c09
 8004ba8:	08004ccd 	.word	0x08004ccd
 8004bac:	08004ccd 	.word	0x08004ccd
 8004bb0:	08004ccd 	.word	0x08004ccd
 8004bb4:	08004c4b 	.word	0x08004c4b
 8004bb8:	08004ccd 	.word	0x08004ccd
 8004bbc:	08004ccd 	.word	0x08004ccd
 8004bc0:	08004ccd 	.word	0x08004ccd
 8004bc4:	08004c8b 	.word	0x08004c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa16 	bl	8005000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0204 	bic.w	r2, r2, #4
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	619a      	str	r2, [r3, #24]
      break;
 8004c06:	e064      	b.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fa66 	bl	80050e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6999      	ldr	r1, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	619a      	str	r2, [r3, #24]
      break;
 8004c48:	e043      	b.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fab9 	bl	80051c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0208 	orr.w	r2, r2, #8
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0204 	bic.w	r2, r2, #4
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	61da      	str	r2, [r3, #28]
      break;
 8004c88:	e023      	b.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fb0d 	bl	80052b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	61da      	str	r2, [r3, #28]
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d76:	e02a      	b.n	8004dce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d107      	bne.n	8004d92 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2202      	movs	r2, #2
 8004d86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d90:	e01d      	b.n	8004dce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d107      	bne.n	8004dac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004daa:	e010      	b.n	8004dce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d107      	bne.n	8004dc6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2208      	movs	r2, #8
 8004dba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc4:	e003      	b.n	8004dce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ffb5 	bl	8004d3e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	771a      	strb	r2, [r3, #28]
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10b      	bne.n	8004e12 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d136      	bne.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e10:	e031      	b.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d10b      	bne.n	8004e34 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d125      	bne.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e32:	e020      	b.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d10b      	bne.n	8004e56 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2204      	movs	r2, #4
 8004e42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d114      	bne.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e54:	e00f      	b.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10a      	bne.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2208      	movs	r2, #8
 8004e64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7fb fa9e 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	771a      	strb	r2, [r3, #28]
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d103      	bne.n	8004eaa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	771a      	strb	r2, [r3, #28]
 8004ea8:	e019      	b.n	8004ede <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d103      	bne.n	8004ebc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	771a      	strb	r2, [r3, #28]
 8004eba:	e010      	b.n	8004ede <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d103      	bne.n	8004ece <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	771a      	strb	r2, [r3, #28]
 8004ecc:	e007      	b.n	8004ede <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d102      	bne.n	8004ede <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2208      	movs	r2, #8
 8004edc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff1b 	bl	8004d1a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	771a      	strb	r2, [r3, #28]
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a39      	ldr	r2, [pc, #228]	@ (8004fec <TIM_Base_SetConfig+0xf8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	@ (8004ff0 <TIM_Base_SetConfig+0xfc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a35      	ldr	r2, [pc, #212]	@ (8004ff4 <TIM_Base_SetConfig+0x100>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a34      	ldr	r2, [pc, #208]	@ (8004ff8 <TIM_Base_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a33      	ldr	r2, [pc, #204]	@ (8004ffc <TIM_Base_SetConfig+0x108>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a28      	ldr	r2, [pc, #160]	@ (8004fec <TIM_Base_SetConfig+0xf8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a27      	ldr	r2, [pc, #156]	@ (8004ff0 <TIM_Base_SetConfig+0xfc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5c:	d00b      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a24      	ldr	r2, [pc, #144]	@ (8004ff4 <TIM_Base_SetConfig+0x100>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a23      	ldr	r2, [pc, #140]	@ (8004ff8 <TIM_Base_SetConfig+0x104>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a22      	ldr	r2, [pc, #136]	@ (8004ffc <TIM_Base_SetConfig+0x108>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0f      	ldr	r2, [pc, #60]	@ (8004fec <TIM_Base_SetConfig+0xf8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_Base_SetConfig+0xc8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff0 <TIM_Base_SetConfig+0xfc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d103      	bne.n	8004fc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00

08005000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0201 	bic.w	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 0302 	bic.w	r3, r3, #2
 8005048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a20      	ldr	r2, [pc, #128]	@ (80050d8 <TIM_OC1_SetConfig+0xd8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC1_SetConfig+0x64>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <TIM_OC1_SetConfig+0xdc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d10c      	bne.n	800507e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0308 	bic.w	r3, r3, #8
 800506a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a15      	ldr	r2, [pc, #84]	@ (80050d8 <TIM_OC1_SetConfig+0xd8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC1_SetConfig+0x8e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <TIM_OC1_SetConfig+0xdc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d111      	bne.n	80050b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40013400 	.word	0x40013400

080050e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0210 	bic.w	r2, r3, #16
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a21      	ldr	r2, [pc, #132]	@ (80051c0 <TIM_OC2_SetConfig+0xe0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC2_SetConfig+0x68>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <TIM_OC2_SetConfig+0xe4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10d      	bne.n	8005164 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005162:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a16      	ldr	r2, [pc, #88]	@ (80051c0 <TIM_OC2_SetConfig+0xe0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC2_SetConfig+0x94>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <TIM_OC2_SetConfig+0xe4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d113      	bne.n	800519c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800517a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400

080051c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a21      	ldr	r2, [pc, #132]	@ (80052a8 <TIM_OC3_SetConfig+0xe0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_OC3_SetConfig+0x66>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a20      	ldr	r2, [pc, #128]	@ (80052ac <TIM_OC3_SetConfig+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10d      	bne.n	800524a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <TIM_OC3_SetConfig+0xe0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_OC3_SetConfig+0x92>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a15      	ldr	r2, [pc, #84]	@ (80052ac <TIM_OC3_SetConfig+0xe4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d113      	bne.n	8005282 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400

080052b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	031b      	lsls	r3, r3, #12
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a11      	ldr	r2, [pc, #68]	@ (8005350 <TIM_OC4_SetConfig+0xa0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC4_SetConfig+0x68>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a10      	ldr	r2, [pc, #64]	@ (8005354 <TIM_OC4_SetConfig+0xa4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d109      	bne.n	800532c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800531e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40013400 	.word	0x40013400

08005358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2201      	movs	r2, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	43db      	mvns	r3, r3
 800537a:	401a      	ands	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e050      	b.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d018      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540e:	d00e      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a15      	ldr	r2, [pc, #84]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a12      	ldr	r2, [pc, #72]	@ (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10c      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4313      	orrs	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40013400 	.word	0x40013400
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00

08005478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005490:	2302      	movs	r3, #2
 8005492:	e03d      	b.n	8005510 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	4638      	mov	r0, r7
 8005548:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005568:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800556c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800558c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005590:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	b29b      	uxth	r3, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	4013      	ands	r3, r2
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	4638      	mov	r0, r7
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
	...

0800560c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800560c:	b480      	push	{r7}
 800560e:	b09d      	sub	sp, #116	@ 0x74
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800562e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005632:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	78db      	ldrb	r3, [r3, #3]
 800563a:	2b03      	cmp	r3, #3
 800563c:	d81f      	bhi.n	800567e <USB_ActivateEndpoint+0x72>
 800563e:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <USB_ActivateEndpoint+0x38>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005655 	.word	0x08005655
 8005648:	08005671 	.word	0x08005671
 800564c:	08005687 	.word	0x08005687
 8005650:	08005663 	.word	0x08005663
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005654:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005658:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800565c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005660:	e012      	b.n	8005688 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005662:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005666:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800566a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800566e:	e00b      	b.n	8005688 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005670:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005678:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800567c:	e004      	b.n	8005688 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005684:	e000      	b.n	8005688 <USB_ActivateEndpoint+0x7c>
      break;
 8005686:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	7b1b      	ldrb	r3, [r3, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8178 	bne.w	80059e8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8084 	beq.w	800580a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800570c:	b29b      	uxth	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	4413      	add	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	011a      	lsls	r2, r3, #4
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	88db      	ldrh	r3, [r3, #6]
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	b29b      	uxth	r3, r3
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	827b      	strh	r3, [r7, #18]
 8005744:	8a7b      	ldrh	r3, [r7, #18]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01b      	beq.n	8005786 <USB_ActivateEndpoint+0x17a>
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005764:	823b      	strh	r3, [r7, #16]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	8a3b      	ldrh	r3, [r7, #16]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800577a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d020      	beq.n	80057d0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a4:	81bb      	strh	r3, [r7, #12]
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	f083 0320 	eor.w	r3, r3, #32
 80057ac:	81bb      	strh	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	89bb      	ldrh	r3, [r7, #12]
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
 80057ce:	e2d5      	b.n	8005d7c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e6:	81fb      	strh	r3, [r7, #14]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	89fb      	ldrh	r3, [r7, #14]
 80057f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]
 8005808:	e2b8      	b.n	8005d7c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	633b      	str	r3, [r7, #48]	@ 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	4413      	add	r3, r2
 800581c:	633b      	str	r3, [r7, #48]	@ 0x30
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	011a      	lsls	r2, r3, #4
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	4413      	add	r3, r2
 8005828:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800582c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	88db      	ldrh	r3, [r3, #6]
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	4413      	add	r3, r2
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	011a      	lsls	r2, r3, #4
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	4413      	add	r3, r2
 800585c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800586c:	b29a      	uxth	r2, r3
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b3e      	cmp	r3, #62	@ 0x3e
 8005878:	d91d      	bls.n	80058b6 <USB_ActivateEndpoint+0x2aa>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <USB_ActivateEndpoint+0x288>
 800588e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005890:	3b01      	subs	r3, #1
 8005892:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29a      	uxth	r2, r3
 800589a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800589c:	b29b      	uxth	r3, r3
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e026      	b.n	8005904 <USB_ActivateEndpoint+0x2f8>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <USB_ActivateEndpoint+0x2c8>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	e017      	b.n	8005904 <USB_ActivateEndpoint+0x2f8>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <USB_ActivateEndpoint+0x2e2>
 80058e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058ea:	3301      	adds	r3, #1
 80058ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4313      	orrs	r3, r2
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005912:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <USB_ActivateEndpoint+0x348>
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	843b      	strh	r3, [r7, #32]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	8c3b      	ldrh	r3, [r7, #32]
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800594c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d124      	bne.n	80059a6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	83bb      	strh	r3, [r7, #28]
 8005974:	8bbb      	ldrh	r3, [r7, #28]
 8005976:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800597a:	83bb      	strh	r3, [r7, #28]
 800597c:	8bbb      	ldrh	r3, [r7, #28]
 800597e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005982:	83bb      	strh	r3, [r7, #28]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	8bbb      	ldrh	r3, [r7, #28]
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
 80059a4:	e1ea      	b.n	8005d7c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059bc:	83fb      	strh	r3, [r7, #30]
 80059be:	8bfb      	ldrh	r3, [r7, #30]
 80059c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059c4:	83fb      	strh	r3, [r7, #30]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	8bfb      	ldrh	r3, [r7, #30]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]
 80059e6:	e1c9      	b.n	8005d7c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d11e      	bne.n	8005a2e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a06:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a20:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
 8005a2c:	e01d      	b.n	8005a6a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a44:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7a:	4413      	add	r3, r2
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	011a      	lsls	r2, r3, #4
 8005a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	891b      	ldrh	r3, [r3, #8]
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aae:	4413      	add	r3, r2
 8005ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	011a      	lsls	r2, r3, #4
 8005ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	895b      	ldrh	r3, [r3, #10]
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 8093 	bne.w	8005c02 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005aec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <USB_ActivateEndpoint+0x524>
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005b3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <USB_ActivateEndpoint+0x574>
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b98:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b9e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ba0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ba2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ba6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bde:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]
 8005c00:	e0bc      	b.n	8005d7c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01d      	beq.n	8005c5a <USB_ActivateEndpoint+0x64e>
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c34:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005c6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01d      	beq.n	8005cb2 <USB_ActivateEndpoint+0x6a6>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005caa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d024      	beq.n	8005d04 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005cd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005cd8:	f083 0320 	eor.w	r3, r3, #32
 8005cdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]
 8005d02:	e01d      	b.n	8005d40 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3774      	adds	r7, #116	@ 0x74
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b08d      	sub	sp, #52	@ 0x34
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	7b1b      	ldrb	r3, [r3, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 808e 	bne.w	8005ebc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d044      	beq.n	8005e32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	81bb      	strh	r3, [r7, #12]
 8005db6:	89bb      	ldrh	r3, [r7, #12]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01b      	beq.n	8005df8 <USB_DeactivateEndpoint+0x6c>
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	817b      	strh	r3, [r7, #10]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e0e:	813b      	strh	r3, [r7, #8]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	893b      	ldrh	r3, [r7, #8]
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]
 8005e30:	e192      	b.n	8006158 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	827b      	strh	r3, [r7, #18]
 8005e40:	8a7b      	ldrh	r3, [r7, #18]
 8005e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01b      	beq.n	8005e82 <USB_DeactivateEndpoint+0xf6>
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e60:	823b      	strh	r3, [r7, #16]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	8a3b      	ldrh	r3, [r7, #16]
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e98:	81fb      	strh	r3, [r7, #14]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	89fb      	ldrh	r3, [r7, #14]
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]
 8005eba:	e14d      	b.n	8006158 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 80a5 	bne.w	8006010 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	843b      	strh	r3, [r7, #32]
 8005ed4:	8c3b      	ldrh	r3, [r7, #32]
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <USB_DeactivateEndpoint+0x18a>
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef4:	83fb      	strh	r3, [r7, #30]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	83bb      	strh	r3, [r7, #28]
 8005f24:	8bbb      	ldrh	r3, [r7, #28]
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <USB_DeactivateEndpoint+0x1da>
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f44:	837b      	strh	r3, [r7, #26]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	8b7b      	ldrh	r3, [r7, #26]
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7c:	833b      	strh	r3, [r7, #24]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	8b3b      	ldrh	r3, [r7, #24]
 8005f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb4:	82fb      	strh	r3, [r7, #22]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	8afb      	ldrh	r3, [r7, #22]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fec:	82bb      	strh	r3, [r7, #20]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	8abb      	ldrh	r3, [r7, #20]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
 800600e:	e0a3      	b.n	8006158 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800601e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <USB_DeactivateEndpoint+0x2d4>
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006054:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800606e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <USB_DeactivateEndpoint+0x324>
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3734      	adds	r7, #52	@ 0x34
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b0c2      	sub	sp, #264	@ 0x108
 8006168:	af00      	add	r7, sp, #0
 800616a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006172:	6018      	str	r0, [r3, #0]
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	2b01      	cmp	r3, #1
 800618c:	f040 86b7 	bne.w	8006efe <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d908      	bls.n	80061be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80061ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061bc:	e007      	b.n	80061ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80061be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	7b1b      	ldrb	r3, [r3, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d13a      	bne.n	8006254 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6959      	ldr	r1, [r3, #20]
 80061ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	88da      	ldrh	r2, [r3, #6]
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006200:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006204:	6800      	ldr	r0, [r0, #0]
 8006206:	f001 fc9c 	bl	8007b42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006224:	b29b      	uxth	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	011a      	lsls	r2, r3, #4
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	f000 be1f 	b.w	8006e92 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f040 8462 	bne.w	8006b2a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	429a      	cmp	r2, r3
 8006280:	f240 83df 	bls.w	8006a42 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80062ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	1ad2      	subs	r2, r2, r3
 80062f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 81c7 	beq.w	80066b4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	633b      	str	r3, [r7, #48]	@ 0x30
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d177      	bne.n	8006432 <USB_EPStartXfer+0x2ce>
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800634e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800635c:	b29b      	uxth	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	4413      	add	r3, r2
 8006364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	011a      	lsls	r2, r3, #4
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	4413      	add	r3, r2
 8006378:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006388:	b29a      	uxth	r2, r3
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	2b3e      	cmp	r3, #62	@ 0x3e
 8006394:	d921      	bls.n	80063da <USB_EPStartXfer+0x276>
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <USB_EPStartXfer+0x252>
 80063ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063b0:	3b01      	subs	r3, #1
 80063b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	029b      	lsls	r3, r3, #10
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e050      	b.n	800647c <USB_EPStartXfer+0x318>
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <USB_EPStartXfer+0x294>
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	e041      	b.n	800647c <USB_EPStartXfer+0x318>
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	085b      	lsrs	r3, r3, #1
 80063fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <USB_EPStartXfer+0x2b4>
 800640e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006412:	3301      	adds	r3, #1
 8006414:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
 800641e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29b      	uxth	r3, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	b29a      	uxth	r2, r3
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	801a      	strh	r2, [r3, #0]
 8006430:	e024      	b.n	800647c <USB_EPStartXfer+0x318>
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d11c      	bne.n	800647c <USB_EPStartXfer+0x318>
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	4413      	add	r3, r2
 8006458:	633b      	str	r3, [r7, #48]	@ 0x30
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	4413      	add	r3, r2
 800646c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	b29a      	uxth	r2, r3
 8006478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	895b      	ldrh	r3, [r3, #10]
 8006488:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6959      	ldr	r1, [r3, #20]
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	b29b      	uxth	r3, r3
 800649e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064aa:	6800      	ldr	r0, [r0, #0]
 80064ac:	f001 fb49 	bl	8007b42 <USB_WritePMA>
            ep->xfer_buff += len;
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	441a      	add	r2, r3
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d90f      	bls.n	800650a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	621a      	str	r2, [r3, #32]
 8006508:	e00e      	b.n	8006528 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800651a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2200      	movs	r2, #0
 8006526:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d177      	bne.n	8006628 <USB_EPStartXfer+0x4c4>
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4413      	add	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4413      	add	r3, r2
 800656e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657e:	b29a      	uxth	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	2b3e      	cmp	r3, #62	@ 0x3e
 800658a:	d921      	bls.n	80065d0 <USB_EPStartXfer+0x46c>
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <USB_EPStartXfer+0x448>
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e056      	b.n	800667e <USB_EPStartXfer+0x51a>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <USB_EPStartXfer+0x48a>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e047      	b.n	800667e <USB_EPStartXfer+0x51a>
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <USB_EPStartXfer+0x4aa>
 8006604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006608:	3301      	adds	r3, #1
 800660a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29b      	uxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b29a      	uxth	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	e02a      	b.n	800667e <USB_EPStartXfer+0x51a>
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d122      	bne.n	800667e <USB_EPStartXfer+0x51a>
 8006638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	4413      	add	r3, r2
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	011a      	lsls	r2, r3, #4
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	4413      	add	r3, r2
 800666e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	b29a      	uxth	r2, r3
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	891b      	ldrh	r3, [r3, #8]
 800668a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6959      	ldr	r1, [r3, #20]
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f001 fa48 	bl	8007b42 <USB_WritePMA>
 80066b2:	e3ee      	b.n	8006e92 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d177      	bne.n	80067b4 <USB_EPStartXfer+0x650>
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e4:	4413      	add	r3, r2
 80066e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	011a      	lsls	r2, r3, #4
 80066f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670a:	b29a      	uxth	r2, r3
 800670c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006714:	2b3e      	cmp	r3, #62	@ 0x3e
 8006716:	d921      	bls.n	800675c <USB_EPStartXfer+0x5f8>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <USB_EPStartXfer+0x5d4>
 800672e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006732:	3b01      	subs	r3, #1
 8006734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b29b      	uxth	r3, r3
 800674c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006754:	b29a      	uxth	r2, r3
 8006756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	e056      	b.n	800680a <USB_EPStartXfer+0x6a6>
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <USB_EPStartXfer+0x616>
 8006764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006772:	b29a      	uxth	r2, r3
 8006774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	e047      	b.n	800680a <USB_EPStartXfer+0x6a6>
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <USB_EPStartXfer+0x636>
 8006790:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006794:	3301      	adds	r3, #1
 8006796:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800679a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4313      	orrs	r3, r2
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e02a      	b.n	800680a <USB_EPStartXfer+0x6a6>
 80067b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d122      	bne.n	800680a <USB_EPStartXfer+0x6a6>
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067de:	b29b      	uxth	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067e4:	4413      	add	r3, r2
 80067e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	011a      	lsls	r2, r3, #4
 80067f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f8:	4413      	add	r3, r2
 80067fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	b29a      	uxth	r2, r3
 8006806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006808:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800680a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	891b      	ldrh	r3, [r3, #8]
 8006816:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6959      	ldr	r1, [r3, #20]
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682a:	b29b      	uxth	r3, r3
 800682c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006830:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006834:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006838:	6800      	ldr	r0, [r0, #0]
 800683a:	f001 f982 	bl	8007b42 <USB_WritePMA>
            ep->xfer_buff += len;
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	441a      	add	r2, r3
 8006850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d90f      	bls.n	8006898 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6a1a      	ldr	r2, [r3, #32]
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	1ad2      	subs	r2, r2, r3
 800688a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	621a      	str	r2, [r3, #32]
 8006896:	e00e      	b.n	80068b6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d177      	bne.n	80069c2 <USB_EPStartXfer+0x85e>
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	4413      	add	r3, r2
 80068f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	011a      	lsls	r2, r3, #4
 8006904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006906:	4413      	add	r3, r2
 8006908:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800690c:	637b      	str	r3, [r7, #52]	@ 0x34
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006918:	b29a      	uxth	r2, r3
 800691a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006922:	2b3e      	cmp	r3, #62	@ 0x3e
 8006924:	d921      	bls.n	800696a <USB_EPStartXfer+0x806>
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USB_EPStartXfer+0x7e2>
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	3b01      	subs	r3, #1
 8006942:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	b29b      	uxth	r3, r3
 8006952:	029b      	lsls	r3, r3, #10
 8006954:	b29b      	uxth	r3, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006962:	b29a      	uxth	r2, r3
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e050      	b.n	8006a0c <USB_EPStartXfer+0x8a8>
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <USB_EPStartXfer+0x824>
 8006972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006980:	b29a      	uxth	r2, r3
 8006982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	e041      	b.n	8006a0c <USB_EPStartXfer+0x8a8>
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <USB_EPStartXfer+0x844>
 800699e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a2:	3301      	adds	r3, #1
 80069a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	4313      	orrs	r3, r2
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	e024      	b.n	8006a0c <USB_EPStartXfer+0x8a8>
 80069c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d11c      	bne.n	8006a0c <USB_EPStartXfer+0x8a8>
 80069d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e6:	4413      	add	r3, r2
 80069e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	011a      	lsls	r2, r3, #4
 80069f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069fa:	4413      	add	r3, r2
 80069fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	895b      	ldrh	r3, [r3, #10]
 8006a18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6959      	ldr	r1, [r3, #20]
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	f001 f881 	bl	8007b42 <USB_WritePMA>
 8006a40:	e227      	b.n	8006e92 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a78:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ace:	4413      	add	r3, r2
 8006ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	011a      	lsls	r2, r3, #4
 8006ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006af2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	891b      	ldrh	r3, [r3, #8]
 8006b00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6959      	ldr	r1, [r3, #20]
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	f001 f80d 	bl	8007b42 <USB_WritePMA>
 8006b28:	e1b3      	b.n	8006e92 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a1a      	ldr	r2, [r3, #32]
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 80c6 	beq.w	8006cfc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d177      	bne.n	8006c7c <USB_EPStartXfer+0xb18>
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bac:	4413      	add	r3, r2
 8006bae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	011a      	lsls	r2, r3, #4
 8006bbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bde:	d921      	bls.n	8006c24 <USB_EPStartXfer+0xac0>
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <USB_EPStartXfer+0xa9c>
 8006bf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	029b      	lsls	r3, r3, #10
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	4313      	orrs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	e050      	b.n	8006cc6 <USB_EPStartXfer+0xb62>
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <USB_EPStartXfer+0xade>
 8006c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e041      	b.n	8006cc6 <USB_EPStartXfer+0xb62>
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <USB_EPStartXfer+0xafe>
 8006c58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	029b      	lsls	r3, r3, #10
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	e024      	b.n	8006cc6 <USB_EPStartXfer+0xb62>
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d11c      	bne.n	8006cc6 <USB_EPStartXfer+0xb62>
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ca0:	4413      	add	r3, r2
 8006ca2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	011a      	lsls	r2, r3, #4
 8006cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	895b      	ldrh	r3, [r3, #10]
 8006cd2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6959      	ldr	r1, [r3, #20]
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cf0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cf4:	6800      	ldr	r0, [r0, #0]
 8006cf6:	f000 ff24 	bl	8007b42 <USB_WritePMA>
 8006cfa:	e0ca      	b.n	8006e92 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d177      	bne.n	8006dfc <USB_EPStartXfer+0xc98>
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d2c:	4413      	add	r3, r2
 8006d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d5e:	d921      	bls.n	8006da4 <USB_EPStartXfer+0xc40>
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <USB_EPStartXfer+0xc1c>
 8006d76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	029b      	lsls	r3, r3, #10
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4313      	orrs	r3, r2
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da0:	801a      	strh	r2, [r3, #0]
 8006da2:	e05c      	b.n	8006e5e <USB_EPStartXfer+0xcfa>
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <USB_EPStartXfer+0xc5e>
 8006dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e04d      	b.n	8006e5e <USB_EPStartXfer+0xcfa>
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <USB_EPStartXfer+0xc7e>
 8006dd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	029b      	lsls	r3, r3, #10
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	e030      	b.n	8006e5e <USB_EPStartXfer+0xcfa>
 8006dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	785b      	ldrb	r3, [r3, #1]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d128      	bne.n	8006e5e <USB_EPStartXfer+0xcfa>
 8006e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e30:	4413      	add	r3, r2
 8006e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	011a      	lsls	r2, r3, #4
 8006e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e48:	4413      	add	r3, r2
 8006e4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	891b      	ldrh	r3, [r3, #8]
 8006e6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6959      	ldr	r1, [r3, #20]
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e84:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e88:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e8c:	6800      	ldr	r0, [r0, #0]
 8006e8e:	f000 fe58 	bl	8007b42 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb8:	817b      	strh	r3, [r7, #10]
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	f083 0310 	eor.w	r3, r3, #16
 8006ec0:	817b      	strh	r3, [r7, #10]
 8006ec2:	897b      	ldrh	r3, [r7, #10]
 8006ec4:	f083 0320 	eor.w	r3, r3, #32
 8006ec8:	817b      	strh	r3, [r7, #10]
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	897b      	ldrh	r3, [r7, #10]
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
 8006efa:	f000 bcde 	b.w	80078ba <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	7b1b      	ldrb	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 80bb 	bne.w	8007086 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d917      	bls.n	8006f5c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	619a      	str	r2, [r3, #24]
 8006f5a:	e00e      	b.n	8006f7a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	011a      	lsls	r2, r3, #4
 8006fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fda:	d924      	bls.n	8007026 <USB_EPStartXfer+0xec2>
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <USB_EPStartXfer+0xe98>
 8006ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007008:	b29b      	uxth	r3, r3
 800700a:	029b      	lsls	r3, r3, #10
 800700c:	b29b      	uxth	r3, r3
 800700e:	4313      	orrs	r3, r2
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	f000 bc10 	b.w	8007846 <USB_EPStartXfer+0x16e2>
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10c      	bne.n	8007048 <USB_EPStartXfer+0xee4>
 800702e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e3fe      	b.n	8007846 <USB_EPStartXfer+0x16e2>
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	085b      	lsrs	r3, r3, #1
 800704e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <USB_EPStartXfer+0xf04>
 800705e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007062:	3301      	adds	r3, #1
 8007064:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29a      	uxth	r2, r3
 8007070:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007074:	b29b      	uxth	r3, r3
 8007076:	029b      	lsls	r3, r3, #10
 8007078:	b29b      	uxth	r3, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e3df      	b.n	8007846 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	78db      	ldrb	r3, [r3, #3]
 8007092:	2b02      	cmp	r3, #2
 8007094:	f040 8218 	bne.w	80074c8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 809d 	bne.w	80071e4 <USB_EPStartXfer+0x1080>
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ce:	4413      	add	r3, r2
 80070d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	011a      	lsls	r2, r3, #4
 80070e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e6:	4413      	add	r3, r2
 80070e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b3e      	cmp	r3, #62	@ 0x3e
 8007112:	d92b      	bls.n	800716c <USB_EPStartXfer+0x1008>
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <USB_EPStartXfer+0xfe0>
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713e:	3b01      	subs	r3, #1
 8007140:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007150:	b29b      	uxth	r3, r3
 8007152:	029b      	lsls	r3, r3, #10
 8007154:	b29b      	uxth	r3, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	b29b      	uxth	r3, r3
 800715a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007162:	b29a      	uxth	r2, r3
 8007164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e070      	b.n	800724e <USB_EPStartXfer+0x10ea>
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10c      	bne.n	8007196 <USB_EPStartXfer+0x1032>
 800717c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e05b      	b.n	800724e <USB_EPStartXfer+0x10ea>
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <USB_EPStartXfer+0x1062>
 80071bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c0:	3301      	adds	r3, #1
 80071c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	029b      	lsls	r3, r3, #10
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e034      	b.n	800724e <USB_EPStartXfer+0x10ea>
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d12c      	bne.n	800724e <USB_EPStartXfer+0x10ea>
 80071f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007210:	b29b      	uxth	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007218:	4413      	add	r3, r2
 800721a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800721e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	011a      	lsls	r2, r3, #4
 800722c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007230:	4413      	add	r3, r2
 8007232:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f040 809d 	bne.w	80073a8 <USB_EPStartXfer+0x1244>
 800726e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007292:	4413      	add	r3, r2
 8007294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	011a      	lsls	r2, r3, #4
 80072a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80072d6:	d92b      	bls.n	8007330 <USB_EPStartXfer+0x11cc>
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <USB_EPStartXfer+0x11a4>
 80072fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007302:	3b01      	subs	r3, #1
 8007304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29b      	uxth	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b29b      	uxth	r3, r3
 800731e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e069      	b.n	8007404 <USB_EPStartXfer+0x12a0>
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <USB_EPStartXfer+0x11f6>
 8007340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e054      	b.n	8007404 <USB_EPStartXfer+0x12a0>
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <USB_EPStartXfer+0x1226>
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	3301      	adds	r3, #1
 8007386:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800738a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007396:	b29b      	uxth	r3, r3
 8007398:	029b      	lsls	r3, r3, #10
 800739a:	b29b      	uxth	r3, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e02d      	b.n	8007404 <USB_EPStartXfer+0x12a0>
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d125      	bne.n	8007404 <USB_EPStartXfer+0x12a0>
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073ce:	4413      	add	r3, r2
 80073d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	011a      	lsls	r2, r3, #4
 80073e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007402:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8218 	beq.w	8007846 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007436:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800743a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <USB_EPStartXfer+0x12ea>
 8007442:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10d      	bne.n	800746a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800744e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 81f5 	bne.w	8007846 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800745c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 81ee 	bne.w	8007846 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800748c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007490:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	441a      	add	r2, r3
 80074ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	8013      	strh	r3, [r2, #0]
 80074c6:	e1be      	b.n	8007846 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	78db      	ldrb	r3, [r3, #3]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	f040 81b4 	bne.w	8007842 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d917      	bls.n	8007526 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	619a      	str	r2, [r3, #24]
 8007524:	e00e      	b.n	8007544 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2200      	movs	r2, #0
 8007542:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8085 	bne.w	8007660 <USB_EPStartXfer+0x14fc>
 8007556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007572:	b29b      	uxth	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800757a:	4413      	add	r3, r2
 800757c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	011a      	lsls	r2, r3, #4
 800758e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007592:	4413      	add	r3, r2
 8007594:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800759c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80075b6:	d923      	bls.n	8007600 <USB_EPStartXfer+0x149c>
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <USB_EPStartXfer+0x1474>
 80075ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	029b      	lsls	r3, r3, #10
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e060      	b.n	80076c2 <USB_EPStartXfer+0x155e>
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10c      	bne.n	8007622 <USB_EPStartXfer+0x14be>
 8007608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e04f      	b.n	80076c2 <USB_EPStartXfer+0x155e>
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800762c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <USB_EPStartXfer+0x14de>
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763c:	3301      	adds	r3, #1
 800763e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29a      	uxth	r2, r3
 800764a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800764e:	b29b      	uxth	r3, r3
 8007650:	029b      	lsls	r3, r3, #10
 8007652:	b29b      	uxth	r3, r3
 8007654:	4313      	orrs	r3, r2
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e030      	b.n	80076c2 <USB_EPStartXfer+0x155e>
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d128      	bne.n	80076c2 <USB_EPStartXfer+0x155e>
 8007670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800767e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768c:	b29b      	uxth	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007694:	4413      	add	r3, r2
 8007696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	011a      	lsls	r2, r3, #4
 80076a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8085 	bne.w	80077ec <USB_EPStartXfer+0x1688>
 80076e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007706:	4413      	add	r3, r2
 8007708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	011a      	lsls	r2, r3, #4
 800771a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800771e:	4413      	add	r3, r2
 8007720:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007734:	b29a      	uxth	r2, r3
 8007736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800773a:	801a      	strh	r2, [r3, #0]
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007740:	2b3e      	cmp	r3, #62	@ 0x3e
 8007742:	d923      	bls.n	800778c <USB_EPStartXfer+0x1628>
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USB_EPStartXfer+0x1600>
 800775a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800775e:	3b01      	subs	r3, #1
 8007760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007764:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29a      	uxth	r2, r3
 800776c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007770:	b29b      	uxth	r3, r3
 8007772:	029b      	lsls	r3, r3, #10
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29b      	uxth	r3, r3
 800777a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800777e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007782:	b29a      	uxth	r2, r3
 8007784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	e05c      	b.n	8007846 <USB_EPStartXfer+0x16e2>
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10c      	bne.n	80077ae <USB_EPStartXfer+0x164a>
 8007794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e04b      	b.n	8007846 <USB_EPStartXfer+0x16e2>
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USB_EPStartXfer+0x166a>
 80077c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077c8:	3301      	adds	r3, #1
 80077ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077da:	b29b      	uxth	r3, r3
 80077dc:	029b      	lsls	r3, r3, #10
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e02c      	b.n	8007846 <USB_EPStartXfer+0x16e2>
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d124      	bne.n	8007846 <USB_EPStartXfer+0x16e2>
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007812:	4413      	add	r3, r2
 8007814:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	011a      	lsls	r2, r3, #4
 8007826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800782a:	4413      	add	r3, r2
 800782c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007838:	b29a      	uxth	r2, r3
 800783a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e001      	b.n	8007846 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e03a      	b.n	80078bc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800786c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007870:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007874:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007878:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800787c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007880:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007884:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	441a      	add	r2, r3
 80078a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d020      	beq.n	800791a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ee:	81bb      	strh	r3, [r7, #12]
 80078f0:	89bb      	ldrh	r3, [r7, #12]
 80078f2:	f083 0310 	eor.w	r3, r3, #16
 80078f6:	81bb      	strh	r3, [r7, #12]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	89bb      	ldrh	r3, [r7, #12]
 8007904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800790c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007914:	b29b      	uxth	r3, r3
 8007916:	8013      	strh	r3, [r2, #0]
 8007918:	e01f      	b.n	800795a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800792c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007930:	81fb      	strh	r3, [r7, #14]
 8007932:	89fb      	ldrh	r3, [r7, #14]
 8007934:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007938:	81fb      	strh	r3, [r7, #14]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	441a      	add	r2, r3
 8007944:	89fb      	ldrh	r3, [r7, #14]
 8007946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800794a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800794e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007956:	b29b      	uxth	r3, r3
 8007958:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr

08007966 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007966:	b480      	push	{r7}
 8007968:	b087      	sub	sp, #28
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	7b1b      	ldrb	r3, [r3, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 809d 	bne.w	8007ab4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04c      	beq.n	8007a1c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	823b      	strh	r3, [r7, #16]
 8007990:	8a3b      	ldrh	r3, [r7, #16]
 8007992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01b      	beq.n	80079d2 <USB_EPClearStall+0x6c>
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b0:	81fb      	strh	r3, [r7, #14]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	78db      	ldrb	r3, [r3, #3]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d06c      	beq.n	8007ab4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079f0:	81bb      	strh	r3, [r7, #12]
 80079f2:	89bb      	ldrh	r3, [r7, #12]
 80079f4:	f083 0320 	eor.w	r3, r3, #32
 80079f8:	81bb      	strh	r3, [r7, #12]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	441a      	add	r2, r3
 8007a04:	89bb      	ldrh	r3, [r7, #12]
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]
 8007a1a:	e04b      	b.n	8007ab4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	82fb      	strh	r3, [r7, #22]
 8007a2a:	8afb      	ldrh	r3, [r7, #22]
 8007a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01b      	beq.n	8007a6c <USB_EPClearStall+0x106>
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4a:	82bb      	strh	r3, [r7, #20]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	441a      	add	r2, r3
 8007a56:	8abb      	ldrh	r3, [r7, #20]
 8007a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a82:	827b      	strh	r3, [r7, #18]
 8007a84:	8a7b      	ldrh	r3, [r7, #18]
 8007a86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a8a:	827b      	strh	r3, [r7, #18]
 8007a8c:	8a7b      	ldrh	r3, [r7, #18]
 8007a8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a92:	827b      	strh	r3, [r7, #18]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	441a      	add	r2, r3
 8007a9e:	8a7b      	ldrh	r3, [r7, #18]
 8007aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2280      	movs	r2, #128	@ 0x80
 8007ad6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b20:	68fb      	ldr	r3, [r7, #12]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr

08007b42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b08b      	sub	sp, #44	@ 0x2c
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	461a      	mov	r2, r3
 8007b50:	460b      	mov	r3, r1
 8007b52:	80fb      	strh	r3, [r7, #6]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b58:	88bb      	ldrh	r3, [r7, #4]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b68:	88fb      	ldrh	r3, [r7, #6]
 8007b6a:	005a      	lsls	r2, r3, #1
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b74:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7a:	e01f      	b.n	8007bbc <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	3301      	adds	r3, #1
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	b21a      	sxth	r2, r3
 8007b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	b21b      	sxth	r3, r3
 8007b96:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	8a7a      	ldrh	r2, [r7, #18]
 8007b9c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	3302      	adds	r3, #2
 8007ba2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	3301      	adds	r3, #1
 8007bae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1dc      	bne.n	8007b7c <USB_WritePMA+0x3a>
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	372c      	adds	r7, #44	@ 0x2c
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bc80      	pop	{r7}
 8007bcc:	4770      	bx	lr

08007bce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b08b      	sub	sp, #44	@ 0x2c
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	461a      	mov	r2, r3
 8007bdc:	460b      	mov	r3, r1
 8007bde:	80fb      	strh	r3, [r7, #6]
 8007be0:	4613      	mov	r3, r2
 8007be2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007be4:	88bb      	ldrh	r3, [r7, #4]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	005a      	lsls	r2, r3, #1
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c06:	e01b      	b.n	8007c40 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	3302      	adds	r3, #2
 8007c14:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	3301      	adds	r3, #1
 8007c22:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3301      	adds	r3, #1
 8007c32:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	3302      	adds	r3, #2
 8007c38:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e0      	bne.n	8007c08 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c46:	88bb      	ldrh	r3, [r7, #4]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	701a      	strb	r2, [r3, #0]
  }
}
 8007c62:	bf00      	nop
 8007c64:	372c      	adds	r7, #44	@ 0x2c
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7c1b      	ldrb	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d115      	bne.n	8007cb0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c88:	2202      	movs	r2, #2
 8007c8a:	2181      	movs	r1, #129	@ 0x81
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 fe8e 	bl	80099ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fe84 	bl	80099ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007cae:	e012      	b.n	8007cd6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cb0:	2340      	movs	r3, #64	@ 0x40
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	2181      	movs	r1, #129	@ 0x81
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fe79 	bl	80099ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cc2:	2340      	movs	r3, #64	@ 0x40
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fe70 	bl	80099ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	2203      	movs	r2, #3
 8007cda:	2182      	movs	r1, #130	@ 0x82
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fe66 	bl	80099ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ce8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007cec:	f001 ff86 	bl	8009bfc <USBD_static_malloc>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d02:	2301      	movs	r3, #1
 8007d04:	73fb      	strb	r3, [r7, #15]
 8007d06:	e026      	b.n	8007d56 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d0e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 ff25 	bl	8009b8e <USBD_LL_PrepareReceive>
 8007d44:	e007      	b.n	8007d56 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d4c:	2340      	movs	r3, #64	@ 0x40
 8007d4e:	2101      	movs	r1, #1
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 ff1c 	bl	8009b8e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d70:	2181      	movs	r1, #129	@ 0x81
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fe41 	bl	80099fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fe3a 	bl	80099fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d8e:	2182      	movs	r1, #130	@ 0x82
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fe32 	bl	80099fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00e      	beq.n	8007dc4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 ff2c 	bl	8009c14 <USBD_static_free>
    pdev->pClassData = NULL;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dde:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d039      	beq.n	8007e6c <USBD_CDC_Setup+0x9e>
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d17f      	bne.n	8007efc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	88db      	ldrh	r3, [r3, #6]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d029      	beq.n	8007e58 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	da11      	bge.n	8007e32 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	88d2      	ldrh	r2, [r2, #6]
 8007e20:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e22:	6939      	ldr	r1, [r7, #16]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	88db      	ldrh	r3, [r3, #6]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fa06 	bl	800923c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e30:	e06b      	b.n	8007f0a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	785a      	ldrb	r2, [r3, #1]
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	88db      	ldrh	r3, [r3, #6]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e48:	6939      	ldr	r1, [r7, #16]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	88db      	ldrh	r3, [r3, #6]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fa21 	bl	8009298 <USBD_CtlPrepareRx>
      break;
 8007e56:	e058      	b.n	8007f0a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	7850      	ldrb	r0, [r2, #1]
 8007e64:	2200      	movs	r2, #0
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	4798      	blx	r3
      break;
 8007e6a:	e04e      	b.n	8007f0a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b0b      	cmp	r3, #11
 8007e72:	d02e      	beq.n	8007ed2 <USBD_CDC_Setup+0x104>
 8007e74:	2b0b      	cmp	r3, #11
 8007e76:	dc38      	bgt.n	8007eea <USBD_CDC_Setup+0x11c>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <USBD_CDC_Setup+0xb4>
 8007e7c:	2b0a      	cmp	r3, #10
 8007e7e:	d014      	beq.n	8007eaa <USBD_CDC_Setup+0xdc>
 8007e80:	e033      	b.n	8007eea <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d107      	bne.n	8007e9c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e8c:	f107 030c 	add.w	r3, r7, #12
 8007e90:	2202      	movs	r2, #2
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f9d1 	bl	800923c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e9a:	e02e      	b.n	8007efa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f962 	bl	8009168 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea8:	e027      	b.n	8007efa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d107      	bne.n	8007ec4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eb4:	f107 030f 	add.w	r3, r7, #15
 8007eb8:	2201      	movs	r2, #1
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f9bd 	bl	800923c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ec2:	e01a      	b.n	8007efa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 f94e 	bl	8009168 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed0:	e013      	b.n	8007efa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d00d      	beq.n	8007ef8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 f942 	bl	8009168 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ee8:	e006      	b.n	8007ef8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f93b 	bl	8009168 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ef6:	e000      	b.n	8007efa <USBD_CDC_Setup+0x12c>
          break;
 8007ef8:	bf00      	nop
      }
      break;
 8007efa:	e006      	b.n	8007f0a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 f932 	bl	8009168 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f04:	2302      	movs	r3, #2
 8007f06:	75fb      	strb	r3, [r7, #23]
      break;
 8007f08:	bf00      	nop
  }

  return ret;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f26:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f2e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03a      	beq.n	8007fb0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f3a:	78fa      	ldrb	r2, [r7, #3]
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	440b      	add	r3, r1
 8007f48:	331c      	adds	r3, #28
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d029      	beq.n	8007fa4 <USBD_CDC_DataIn+0x90>
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	331c      	adds	r3, #28
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	78f9      	ldrb	r1, [r7, #3]
 8007f64:	68b8      	ldr	r0, [r7, #8]
 8007f66:	460b      	mov	r3, r1
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4403      	add	r3, r0
 8007f70:	3320      	adds	r3, #32
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f78:	fb01 f303 	mul.w	r3, r1, r3
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d110      	bne.n	8007fa4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f82:	78fa      	ldrb	r2, [r7, #3]
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	331c      	adds	r3, #28
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f96:	78f9      	ldrb	r1, [r7, #3]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fdd3 	bl	8009b48 <USBD_LL_Transmit>
 8007fa2:	e003      	b.n	8007fac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e000      	b.n	8007fb2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007fb0:	2302      	movs	r3, #2
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fdfe 	bl	8009bd4 <USBD_LL_GetRxDataSize>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ffe:	4611      	mov	r1, r2
 8008000:	4798      	blx	r3

    return USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	e000      	b.n	8008008 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008006:	2302      	movs	r3, #2
  }
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800801e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <USBD_CDC_EP0_RxReady+0x44>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008030:	2bff      	cmp	r3, #255	@ 0xff
 8008032:	d00f      	beq.n	8008054 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008042:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800804a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	22ff      	movs	r2, #255	@ 0xff
 8008050:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2243      	movs	r2, #67	@ 0x43
 800806c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800806e:	4b03      	ldr	r3, [pc, #12]	@ (800807c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	20000094 	.word	0x20000094

08008080 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2243      	movs	r2, #67	@ 0x43
 800808c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800808e:	4b03      	ldr	r3, [pc, #12]	@ (800809c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000050 	.word	0x20000050

080080a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2243      	movs	r2, #67	@ 0x43
 80080ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	200000d8 	.word	0x200000d8

080080c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	220a      	movs	r2, #10
 80080cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080ce:	4b03      	ldr	r3, [pc, #12]	@ (80080dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	2000000c 	.word	0x2000000c

080080e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080ea:	2302      	movs	r3, #2
 80080ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr

0800810c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008120:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr

0800813e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800814e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01c      	beq.n	80081b8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008184:	2b00      	cmp	r3, #0
 8008186:	d115      	bne.n	80081b4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2181      	movs	r1, #129	@ 0x81
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fccc 	bl	8009b48 <USBD_LL_Transmit>

      return USBD_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e002      	b.n	80081ba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d017      	beq.n	800820c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7c1b      	ldrb	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081ee:	2101      	movs	r1, #1
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fccc 	bl	8009b8e <USBD_LL_PrepareReceive>
 80081f6:	e007      	b.n	8008208 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081fe:	2340      	movs	r3, #64	@ 0x40
 8008200:	2101      	movs	r1, #1
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fcc3 	bl	8009b8e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	e000      	b.n	800820e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800820c:	2302      	movs	r3, #2
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	4613      	mov	r3, r2
 8008222:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800822a:	2302      	movs	r3, #2
 800822c:	e01a      	b.n	8008264 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	79fa      	ldrb	r2, [r7, #7]
 800825a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f001 fb31 	bl	80098c4 <USBD_LL_Init>

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
 800828c:	e001      	b.n	8008292 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800828e:	2302      	movs	r3, #2
 8008290:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fb66 	bl	8009978 <USBD_LL_Start>

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082d6:	2302      	movs	r3, #2
 80082d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	78fa      	ldrb	r2, [r7, #3]
 80082ee:	4611      	mov	r1, r2
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	4611      	mov	r1, r2
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fed8 	bl	80090f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008354:	461a      	mov	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008362:	f003 031f 	and.w	r3, r3, #31
 8008366:	2b02      	cmp	r3, #2
 8008368:	d016      	beq.n	8008398 <USBD_LL_SetupStage+0x6a>
 800836a:	2b02      	cmp	r3, #2
 800836c:	d81c      	bhi.n	80083a8 <USBD_LL_SetupStage+0x7a>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <USBD_LL_SetupStage+0x4a>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d008      	beq.n	8008388 <USBD_LL_SetupStage+0x5a>
 8008376:	e017      	b.n	80083a8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9cb 	bl	800871c <USBD_StdDevReq>
      break;
 8008386:	e01a      	b.n	80083be <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa2d 	bl	80087f0 <USBD_StdItfReq>
      break;
 8008396:	e012      	b.n	80083be <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fa6d 	bl	8008880 <USBD_StdEPReq>
      break;
 80083a6:	e00a      	b.n	80083be <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80083ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fb3e 	bl	8009a38 <USBD_LL_StallEP>
      break;
 80083bc:	bf00      	nop
  }

  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	460b      	mov	r3, r1
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d14b      	bne.n	8008474 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d134      	bne.n	8008458 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d919      	bls.n	800842e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008410:	429a      	cmp	r2, r3
 8008412:	d203      	bcs.n	800841c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008418:	b29b      	uxth	r3, r3
 800841a:	e002      	b.n	8008422 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008420:	b29b      	uxth	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 ff54 	bl	80092d4 <USBD_CtlContinueRx>
 800842c:	e038      	b.n	80084a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008440:	2b03      	cmp	r3, #3
 8008442:	d105      	bne.n	8008450 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 ff51 	bl	80092f8 <USBD_CtlSendStatus>
 8008456:	e023      	b.n	80084a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800845e:	2b05      	cmp	r3, #5
 8008460:	d11e      	bne.n	80084a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800846a:	2100      	movs	r1, #0
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f001 fae3 	bl	8009a38 <USBD_LL_StallEP>
 8008472:	e015      	b.n	80084a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00d      	beq.n	800849c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008486:	2b03      	cmp	r3, #3
 8008488:	d108      	bne.n	800849c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	7afa      	ldrb	r2, [r7, #11]
 8008494:	4611      	mov	r1, r2
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	4798      	blx	r3
 800849a:	e001      	b.n	80084a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800849c:	2302      	movs	r3, #2
 800849e:	e000      	b.n	80084a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	460b      	mov	r3, r1
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084b8:	7afb      	ldrb	r3, [r7, #11]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d17f      	bne.n	80085be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3314      	adds	r3, #20
 80084c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d15c      	bne.n	8008588 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d915      	bls.n	8008506 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 febe 	bl	8009274 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084f8:	2300      	movs	r3, #0
 80084fa:	2200      	movs	r2, #0
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 fb45 	bl	8009b8e <USBD_LL_PrepareReceive>
 8008504:	e04e      	b.n	80085a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	6912      	ldr	r2, [r2, #16]
 800850e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008512:	fb01 f202 	mul.w	r2, r1, r2
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d11c      	bne.n	8008556 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008524:	429a      	cmp	r2, r3
 8008526:	d316      	bcc.n	8008556 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008532:	429a      	cmp	r2, r3
 8008534:	d20f      	bcs.n	8008556 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 fe9a 	bl	8009274 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008548:	2300      	movs	r3, #0
 800854a:	2200      	movs	r2, #0
 800854c:	2100      	movs	r1, #0
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f001 fb1d 	bl	8009b8e <USBD_LL_PrepareReceive>
 8008554:	e026      	b.n	80085a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008568:	2b03      	cmp	r3, #3
 800856a:	d105      	bne.n	8008578 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008578:	2180      	movs	r1, #128	@ 0x80
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f001 fa5c 	bl	8009a38 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 fecc 	bl	800931e <USBD_CtlReceiveStatus>
 8008586:	e00d      	b.n	80085a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800858e:	2b04      	cmp	r3, #4
 8008590:	d004      	beq.n	800859c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008598:	2b00      	cmp	r3, #0
 800859a:	d103      	bne.n	80085a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800859c:	2180      	movs	r1, #128	@ 0x80
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f001 fa4a 	bl	8009a38 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d11d      	bne.n	80085ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fe81 	bl	80082b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085bc:	e015      	b.n	80085ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d108      	bne.n	80085e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	7afa      	ldrb	r2, [r7, #11]
 80085de:	4611      	mov	r1, r2
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	4798      	blx	r3
 80085e4:	e001      	b.n	80085ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085e6:	2302      	movs	r3, #2
 80085e8:	e000      	b.n	80085ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085fc:	2340      	movs	r3, #64	@ 0x40
 80085fe:	2200      	movs	r2, #0
 8008600:	2100      	movs	r1, #0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 f9d3 	bl	80099ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2240      	movs	r2, #64	@ 0x40
 8008614:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008618:	2340      	movs	r3, #64	@ 0x40
 800861a:	2200      	movs	r2, #0
 800861c:	2180      	movs	r1, #128	@ 0x80
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f001 f9c5 	bl	80099ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2240      	movs	r2, #64	@ 0x40
 800862e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6852      	ldr	r2, [r2, #4]
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	4611      	mov	r1, r2
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
  }

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr

08008694 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2204      	movs	r2, #4
 80086ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bc80      	pop	{r7}
 80086ba:	4770      	bx	lr

080086bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d105      	bne.n	80086da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d10b      	bne.n	8008710 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d005      	beq.n	8008742 <USBD_StdDevReq+0x26>
 8008736:	2b40      	cmp	r3, #64	@ 0x40
 8008738:	d84f      	bhi.n	80087da <USBD_StdDevReq+0xbe>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <USBD_StdDevReq+0x36>
 800873e:	2b20      	cmp	r3, #32
 8008740:	d14b      	bne.n	80087da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
      break;
 8008750:	e048      	b.n	80087e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	2b09      	cmp	r3, #9
 8008758:	d839      	bhi.n	80087ce <USBD_StdDevReq+0xb2>
 800875a:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <USBD_StdDevReq+0x44>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	080087b1 	.word	0x080087b1
 8008764:	080087c5 	.word	0x080087c5
 8008768:	080087cf 	.word	0x080087cf
 800876c:	080087bb 	.word	0x080087bb
 8008770:	080087cf 	.word	0x080087cf
 8008774:	08008793 	.word	0x08008793
 8008778:	08008789 	.word	0x08008789
 800877c:	080087cf 	.word	0x080087cf
 8008780:	080087a7 	.word	0x080087a7
 8008784:	0800879d 	.word	0x0800879d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9dc 	bl	8008b48 <USBD_GetDescriptor>
          break;
 8008790:	e022      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fb3f 	bl	8008e18 <USBD_SetAddress>
          break;
 800879a:	e01d      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fb7e 	bl	8008ea0 <USBD_SetConfig>
          break;
 80087a4:	e018      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fc07 	bl	8008fbc <USBD_GetConfig>
          break;
 80087ae:	e013      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fc37 	bl	8009026 <USBD_GetStatus>
          break;
 80087b8:	e00e      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fc65 	bl	800908c <USBD_SetFeature>
          break;
 80087c2:	e009      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fc74 	bl	80090b4 <USBD_ClrFeature>
          break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fcc9 	bl	8009168 <USBD_CtlError>
          break;
 80087d6:	bf00      	nop
      }
      break;
 80087d8:	e004      	b.n	80087e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fcc3 	bl	8009168 <USBD_CtlError>
      break;
 80087e2:	bf00      	nop
  }

  return ret;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop

080087f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008806:	2b40      	cmp	r3, #64	@ 0x40
 8008808:	d005      	beq.n	8008816 <USBD_StdItfReq+0x26>
 800880a:	2b40      	cmp	r3, #64	@ 0x40
 800880c:	d82e      	bhi.n	800886c <USBD_StdItfReq+0x7c>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <USBD_StdItfReq+0x26>
 8008812:	2b20      	cmp	r3, #32
 8008814:	d12a      	bne.n	800886c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800881c:	3b01      	subs	r3, #1
 800881e:	2b02      	cmp	r3, #2
 8008820:	d81d      	bhi.n	800885e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	889b      	ldrh	r3, [r3, #4]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b01      	cmp	r3, #1
 800882a:	d813      	bhi.n	8008854 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	4798      	blx	r3
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d110      	bne.n	8008868 <USBD_StdItfReq+0x78>
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10d      	bne.n	8008868 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fd53 	bl	80092f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008852:	e009      	b.n	8008868 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fc86 	bl	8009168 <USBD_CtlError>
          break;
 800885c:	e004      	b.n	8008868 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fc81 	bl	8009168 <USBD_CtlError>
          break;
 8008866:	e000      	b.n	800886a <USBD_StdItfReq+0x7a>
          break;
 8008868:	bf00      	nop
      }
      break;
 800886a:	e004      	b.n	8008876 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fc7a 	bl	8009168 <USBD_CtlError>
      break;
 8008874:	bf00      	nop
  }

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	889b      	ldrh	r3, [r3, #4]
 8008892:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800889c:	2b40      	cmp	r3, #64	@ 0x40
 800889e:	d007      	beq.n	80088b0 <USBD_StdEPReq+0x30>
 80088a0:	2b40      	cmp	r3, #64	@ 0x40
 80088a2:	f200 8146 	bhi.w	8008b32 <USBD_StdEPReq+0x2b2>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <USBD_StdEPReq+0x40>
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	f040 8141 	bne.w	8008b32 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
      break;
 80088be:	e13d      	b.n	8008b3c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d10a      	bne.n	80088e2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	e12d      	b.n	8008b3e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d007      	beq.n	80088fa <USBD_StdEPReq+0x7a>
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	f300 811b 	bgt.w	8008b26 <USBD_StdEPReq+0x2a6>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d072      	beq.n	80089da <USBD_StdEPReq+0x15a>
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d03a      	beq.n	800896e <USBD_StdEPReq+0xee>
 80088f8:	e115      	b.n	8008b26 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008900:	2b02      	cmp	r3, #2
 8008902:	d002      	beq.n	800890a <USBD_StdEPReq+0x8a>
 8008904:	2b03      	cmp	r3, #3
 8008906:	d015      	beq.n	8008934 <USBD_StdEPReq+0xb4>
 8008908:	e02b      	b.n	8008962 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00c      	beq.n	800892a <USBD_StdEPReq+0xaa>
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b80      	cmp	r3, #128	@ 0x80
 8008914:	d009      	beq.n	800892a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f88c 	bl	8009a38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008920:	2180      	movs	r1, #128	@ 0x80
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 f888 	bl	8009a38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008928:	e020      	b.n	800896c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fc1b 	bl	8009168 <USBD_CtlError>
              break;
 8008932:	e01b      	b.n	800896c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	885b      	ldrh	r3, [r3, #2]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10e      	bne.n	800895a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <USBD_StdEPReq+0xda>
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b80      	cmp	r3, #128	@ 0x80
 8008946:	d008      	beq.n	800895a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	88db      	ldrh	r3, [r3, #6]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d104      	bne.n	800895a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f86f 	bl	8009a38 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fccc 	bl	80092f8 <USBD_CtlSendStatus>

              break;
 8008960:	e004      	b.n	800896c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fbff 	bl	8009168 <USBD_CtlError>
              break;
 800896a:	bf00      	nop
          }
          break;
 800896c:	e0e0      	b.n	8008b30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008974:	2b02      	cmp	r3, #2
 8008976:	d002      	beq.n	800897e <USBD_StdEPReq+0xfe>
 8008978:	2b03      	cmp	r3, #3
 800897a:	d015      	beq.n	80089a8 <USBD_StdEPReq+0x128>
 800897c:	e026      	b.n	80089cc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00c      	beq.n	800899e <USBD_StdEPReq+0x11e>
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b80      	cmp	r3, #128	@ 0x80
 8008988:	d009      	beq.n	800899e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 f852 	bl	8009a38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008994:	2180      	movs	r1, #128	@ 0x80
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 f84e 	bl	8009a38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800899c:	e01c      	b.n	80089d8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fbe1 	bl	8009168 <USBD_CtlError>
              break;
 80089a6:	e017      	b.n	80089d8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	885b      	ldrh	r3, [r3, #2]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d112      	bne.n	80089d6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d004      	beq.n	80089c4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 f859 	bl	8009a76 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fc97 	bl	80092f8 <USBD_CtlSendStatus>
              }
              break;
 80089ca:	e004      	b.n	80089d6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fbca 	bl	8009168 <USBD_CtlError>
              break;
 80089d4:	e000      	b.n	80089d8 <USBD_StdEPReq+0x158>
              break;
 80089d6:	bf00      	nop
          }
          break;
 80089d8:	e0aa      	b.n	8008b30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d002      	beq.n	80089ea <USBD_StdEPReq+0x16a>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d032      	beq.n	8008a4e <USBD_StdEPReq+0x1ce>
 80089e8:	e097      	b.n	8008b1a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <USBD_StdEPReq+0x180>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b80      	cmp	r3, #128	@ 0x80
 80089f4:	d004      	beq.n	8008a00 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fbb5 	bl	8009168 <USBD_CtlError>
                break;
 80089fe:	e091      	b.n	8008b24 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da0b      	bge.n	8008a20 <USBD_StdEPReq+0x1a0>
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	3310      	adds	r3, #16
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	e00b      	b.n	8008a38 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4413      	add	r3, r2
 8008a36:	3304      	adds	r3, #4
 8008a38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2202      	movs	r2, #2
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fbf8 	bl	800923c <USBD_CtlSendData>
              break;
 8008a4c:	e06a      	b.n	8008b24 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	da11      	bge.n	8008a7a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	3318      	adds	r3, #24
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d117      	bne.n	8008aa0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fb78 	bl	8009168 <USBD_CtlError>
                  break;
 8008a78:	e054      	b.n	8008b24 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fb65 	bl	8009168 <USBD_CtlError>
                  break;
 8008a9e:	e041      	b.n	8008b24 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0b      	bge.n	8008ac0 <USBD_StdEPReq+0x240>
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	3310      	adds	r3, #16
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	4413      	add	r3, r2
 8008abc:	3304      	adds	r3, #4
 8008abe:	e00b      	b.n	8008ad8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <USBD_StdEPReq+0x266>
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	2b80      	cmp	r3, #128	@ 0x80
 8008ae4:	d103      	bne.n	8008aee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e00e      	b.n	8008b0c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 ffde 	bl	8009ab4 <USBD_LL_IsStallEP>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2201      	movs	r2, #1
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	e002      	b.n	8008b0c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fb92 	bl	800923c <USBD_CtlSendData>
              break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb23 	bl	8009168 <USBD_CtlError>
              break;
 8008b22:	bf00      	nop
          }
          break;
 8008b24:	e004      	b.n	8008b30 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fb1d 	bl	8009168 <USBD_CtlError>
          break;
 8008b2e:	bf00      	nop
      }
      break;
 8008b30:	e004      	b.n	8008b3c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fb17 	bl	8009168 <USBD_CtlError>
      break;
 8008b3a:	bf00      	nop
  }

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	2b06      	cmp	r3, #6
 8008b6a:	f200 8128 	bhi.w	8008dbe <USBD_GetDescriptor+0x276>
 8008b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <USBD_GetDescriptor+0x2c>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b91 	.word	0x08008b91
 8008b78:	08008ba9 	.word	0x08008ba9
 8008b7c:	08008be9 	.word	0x08008be9
 8008b80:	08008dbf 	.word	0x08008dbf
 8008b84:	08008dbf 	.word	0x08008dbf
 8008b88:	08008d5f 	.word	0x08008d5f
 8008b8c:	08008d8b 	.word	0x08008d8b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
      break;
 8008ba6:	e112      	b.n	8008dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7c1b      	ldrb	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10d      	bne.n	8008bcc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb8:	f107 0208 	add.w	r2, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bca:	e100      	b.n	8008dce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd4:	f107 0208 	add.w	r2, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
      break;
 8008be6:	e0f2      	b.n	8008dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	885b      	ldrh	r3, [r3, #2]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	f200 80ac 	bhi.w	8008d4c <USBD_GetDescriptor+0x204>
 8008bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <USBD_GetDescriptor+0xb4>)
 8008bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c49 	.word	0x08008c49
 8008c04:	08008c7d 	.word	0x08008c7d
 8008c08:	08008cb1 	.word	0x08008cb1
 8008c0c:	08008ce5 	.word	0x08008ce5
 8008c10:	08008d19 	.word	0x08008d19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7c12      	ldrb	r2, [r2, #16]
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c36:	e091      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa94 	bl	8009168 <USBD_CtlError>
            err++;
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	3301      	adds	r3, #1
 8008c44:	72fb      	strb	r3, [r7, #11]
          break;
 8008c46:	e089      	b.n	8008d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c6a:	e077      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa7a 	bl	8009168 <USBD_CtlError>
            err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
          break;
 8008c7a:	e06f      	b.n	8008d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9e:	e05d      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa60 	bl	8009168 <USBD_CtlError>
            err++;
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	3301      	adds	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
          break;
 8008cae:	e055      	b.n	8008d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cd2:	e043      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa46 	bl	8009168 <USBD_CtlError>
            err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ce2:	e03b      	b.n	8008d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d06:	e029      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa2c 	bl	8009168 <USBD_CtlError>
            err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
          break;
 8008d16:	e021      	b.n	8008d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3a:	e00f      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa12 	bl	8009168 <USBD_CtlError>
            err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4a:	e007      	b.n	8008d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa0a 	bl	8009168 <USBD_CtlError>
          err++;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	3301      	adds	r3, #1
 8008d58:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d5a:	e038      	b.n	8008dce <USBD_GetDescriptor+0x286>
 8008d5c:	e037      	b.n	8008dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7c1b      	ldrb	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d6e:	f107 0208 	add.w	r2, r7, #8
 8008d72:	4610      	mov	r0, r2
 8008d74:	4798      	blx	r3
 8008d76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d78:	e029      	b.n	8008dce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9f3 	bl	8009168 <USBD_CtlError>
        err++;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	3301      	adds	r3, #1
 8008d86:	72fb      	strb	r3, [r7, #11]
      break;
 8008d88:	e021      	b.n	8008dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7c1b      	ldrb	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10d      	bne.n	8008dae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	f107 0208 	add.w	r2, r7, #8
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4798      	blx	r3
 8008da2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	2207      	movs	r2, #7
 8008daa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dac:	e00f      	b.n	8008dce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9d9 	bl	8009168 <USBD_CtlError>
        err++;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	3301      	adds	r3, #1
 8008dba:	72fb      	strb	r3, [r7, #11]
      break;
 8008dbc:	e007      	b.n	8008dce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9d1 	bl	8009168 <USBD_CtlError>
      err++;
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	72fb      	strb	r3, [r7, #11]
      break;
 8008dcc:	bf00      	nop
  }

  if (err != 0U)
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11c      	bne.n	8008e0e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008dd4:	893b      	ldrh	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d011      	beq.n	8008dfe <USBD_GetDescriptor+0x2b6>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	88db      	ldrh	r3, [r3, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88da      	ldrh	r2, [r3, #6]
 8008de6:	893b      	ldrh	r3, [r7, #8]
 8008de8:	4293      	cmp	r3, r2
 8008dea:	bf28      	it	cs
 8008dec:	4613      	movcs	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008df2:	893b      	ldrh	r3, [r7, #8]
 8008df4:	461a      	mov	r2, r3
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fa1f 	bl	800923c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fa76 	bl	80092f8 <USBD_CtlSendStatus>
 8008e0c:	e000      	b.n	8008e10 <USBD_GetDescriptor+0x2c8>
    return;
 8008e0e:	bf00      	nop
    }
  }
}
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop

08008e18 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	889b      	ldrh	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d130      	bne.n	8008e8c <USBD_SetAddress+0x74>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	88db      	ldrh	r3, [r3, #6]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d12c      	bne.n	8008e8c <USBD_SetAddress+0x74>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	885b      	ldrh	r3, [r3, #2]
 8008e36:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e38:	d828      	bhi.n	8008e8c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	885b      	ldrh	r3, [r3, #2]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d104      	bne.n	8008e5a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f988 	bl	8009168 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e58:	e01d      	b.n	8008e96 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7bfa      	ldrb	r2, [r7, #15]
 8008e5e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fe4f 	bl	8009b0a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa43 	bl	80092f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e80:	e009      	b.n	8008e96 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8a:	e004      	b.n	8008e96 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f96a 	bl	8009168 <USBD_CtlError>
  }
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	885b      	ldrh	r3, [r3, #2]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	4b41      	ldr	r3, [pc, #260]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008eb4:	4b40      	ldr	r3, [pc, #256]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d904      	bls.n	8008ec6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f952 	bl	8009168 <USBD_CtlError>
 8008ec4:	e075      	b.n	8008fb2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d002      	beq.n	8008ed6 <USBD_SetConfig+0x36>
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d023      	beq.n	8008f1c <USBD_SetConfig+0x7c>
 8008ed4:	e062      	b.n	8008f9c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008ed6:	4b38      	ldr	r3, [pc, #224]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01a      	beq.n	8008f14 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ede:	4b36      	ldr	r3, [pc, #216]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2203      	movs	r2, #3
 8008eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ef0:	4b31      	ldr	r3, [pc, #196]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff f9e7 	bl	80082ca <USBD_SetClassConfig>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d104      	bne.n	8008f0c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f92f 	bl	8009168 <USBD_CtlError>
            return;
 8008f0a:	e052      	b.n	8008fb2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f9f3 	bl	80092f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f12:	e04e      	b.n	8008fb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f9ef 	bl	80092f8 <USBD_CtlSendStatus>
        break;
 8008f1a:	e04a      	b.n	8008fb2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f1c:	4b26      	ldr	r3, [pc, #152]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d112      	bne.n	8008f4a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008f2c:	4b22      	ldr	r3, [pc, #136]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f36:	4b20      	ldr	r3, [pc, #128]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff f9e3 	bl	8008308 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9d8 	bl	80092f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f48:	e033      	b.n	8008fb2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d01d      	beq.n	8008f94 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff f9d1 	bl	8008308 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f66:	4b14      	ldr	r3, [pc, #80]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f70:	4b11      	ldr	r3, [pc, #68]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff f9a7 	bl	80082ca <USBD_SetClassConfig>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d104      	bne.n	8008f8c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f8ef 	bl	8009168 <USBD_CtlError>
            return;
 8008f8a:	e012      	b.n	8008fb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f9b3 	bl	80092f8 <USBD_CtlSendStatus>
        break;
 8008f92:	e00e      	b.n	8008fb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9af 	bl	80092f8 <USBD_CtlSendStatus>
        break;
 8008f9a:	e00a      	b.n	8008fb2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f8e2 	bl	8009168 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008fa4:	4b04      	ldr	r3, [pc, #16]	@ (8008fb8 <USBD_SetConfig+0x118>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff f9ac 	bl	8008308 <USBD_ClrClassConfig>
        break;
 8008fb0:	bf00      	nop
    }
  }
}
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20001368 	.word	0x20001368

08008fbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	88db      	ldrh	r3, [r3, #6]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d004      	beq.n	8008fd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f8c9 	bl	8009168 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fd6:	e022      	b.n	800901e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	dc02      	bgt.n	8008fe8 <USBD_GetConfig+0x2c>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dc03      	bgt.n	8008fee <USBD_GetConfig+0x32>
 8008fe6:	e015      	b.n	8009014 <USBD_GetConfig+0x58>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d00b      	beq.n	8009004 <USBD_GetConfig+0x48>
 8008fec:	e012      	b.n	8009014 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3308      	adds	r3, #8
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f91d 	bl	800923c <USBD_CtlSendData>
        break;
 8009002:	e00c      	b.n	800901e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	2201      	movs	r2, #1
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f915 	bl	800923c <USBD_CtlSendData>
        break;
 8009012:	e004      	b.n	800901e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f8a6 	bl	8009168 <USBD_CtlError>
        break;
 800901c:	bf00      	nop
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009036:	3b01      	subs	r3, #1
 8009038:	2b02      	cmp	r3, #2
 800903a:	d81e      	bhi.n	800907a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	88db      	ldrh	r3, [r3, #6]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d004      	beq.n	800904e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f88e 	bl	8009168 <USBD_CtlError>
        break;
 800904c:	e01a      	b.n	8009084 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d005      	beq.n	800906a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f043 0202 	orr.w	r2, r3, #2
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	330c      	adds	r3, #12
 800906e:	2202      	movs	r2, #2
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f8e2 	bl	800923c <USBD_CtlSendData>
      break;
 8009078:	e004      	b.n	8009084 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f873 	bl	8009168 <USBD_CtlError>
      break;
 8009082:	bf00      	nop
  }
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d106      	bne.n	80090ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f926 	bl	80092f8 <USBD_CtlSendStatus>
  }
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c4:	3b01      	subs	r3, #1
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d80b      	bhi.n	80090e2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	885b      	ldrh	r3, [r3, #2]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d10c      	bne.n	80090ec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f90c 	bl	80092f8 <USBD_CtlSendStatus>
      }
      break;
 80090e0:	e004      	b.n	80090ec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f83f 	bl	8009168 <USBD_CtlError>
      break;
 80090ea:	e000      	b.n	80090ee <USBD_ClrFeature+0x3a>
      break;
 80090ec:	bf00      	nop
  }
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781a      	ldrb	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	785a      	ldrb	r2, [r3, #1]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	3302      	adds	r3, #2
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	3303      	adds	r3, #3
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	b29b      	uxth	r3, r3
 8009122:	4413      	add	r3, r2
 8009124:	b29a      	uxth	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	3304      	adds	r3, #4
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	3305      	adds	r3, #5
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	b29b      	uxth	r3, r3
 800913c:	4413      	add	r3, r2
 800913e:	b29a      	uxth	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	3306      	adds	r3, #6
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	3307      	adds	r3, #7
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	b29b      	uxth	r3, r3
 8009156:	4413      	add	r3, r2
 8009158:	b29a      	uxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	80da      	strh	r2, [r3, #6]

}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009172:	2180      	movs	r1, #128	@ 0x80
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fc5f 	bl	8009a38 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800917a:	2100      	movs	r1, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fc5b 	bl	8009a38 <USBD_LL_StallEP>
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d032      	beq.n	8009206 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 f834 	bl	800920e <USBD_GetLen>
 80091a6:	4603      	mov	r3, r0
 80091a8:	3301      	adds	r3, #1
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	75fa      	strb	r2, [r7, #23]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4413      	add	r3, r2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	75fa      	strb	r2, [r7, #23]
 80091cc:	461a      	mov	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	4413      	add	r3, r2
 80091d2:	2203      	movs	r2, #3
 80091d4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091d6:	e012      	b.n	80091fe <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	60fa      	str	r2, [r7, #12]
 80091de:	7dfa      	ldrb	r2, [r7, #23]
 80091e0:	1c51      	adds	r1, r2, #1
 80091e2:	75f9      	strb	r1, [r7, #23]
 80091e4:	4611      	mov	r1, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	440a      	add	r2, r1
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	75fa      	strb	r2, [r7, #23]
 80091f4:	461a      	mov	r2, r3
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	4413      	add	r3, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e8      	bne.n	80091d8 <USBD_GetString+0x4e>
    }
  }
}
 8009206:	bf00      	nop
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800921a:	e005      	b.n	8009228 <USBD_GetLen+0x1a>
  {
    len++;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	3301      	adds	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3301      	adds	r3, #1
 8009226:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1f5      	bne.n	800921c <USBD_GetLen+0xe>
  }

  return len;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2202      	movs	r2, #2
 800924e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009258:	88fa      	ldrh	r2, [r7, #6]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	2100      	movs	r1, #0
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fc6f 	bl	8009b48 <USBD_LL_Transmit>

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	2100      	movs	r1, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fc5d 	bl	8009b48 <USBD_LL_Transmit>

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2203      	movs	r2, #3
 80092aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80092ae:	88fa      	ldrh	r2, [r7, #6]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80092b6:	88fa      	ldrh	r2, [r7, #6]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092be:	88fb      	ldrh	r3, [r7, #6]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	2100      	movs	r1, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fc62 	bl	8009b8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fc50 	bl	8009b8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2204      	movs	r2, #4
 8009304:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009308:	2300      	movs	r3, #0
 800930a:	2200      	movs	r2, #0
 800930c:	2100      	movs	r1, #0
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fc1a 	bl	8009b48 <USBD_LL_Transmit>

  return USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2205      	movs	r2, #5
 800932a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932e:	2300      	movs	r3, #0
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc2a 	bl	8009b8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009348:	2200      	movs	r2, #0
 800934a:	4912      	ldr	r1, [pc, #72]	@ (8009394 <MX_USB_DEVICE_Init+0x50>)
 800934c:	4812      	ldr	r0, [pc, #72]	@ (8009398 <MX_USB_DEVICE_Init+0x54>)
 800934e:	f7fe ff62 	bl	8008216 <USBD_Init>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009358:	f7f7 fb4e 	bl	80009f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800935c:	490f      	ldr	r1, [pc, #60]	@ (800939c <MX_USB_DEVICE_Init+0x58>)
 800935e:	480e      	ldr	r0, [pc, #56]	@ (8009398 <MX_USB_DEVICE_Init+0x54>)
 8009360:	f7fe ff84 	bl	800826c <USBD_RegisterClass>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800936a:	f7f7 fb45 	bl	80009f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800936e:	490c      	ldr	r1, [pc, #48]	@ (80093a0 <MX_USB_DEVICE_Init+0x5c>)
 8009370:	4809      	ldr	r0, [pc, #36]	@ (8009398 <MX_USB_DEVICE_Init+0x54>)
 8009372:	f7fe feb5 	bl	80080e0 <USBD_CDC_RegisterInterface>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800937c:	f7f7 fb3c 	bl	80009f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009380:	4805      	ldr	r0, [pc, #20]	@ (8009398 <MX_USB_DEVICE_Init+0x54>)
 8009382:	f7fe ff8c 	bl	800829e <USBD_Start>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800938c:	f7f7 fb34 	bl	80009f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009390:	bf00      	nop
 8009392:	bd80      	pop	{r7, pc}
 8009394:	2000012c 	.word	0x2000012c
 8009398:	2000136c 	.word	0x2000136c
 800939c:	20000018 	.word	0x20000018
 80093a0:	2000011c 	.word	0x2000011c

080093a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093a8:	2200      	movs	r2, #0
 80093aa:	4905      	ldr	r1, [pc, #20]	@ (80093c0 <CDC_Init_FS+0x1c>)
 80093ac:	4805      	ldr	r0, [pc, #20]	@ (80093c4 <CDC_Init_FS+0x20>)
 80093ae:	f7fe fead 	bl	800810c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093b2:	4905      	ldr	r1, [pc, #20]	@ (80093c8 <CDC_Init_FS+0x24>)
 80093b4:	4803      	ldr	r0, [pc, #12]	@ (80093c4 <CDC_Init_FS+0x20>)
 80093b6:	f7fe fec2 	bl	800813e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093bc:	4618      	mov	r0, r3
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20001a30 	.word	0x20001a30
 80093c4:	2000136c 	.word	0x2000136c
 80093c8:	20001630 	.word	0x20001630

080093cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
	...

080093dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
 80093e8:	4613      	mov	r3, r2
 80093ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	2b23      	cmp	r3, #35	@ 0x23
 80093f0:	d84a      	bhi.n	8009488 <CDC_Control_FS+0xac>
 80093f2:	a201      	add	r2, pc, #4	@ (adr r2, 80093f8 <CDC_Control_FS+0x1c>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	08009489 	.word	0x08009489
 80093fc:	08009489 	.word	0x08009489
 8009400:	08009489 	.word	0x08009489
 8009404:	08009489 	.word	0x08009489
 8009408:	08009489 	.word	0x08009489
 800940c:	08009489 	.word	0x08009489
 8009410:	08009489 	.word	0x08009489
 8009414:	08009489 	.word	0x08009489
 8009418:	08009489 	.word	0x08009489
 800941c:	08009489 	.word	0x08009489
 8009420:	08009489 	.word	0x08009489
 8009424:	08009489 	.word	0x08009489
 8009428:	08009489 	.word	0x08009489
 800942c:	08009489 	.word	0x08009489
 8009430:	08009489 	.word	0x08009489
 8009434:	08009489 	.word	0x08009489
 8009438:	08009489 	.word	0x08009489
 800943c:	08009489 	.word	0x08009489
 8009440:	08009489 	.word	0x08009489
 8009444:	08009489 	.word	0x08009489
 8009448:	08009489 	.word	0x08009489
 800944c:	08009489 	.word	0x08009489
 8009450:	08009489 	.word	0x08009489
 8009454:	08009489 	.word	0x08009489
 8009458:	08009489 	.word	0x08009489
 800945c:	08009489 	.word	0x08009489
 8009460:	08009489 	.word	0x08009489
 8009464:	08009489 	.word	0x08009489
 8009468:	08009489 	.word	0x08009489
 800946c:	08009489 	.word	0x08009489
 8009470:	08009489 	.word	0x08009489
 8009474:	08009489 	.word	0x08009489
 8009478:	08009489 	.word	0x08009489
 800947c:	08009489 	.word	0x08009489
 8009480:	08009489 	.word	0x08009489
 8009484:	08009489 	.word	0x08009489
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009488:	bf00      	nop
  }

  return (USBD_OK);
 800948a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	bc80      	pop	{r7}
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop

08009498 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RxCallback(Buf, Len);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7f6 ff99 	bl	80003dc <USB_RxCallback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4805      	ldr	r0, [pc, #20]	@ (80094c4 <CDC_Receive_FS+0x2c>)
 80094ae:	f7fe fe46 	bl	800813e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094b2:	4804      	ldr	r0, [pc, #16]	@ (80094c4 <CDC_Receive_FS+0x2c>)
 80094b4:	f7fe fe85 	bl	80081c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	2000136c 	.word	0x2000136c

080094c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094d8:	4b0d      	ldr	r3, [pc, #52]	@ (8009510 <CDC_Transmit_FS+0x48>)
 80094da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e00b      	b.n	8009506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094ee:	887b      	ldrh	r3, [r7, #2]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4806      	ldr	r0, [pc, #24]	@ (8009510 <CDC_Transmit_FS+0x48>)
 80094f6:	f7fe fe09 	bl	800810c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094fa:	4805      	ldr	r0, [pc, #20]	@ (8009510 <CDC_Transmit_FS+0x48>)
 80094fc:	f7fe fe32 	bl	8008164 <USBD_CDC_TransmitPacket>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	2000136c 	.word	0x2000136c

08009514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2212      	movs	r2, #18
 8009524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009526:	4b03      	ldr	r3, [pc, #12]	@ (8009534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000148 	.word	0x20000148

08009538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2204      	movs	r2, #4
 8009548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800954a:	4b03      	ldr	r3, [pc, #12]	@ (8009558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	2000015c 	.word	0x2000015c

0800955c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4907      	ldr	r1, [pc, #28]	@ (8009590 <USBD_FS_ProductStrDescriptor+0x34>)
 8009572:	4808      	ldr	r0, [pc, #32]	@ (8009594 <USBD_FS_ProductStrDescriptor+0x38>)
 8009574:	f7ff fe09 	bl	800918a <USBD_GetString>
 8009578:	e004      	b.n	8009584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4904      	ldr	r1, [pc, #16]	@ (8009590 <USBD_FS_ProductStrDescriptor+0x34>)
 800957e:	4805      	ldr	r0, [pc, #20]	@ (8009594 <USBD_FS_ProductStrDescriptor+0x38>)
 8009580:	f7ff fe03 	bl	800918a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009584:	4b02      	ldr	r3, [pc, #8]	@ (8009590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20001e30 	.word	0x20001e30
 8009594:	0800a638 	.word	0x0800a638

08009598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	4904      	ldr	r1, [pc, #16]	@ (80095b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095a8:	4804      	ldr	r0, [pc, #16]	@ (80095bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095aa:	f7ff fdee 	bl	800918a <USBD_GetString>
  return USBD_StrDesc;
 80095ae:	4b02      	ldr	r3, [pc, #8]	@ (80095b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20001e30 	.word	0x20001e30
 80095bc:	0800a650 	.word	0x0800a650

080095c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	221a      	movs	r2, #26
 80095d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095d2:	f000 f843 	bl	800965c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095d6:	4b02      	ldr	r3, [pc, #8]	@ (80095e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000160 	.word	0x20000160

080095e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d105      	bne.n	8009602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4907      	ldr	r1, [pc, #28]	@ (8009618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095fa:	4808      	ldr	r0, [pc, #32]	@ (800961c <USBD_FS_ConfigStrDescriptor+0x38>)
 80095fc:	f7ff fdc5 	bl	800918a <USBD_GetString>
 8009600:	e004      	b.n	800960c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4904      	ldr	r1, [pc, #16]	@ (8009618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009606:	4805      	ldr	r0, [pc, #20]	@ (800961c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009608:	f7ff fdbf 	bl	800918a <USBD_GetString>
  }
  return USBD_StrDesc;
 800960c:	4b02      	ldr	r3, [pc, #8]	@ (8009618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20001e30 	.word	0x20001e30
 800961c:	0800a664 	.word	0x0800a664

08009620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d105      	bne.n	800963e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	4907      	ldr	r1, [pc, #28]	@ (8009654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009636:	4808      	ldr	r0, [pc, #32]	@ (8009658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009638:	f7ff fda7 	bl	800918a <USBD_GetString>
 800963c:	e004      	b.n	8009648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	4904      	ldr	r1, [pc, #16]	@ (8009654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009642:	4805      	ldr	r0, [pc, #20]	@ (8009658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009644:	f7ff fda1 	bl	800918a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009648:	4b02      	ldr	r3, [pc, #8]	@ (8009654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20001e30 	.word	0x20001e30
 8009658:	0800a670 	.word	0x0800a670

0800965c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009662:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <Get_SerialNum+0x44>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009668:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <Get_SerialNum+0x48>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800966e:	4b0e      	ldr	r3, [pc, #56]	@ (80096a8 <Get_SerialNum+0x4c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4413      	add	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009682:	2208      	movs	r2, #8
 8009684:	4909      	ldr	r1, [pc, #36]	@ (80096ac <Get_SerialNum+0x50>)
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 f814 	bl	80096b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800968c:	2204      	movs	r2, #4
 800968e:	4908      	ldr	r1, [pc, #32]	@ (80096b0 <Get_SerialNum+0x54>)
 8009690:	68b8      	ldr	r0, [r7, #8]
 8009692:	f000 f80f 	bl	80096b4 <IntToUnicode>
  }
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	1ffff7e8 	.word	0x1ffff7e8
 80096a4:	1ffff7ec 	.word	0x1ffff7ec
 80096a8:	1ffff7f0 	.word	0x1ffff7f0
 80096ac:	20000162 	.word	0x20000162
 80096b0:	20000172 	.word	0x20000172

080096b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
 80096ca:	e027      	b.n	800971c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	0f1b      	lsrs	r3, r3, #28
 80096d0:	2b09      	cmp	r3, #9
 80096d2:	d80b      	bhi.n	80096ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	0f1b      	lsrs	r3, r3, #28
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4619      	mov	r1, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	440b      	add	r3, r1
 80096e4:	3230      	adds	r2, #48	@ 0x30
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	e00a      	b.n	8009702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	0f1b      	lsrs	r3, r3, #28
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	4619      	mov	r1, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	440b      	add	r3, r1
 80096fc:	3237      	adds	r2, #55	@ 0x37
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	3301      	adds	r3, #1
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4413      	add	r3, r2
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	3301      	adds	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
 800971c:	7dfa      	ldrb	r2, [r7, #23]
 800971e:	79fb      	ldrb	r3, [r7, #7]
 8009720:	429a      	cmp	r2, r3
 8009722:	d3d3      	bcc.n	80096cc <IntToUnicode+0x18>
  }
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr

08009730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a11      	ldr	r2, [pc, #68]	@ (8009784 <HAL_PCD_MspInit+0x54>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d11b      	bne.n	800977a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009742:	4b11      	ldr	r3, [pc, #68]	@ (8009788 <HAL_PCD_MspInit+0x58>)
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	4a10      	ldr	r2, [pc, #64]	@ (8009788 <HAL_PCD_MspInit+0x58>)
 8009748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800974c:	61d3      	str	r3, [r2, #28]
 800974e:	4b0e      	ldr	r3, [pc, #56]	@ (8009788 <HAL_PCD_MspInit+0x58>)
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800975a:	2200      	movs	r2, #0
 800975c:	2100      	movs	r1, #0
 800975e:	2013      	movs	r0, #19
 8009760:	f7f7 fe2b 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009764:	2013      	movs	r0, #19
 8009766:	f7f7 fe44 	bl	80013f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	2014      	movs	r0, #20
 8009770:	f7f7 fe23 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009774:	2014      	movs	r0, #20
 8009776:	f7f7 fe3c 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40005c00 	.word	0x40005c00
 8009788:	40021000 	.word	0x40021000

0800978c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7fe fdc3 	bl	800832e <USBD_LL_SetupStage>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80097c2:	78fa      	ldrb	r2, [r7, #3]
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	00db      	lsls	r3, r3, #3
 80097ce:	440b      	add	r3, r1
 80097d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	4619      	mov	r1, r3
 80097da:	f7fe fdf5 	bl	80083c8 <USBD_LL_DataOutStage>
}
 80097de:	bf00      	nop
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	440b      	add	r3, r1
 8009806:	3324      	adds	r3, #36	@ 0x24
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	4619      	mov	r1, r3
 800980e:	f7fe fe4c 	bl	80084aa <USBD_LL_DataInStage>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe ff5c 	bl	80086e6 <USBD_LL_SOF>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800983e:	2301      	movs	r3, #1
 8009840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	799b      	ldrb	r3, [r3, #6]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d001      	beq.n	800984e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800984a:	f7f7 f8d5 	bl	80009f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009854:	7bfa      	ldrb	r2, [r7, #15]
 8009856:	4611      	mov	r1, r2
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe ff0c 	bl	8008676 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fec5 	bl	80085f4 <USBD_LL_Reset>
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe ff06 	bl	8008694 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7a9b      	ldrb	r3, [r3, #10]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009890:	4b04      	ldr	r3, [pc, #16]	@ (80098a4 <HAL_PCD_SuspendCallback+0x30>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	4a03      	ldr	r2, [pc, #12]	@ (80098a4 <HAL_PCD_SuspendCallback+0x30>)
 8009896:	f043 0306 	orr.w	r3, r3, #6
 800989a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	e000ed00 	.word	0xe000ed00

080098a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe ff00 	bl	80086bc <USBD_LL_Resume>
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80098cc:	4a28      	ldr	r2, [pc, #160]	@ (8009970 <USBD_LL_Init+0xac>)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <USBD_LL_Init+0xac>)
 80098d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80098dc:	4b24      	ldr	r3, [pc, #144]	@ (8009970 <USBD_LL_Init+0xac>)
 80098de:	4a25      	ldr	r2, [pc, #148]	@ (8009974 <USBD_LL_Init+0xb0>)
 80098e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098e2:	4b23      	ldr	r3, [pc, #140]	@ (8009970 <USBD_LL_Init+0xac>)
 80098e4:	2208      	movs	r2, #8
 80098e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098e8:	4b21      	ldr	r3, [pc, #132]	@ (8009970 <USBD_LL_Init+0xac>)
 80098ea:	2202      	movs	r2, #2
 80098ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098ee:	4b20      	ldr	r3, [pc, #128]	@ (8009970 <USBD_LL_Init+0xac>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009970 <USBD_LL_Init+0xac>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009970 <USBD_LL_Init+0xac>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009900:	481b      	ldr	r0, [pc, #108]	@ (8009970 <USBD_LL_Init+0xac>)
 8009902:	f7f8 fb6d 	bl	8001fe0 <HAL_PCD_Init>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800990c:	f7f7 f874 	bl	80009f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009916:	2318      	movs	r3, #24
 8009918:	2200      	movs	r2, #0
 800991a:	2100      	movs	r1, #0
 800991c:	f7fa f87e 	bl	8003a1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009926:	2358      	movs	r3, #88	@ 0x58
 8009928:	2200      	movs	r2, #0
 800992a:	2180      	movs	r1, #128	@ 0x80
 800992c:	f7fa f876 	bl	8003a1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009936:	23c0      	movs	r3, #192	@ 0xc0
 8009938:	2200      	movs	r2, #0
 800993a:	2181      	movs	r1, #129	@ 0x81
 800993c:	f7fa f86e 	bl	8003a1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009946:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800994a:	2200      	movs	r2, #0
 800994c:	2101      	movs	r1, #1
 800994e:	f7fa f865 	bl	8003a1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800995c:	2200      	movs	r2, #0
 800995e:	2182      	movs	r1, #130	@ 0x82
 8009960:	f7fa f85c 	bl	8003a1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20002030 	.word	0x20002030
 8009974:	40005c00 	.word	0x40005c00

08009978 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800998e:	4618      	mov	r0, r3
 8009990:	f7f8 fc1c 	bl	80021cc <HAL_PCD_Start>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 f94e 	bl	8009c3c <USBD_Get_USB_Status>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	461a      	mov	r2, r3
 80099bc:	4603      	mov	r3, r0
 80099be:	70fb      	strb	r3, [r7, #3]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70bb      	strb	r3, [r7, #2]
 80099c4:	4613      	mov	r3, r2
 80099c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099d6:	78bb      	ldrb	r3, [r7, #2]
 80099d8:	883a      	ldrh	r2, [r7, #0]
 80099da:	78f9      	ldrb	r1, [r7, #3]
 80099dc:	f7f8 fd70 	bl	80024c0 <HAL_PCD_EP_Open>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 f928 	bl	8009c3c <USBD_Get_USB_Status>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a14:	78fa      	ldrb	r2, [r7, #3]
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7f8 fdae 	bl	800257a <HAL_PCD_EP_Close>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 f909 	bl	8009c3c <USBD_Get_USB_Status>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f8 fe56 	bl	8002708 <HAL_PCD_EP_SetStall>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f8ea 	bl	8009c3c <USBD_Get_USB_Status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f8 fe97 	bl	80027c8 <HAL_PCD_EP_ClrStall>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f8cb 	bl	8009c3c <USBD_Get_USB_Status>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ac6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da0b      	bge.n	8009ae8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3312      	adds	r3, #18
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	e00b      	b.n	8009b00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aee:	68f9      	ldr	r1, [r7, #12]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009afe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bc80      	pop	{r7}
 8009b08:	4770      	bx	lr

08009b0a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b24:	78fa      	ldrb	r2, [r7, #3]
 8009b26:	4611      	mov	r1, r2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7f8 fca5 	bl	8002478 <HAL_PCD_SetAddress>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 f881 	bl	8009c3c <USBD_Get_USB_Status>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	607a      	str	r2, [r7, #4]
 8009b52:	461a      	mov	r2, r3
 8009b54:	460b      	mov	r3, r1
 8009b56:	72fb      	strb	r3, [r7, #11]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b6a:	893b      	ldrh	r3, [r7, #8]
 8009b6c:	7af9      	ldrb	r1, [r7, #11]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	f7f8 fd93 	bl	800269a <HAL_PCD_EP_Transmit>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f85e 	bl	8009c3c <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b84:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	72fb      	strb	r3, [r7, #11]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bb0:	893b      	ldrh	r3, [r7, #8]
 8009bb2:	7af9      	ldrb	r1, [r7, #11]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	f7f8 fd28 	bl	800260a <HAL_PCD_EP_Receive>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 f83b 	bl	8009c3c <USBD_Get_USB_Status>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f8 fd3e 	bl	800266c <HAL_PCD_EP_GetRxCount>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c04:	4b02      	ldr	r3, [pc, #8]	@ (8009c10 <USBD_static_malloc+0x14>)
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bc80      	pop	{r7}
 8009c0e:	4770      	bx	lr
 8009c10:	20002308 	.word	0x20002308

08009c14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]

}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bc80      	pop	{r7}
 8009c24:	4770      	bx	lr

08009c26 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bc80      	pop	{r7}
 8009c3a:	4770      	bx	lr

08009c3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d817      	bhi.n	8009c80 <USBD_Get_USB_Status+0x44>
 8009c50:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <USBD_Get_USB_Status+0x1c>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009c69 	.word	0x08009c69
 8009c5c:	08009c6f 	.word	0x08009c6f
 8009c60:	08009c75 	.word	0x08009c75
 8009c64:	08009c7b 	.word	0x08009c7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c6c:	e00b      	b.n	8009c86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c6e:	2302      	movs	r3, #2
 8009c70:	73fb      	strb	r3, [r7, #15]
    break;
 8009c72:	e008      	b.n	8009c86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]
    break;
 8009c78:	e005      	b.n	8009c86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7e:	e002      	b.n	8009c86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c80:	2302      	movs	r3, #2
 8009c82:	73fb      	strb	r3, [r7, #15]
    break;
 8009c84:	bf00      	nop
  }
  return usb_status;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop

08009c94 <sniprintf>:
 8009c94:	b40c      	push	{r2, r3}
 8009c96:	b530      	push	{r4, r5, lr}
 8009c98:	4b18      	ldr	r3, [pc, #96]	@ (8009cfc <sniprintf+0x68>)
 8009c9a:	1e0c      	subs	r4, r1, #0
 8009c9c:	681d      	ldr	r5, [r3, #0]
 8009c9e:	b09d      	sub	sp, #116	@ 0x74
 8009ca0:	da08      	bge.n	8009cb4 <sniprintf+0x20>
 8009ca2:	238b      	movs	r3, #139	@ 0x8b
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	b01d      	add	sp, #116	@ 0x74
 8009cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cb0:	b002      	add	sp, #8
 8009cb2:	4770      	bx	lr
 8009cb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009cbc:	f04f 0300 	mov.w	r3, #0
 8009cc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009cc2:	bf0c      	ite	eq
 8009cc4:	4623      	moveq	r3, r4
 8009cc6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009cd2:	9002      	str	r0, [sp, #8]
 8009cd4:	9006      	str	r0, [sp, #24]
 8009cd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cda:	4628      	mov	r0, r5
 8009cdc:	ab21      	add	r3, sp, #132	@ 0x84
 8009cde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ce0:	a902      	add	r1, sp, #8
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	f000 f9a0 	bl	800a028 <_svfiprintf_r>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	bfbc      	itt	lt
 8009cec:	238b      	movlt	r3, #139	@ 0x8b
 8009cee:	602b      	strlt	r3, [r5, #0]
 8009cf0:	2c00      	cmp	r4, #0
 8009cf2:	d0da      	beq.n	8009caa <sniprintf+0x16>
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	9b02      	ldr	r3, [sp, #8]
 8009cf8:	701a      	strb	r2, [r3, #0]
 8009cfa:	e7d6      	b.n	8009caa <sniprintf+0x16>
 8009cfc:	2000017c 	.word	0x2000017c

08009d00 <memset>:
 8009d00:	4603      	mov	r3, r0
 8009d02:	4402      	add	r2, r0
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d100      	bne.n	8009d0a <memset+0xa>
 8009d08:	4770      	bx	lr
 8009d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0e:	e7f9      	b.n	8009d04 <memset+0x4>

08009d10 <__errno>:
 8009d10:	4b01      	ldr	r3, [pc, #4]	@ (8009d18 <__errno+0x8>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	2000017c 	.word	0x2000017c

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	2600      	movs	r6, #0
 8009d20:	4d0c      	ldr	r5, [pc, #48]	@ (8009d54 <__libc_init_array+0x38>)
 8009d22:	4c0d      	ldr	r4, [pc, #52]	@ (8009d58 <__libc_init_array+0x3c>)
 8009d24:	1b64      	subs	r4, r4, r5
 8009d26:	10a4      	asrs	r4, r4, #2
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	f000 fc76 	bl	800a61c <_init>
 8009d30:	2600      	movs	r6, #0
 8009d32:	4d0a      	ldr	r5, [pc, #40]	@ (8009d5c <__libc_init_array+0x40>)
 8009d34:	4c0a      	ldr	r4, [pc, #40]	@ (8009d60 <__libc_init_array+0x44>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d44:	4798      	blx	r3
 8009d46:	3601      	adds	r6, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d4e:	4798      	blx	r3
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	0800a6d8 	.word	0x0800a6d8
 8009d58:	0800a6d8 	.word	0x0800a6d8
 8009d5c:	0800a6d8 	.word	0x0800a6d8
 8009d60:	0800a6dc 	.word	0x0800a6dc

08009d64 <__retarget_lock_acquire_recursive>:
 8009d64:	4770      	bx	lr

08009d66 <__retarget_lock_release_recursive>:
 8009d66:	4770      	bx	lr

08009d68 <memcpy>:
 8009d68:	440a      	add	r2, r1
 8009d6a:	4291      	cmp	r1, r2
 8009d6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009d70:	d100      	bne.n	8009d74 <memcpy+0xc>
 8009d72:	4770      	bx	lr
 8009d74:	b510      	push	{r4, lr}
 8009d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d80:	d1f9      	bne.n	8009d76 <memcpy+0xe>
 8009d82:	bd10      	pop	{r4, pc}

08009d84 <_free_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4605      	mov	r5, r0
 8009d88:	2900      	cmp	r1, #0
 8009d8a:	d040      	beq.n	8009e0e <_free_r+0x8a>
 8009d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d90:	1f0c      	subs	r4, r1, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bfb8      	it	lt
 8009d96:	18e4      	addlt	r4, r4, r3
 8009d98:	f000 f8de 	bl	8009f58 <__malloc_lock>
 8009d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8009e10 <_free_r+0x8c>)
 8009d9e:	6813      	ldr	r3, [r2, #0]
 8009da0:	b933      	cbnz	r3, 8009db0 <_free_r+0x2c>
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	6014      	str	r4, [r2, #0]
 8009da6:	4628      	mov	r0, r5
 8009da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dac:	f000 b8da 	b.w	8009f64 <__malloc_unlock>
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	d908      	bls.n	8009dc6 <_free_r+0x42>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	1821      	adds	r1, r4, r0
 8009db8:	428b      	cmp	r3, r1
 8009dba:	bf01      	itttt	eq
 8009dbc:	6819      	ldreq	r1, [r3, #0]
 8009dbe:	685b      	ldreq	r3, [r3, #4]
 8009dc0:	1809      	addeq	r1, r1, r0
 8009dc2:	6021      	streq	r1, [r4, #0]
 8009dc4:	e7ed      	b.n	8009da2 <_free_r+0x1e>
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	b10b      	cbz	r3, 8009dd0 <_free_r+0x4c>
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d9fa      	bls.n	8009dc6 <_free_r+0x42>
 8009dd0:	6811      	ldr	r1, [r2, #0]
 8009dd2:	1850      	adds	r0, r2, r1
 8009dd4:	42a0      	cmp	r0, r4
 8009dd6:	d10b      	bne.n	8009df0 <_free_r+0x6c>
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	4401      	add	r1, r0
 8009ddc:	1850      	adds	r0, r2, r1
 8009dde:	4283      	cmp	r3, r0
 8009de0:	6011      	str	r1, [r2, #0]
 8009de2:	d1e0      	bne.n	8009da6 <_free_r+0x22>
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4408      	add	r0, r1
 8009dea:	6010      	str	r0, [r2, #0]
 8009dec:	6053      	str	r3, [r2, #4]
 8009dee:	e7da      	b.n	8009da6 <_free_r+0x22>
 8009df0:	d902      	bls.n	8009df8 <_free_r+0x74>
 8009df2:	230c      	movs	r3, #12
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	e7d6      	b.n	8009da6 <_free_r+0x22>
 8009df8:	6820      	ldr	r0, [r4, #0]
 8009dfa:	1821      	adds	r1, r4, r0
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	bf01      	itttt	eq
 8009e00:	6819      	ldreq	r1, [r3, #0]
 8009e02:	685b      	ldreq	r3, [r3, #4]
 8009e04:	1809      	addeq	r1, r1, r0
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	6063      	str	r3, [r4, #4]
 8009e0a:	6054      	str	r4, [r2, #4]
 8009e0c:	e7cb      	b.n	8009da6 <_free_r+0x22>
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	2000266c 	.word	0x2000266c

08009e14 <sbrk_aligned>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4e0f      	ldr	r6, [pc, #60]	@ (8009e54 <sbrk_aligned+0x40>)
 8009e18:	460c      	mov	r4, r1
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	b911      	cbnz	r1, 8009e26 <sbrk_aligned+0x12>
 8009e20:	f000 fba8 	bl	800a574 <_sbrk_r>
 8009e24:	6030      	str	r0, [r6, #0]
 8009e26:	4621      	mov	r1, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f000 fba3 	bl	800a574 <_sbrk_r>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d103      	bne.n	8009e3a <sbrk_aligned+0x26>
 8009e32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009e36:	4620      	mov	r0, r4
 8009e38:	bd70      	pop	{r4, r5, r6, pc}
 8009e3a:	1cc4      	adds	r4, r0, #3
 8009e3c:	f024 0403 	bic.w	r4, r4, #3
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d0f8      	beq.n	8009e36 <sbrk_aligned+0x22>
 8009e44:	1a21      	subs	r1, r4, r0
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 fb94 	bl	800a574 <_sbrk_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1f2      	bne.n	8009e36 <sbrk_aligned+0x22>
 8009e50:	e7ef      	b.n	8009e32 <sbrk_aligned+0x1e>
 8009e52:	bf00      	nop
 8009e54:	20002668 	.word	0x20002668

08009e58 <_malloc_r>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	1ccd      	adds	r5, r1, #3
 8009e5e:	f025 0503 	bic.w	r5, r5, #3
 8009e62:	3508      	adds	r5, #8
 8009e64:	2d0c      	cmp	r5, #12
 8009e66:	bf38      	it	cc
 8009e68:	250c      	movcc	r5, #12
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	db01      	blt.n	8009e74 <_malloc_r+0x1c>
 8009e70:	42a9      	cmp	r1, r5
 8009e72:	d904      	bls.n	8009e7e <_malloc_r+0x26>
 8009e74:	230c      	movs	r3, #12
 8009e76:	6033      	str	r3, [r6, #0]
 8009e78:	2000      	movs	r0, #0
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f54 <_malloc_r+0xfc>
 8009e82:	f000 f869 	bl	8009f58 <__malloc_lock>
 8009e86:	f8d8 3000 	ldr.w	r3, [r8]
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	bb44      	cbnz	r4, 8009ee0 <_malloc_r+0x88>
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7ff ffbf 	bl	8009e14 <sbrk_aligned>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	4604      	mov	r4, r0
 8009e9a:	d158      	bne.n	8009f4e <_malloc_r+0xf6>
 8009e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8009ea0:	4627      	mov	r7, r4
 8009ea2:	2f00      	cmp	r7, #0
 8009ea4:	d143      	bne.n	8009f2e <_malloc_r+0xd6>
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	d04b      	beq.n	8009f42 <_malloc_r+0xea>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	4639      	mov	r1, r7
 8009eae:	4630      	mov	r0, r6
 8009eb0:	eb04 0903 	add.w	r9, r4, r3
 8009eb4:	f000 fb5e 	bl	800a574 <_sbrk_r>
 8009eb8:	4581      	cmp	r9, r0
 8009eba:	d142      	bne.n	8009f42 <_malloc_r+0xea>
 8009ebc:	6821      	ldr	r1, [r4, #0]
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	1a6d      	subs	r5, r5, r1
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7ff ffa6 	bl	8009e14 <sbrk_aligned>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	d03a      	beq.n	8009f42 <_malloc_r+0xea>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	442b      	add	r3, r5
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	bb62      	cbnz	r2, 8009f34 <_malloc_r+0xdc>
 8009eda:	f8c8 7000 	str.w	r7, [r8]
 8009ede:	e00f      	b.n	8009f00 <_malloc_r+0xa8>
 8009ee0:	6822      	ldr	r2, [r4, #0]
 8009ee2:	1b52      	subs	r2, r2, r5
 8009ee4:	d420      	bmi.n	8009f28 <_malloc_r+0xd0>
 8009ee6:	2a0b      	cmp	r2, #11
 8009ee8:	d917      	bls.n	8009f1a <_malloc_r+0xc2>
 8009eea:	1961      	adds	r1, r4, r5
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	6025      	str	r5, [r4, #0]
 8009ef0:	bf18      	it	ne
 8009ef2:	6059      	strne	r1, [r3, #4]
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	bf08      	it	eq
 8009ef8:	f8c8 1000 	streq.w	r1, [r8]
 8009efc:	5162      	str	r2, [r4, r5]
 8009efe:	604b      	str	r3, [r1, #4]
 8009f00:	4630      	mov	r0, r6
 8009f02:	f000 f82f 	bl	8009f64 <__malloc_unlock>
 8009f06:	f104 000b 	add.w	r0, r4, #11
 8009f0a:	1d23      	adds	r3, r4, #4
 8009f0c:	f020 0007 	bic.w	r0, r0, #7
 8009f10:	1ac2      	subs	r2, r0, r3
 8009f12:	bf1c      	itt	ne
 8009f14:	1a1b      	subne	r3, r3, r0
 8009f16:	50a3      	strne	r3, [r4, r2]
 8009f18:	e7af      	b.n	8009e7a <_malloc_r+0x22>
 8009f1a:	6862      	ldr	r2, [r4, #4]
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	bf0c      	ite	eq
 8009f20:	f8c8 2000 	streq.w	r2, [r8]
 8009f24:	605a      	strne	r2, [r3, #4]
 8009f26:	e7eb      	b.n	8009f00 <_malloc_r+0xa8>
 8009f28:	4623      	mov	r3, r4
 8009f2a:	6864      	ldr	r4, [r4, #4]
 8009f2c:	e7ae      	b.n	8009e8c <_malloc_r+0x34>
 8009f2e:	463c      	mov	r4, r7
 8009f30:	687f      	ldr	r7, [r7, #4]
 8009f32:	e7b6      	b.n	8009ea2 <_malloc_r+0x4a>
 8009f34:	461a      	mov	r2, r3
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d1fb      	bne.n	8009f34 <_malloc_r+0xdc>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	6053      	str	r3, [r2, #4]
 8009f40:	e7de      	b.n	8009f00 <_malloc_r+0xa8>
 8009f42:	230c      	movs	r3, #12
 8009f44:	4630      	mov	r0, r6
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	f000 f80c 	bl	8009f64 <__malloc_unlock>
 8009f4c:	e794      	b.n	8009e78 <_malloc_r+0x20>
 8009f4e:	6005      	str	r5, [r0, #0]
 8009f50:	e7d6      	b.n	8009f00 <_malloc_r+0xa8>
 8009f52:	bf00      	nop
 8009f54:	2000266c 	.word	0x2000266c

08009f58 <__malloc_lock>:
 8009f58:	4801      	ldr	r0, [pc, #4]	@ (8009f60 <__malloc_lock+0x8>)
 8009f5a:	f7ff bf03 	b.w	8009d64 <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20002664 	.word	0x20002664

08009f64 <__malloc_unlock>:
 8009f64:	4801      	ldr	r0, [pc, #4]	@ (8009f6c <__malloc_unlock+0x8>)
 8009f66:	f7ff befe 	b.w	8009d66 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20002664 	.word	0x20002664

08009f70 <__ssputs_r>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	461f      	mov	r7, r3
 8009f76:	688e      	ldr	r6, [r1, #8]
 8009f78:	4682      	mov	sl, r0
 8009f7a:	42be      	cmp	r6, r7
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	4690      	mov	r8, r2
 8009f80:	680b      	ldr	r3, [r1, #0]
 8009f82:	d82d      	bhi.n	8009fe0 <__ssputs_r+0x70>
 8009f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f8c:	d026      	beq.n	8009fdc <__ssputs_r+0x6c>
 8009f8e:	6965      	ldr	r5, [r4, #20]
 8009f90:	6909      	ldr	r1, [r1, #16]
 8009f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f96:	eba3 0901 	sub.w	r9, r3, r1
 8009f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f9e:	1c7b      	adds	r3, r7, #1
 8009fa0:	444b      	add	r3, r9
 8009fa2:	106d      	asrs	r5, r5, #1
 8009fa4:	429d      	cmp	r5, r3
 8009fa6:	bf38      	it	cc
 8009fa8:	461d      	movcc	r5, r3
 8009faa:	0553      	lsls	r3, r2, #21
 8009fac:	d527      	bpl.n	8009ffe <__ssputs_r+0x8e>
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f7ff ff52 	bl	8009e58 <_malloc_r>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	b360      	cbz	r0, 800a012 <__ssputs_r+0xa2>
 8009fb8:	464a      	mov	r2, r9
 8009fba:	6921      	ldr	r1, [r4, #16]
 8009fbc:	f7ff fed4 	bl	8009d68 <memcpy>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	6126      	str	r6, [r4, #16]
 8009fce:	444e      	add	r6, r9
 8009fd0:	6026      	str	r6, [r4, #0]
 8009fd2:	463e      	mov	r6, r7
 8009fd4:	6165      	str	r5, [r4, #20]
 8009fd6:	eba5 0509 	sub.w	r5, r5, r9
 8009fda:	60a5      	str	r5, [r4, #8]
 8009fdc:	42be      	cmp	r6, r7
 8009fde:	d900      	bls.n	8009fe2 <__ssputs_r+0x72>
 8009fe0:	463e      	mov	r6, r7
 8009fe2:	4632      	mov	r2, r6
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	6820      	ldr	r0, [r4, #0]
 8009fe8:	f000 faaa 	bl	800a540 <memmove>
 8009fec:	2000      	movs	r0, #0
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	1b9b      	subs	r3, r3, r6
 8009ff2:	60a3      	str	r3, [r4, #8]
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	4433      	add	r3, r6
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffe:	462a      	mov	r2, r5
 800a000:	f000 fad6 	bl	800a5b0 <_realloc_r>
 800a004:	4606      	mov	r6, r0
 800a006:	2800      	cmp	r0, #0
 800a008:	d1e0      	bne.n	8009fcc <__ssputs_r+0x5c>
 800a00a:	4650      	mov	r0, sl
 800a00c:	6921      	ldr	r1, [r4, #16]
 800a00e:	f7ff feb9 	bl	8009d84 <_free_r>
 800a012:	230c      	movs	r3, #12
 800a014:	f8ca 3000 	str.w	r3, [sl]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	e7e9      	b.n	8009ffa <__ssputs_r+0x8a>
	...

0800a028 <_svfiprintf_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4698      	mov	r8, r3
 800a02e:	898b      	ldrh	r3, [r1, #12]
 800a030:	4607      	mov	r7, r0
 800a032:	061b      	lsls	r3, r3, #24
 800a034:	460d      	mov	r5, r1
 800a036:	4614      	mov	r4, r2
 800a038:	b09d      	sub	sp, #116	@ 0x74
 800a03a:	d510      	bpl.n	800a05e <_svfiprintf_r+0x36>
 800a03c:	690b      	ldr	r3, [r1, #16]
 800a03e:	b973      	cbnz	r3, 800a05e <_svfiprintf_r+0x36>
 800a040:	2140      	movs	r1, #64	@ 0x40
 800a042:	f7ff ff09 	bl	8009e58 <_malloc_r>
 800a046:	6028      	str	r0, [r5, #0]
 800a048:	6128      	str	r0, [r5, #16]
 800a04a:	b930      	cbnz	r0, 800a05a <_svfiprintf_r+0x32>
 800a04c:	230c      	movs	r3, #12
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a054:	b01d      	add	sp, #116	@ 0x74
 800a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05a:	2340      	movs	r3, #64	@ 0x40
 800a05c:	616b      	str	r3, [r5, #20]
 800a05e:	2300      	movs	r3, #0
 800a060:	9309      	str	r3, [sp, #36]	@ 0x24
 800a062:	2320      	movs	r3, #32
 800a064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a068:	2330      	movs	r3, #48	@ 0x30
 800a06a:	f04f 0901 	mov.w	r9, #1
 800a06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a072:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a20c <_svfiprintf_r+0x1e4>
 800a076:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a07a:	4623      	mov	r3, r4
 800a07c:	469a      	mov	sl, r3
 800a07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a082:	b10a      	cbz	r2, 800a088 <_svfiprintf_r+0x60>
 800a084:	2a25      	cmp	r2, #37	@ 0x25
 800a086:	d1f9      	bne.n	800a07c <_svfiprintf_r+0x54>
 800a088:	ebba 0b04 	subs.w	fp, sl, r4
 800a08c:	d00b      	beq.n	800a0a6 <_svfiprintf_r+0x7e>
 800a08e:	465b      	mov	r3, fp
 800a090:	4622      	mov	r2, r4
 800a092:	4629      	mov	r1, r5
 800a094:	4638      	mov	r0, r7
 800a096:	f7ff ff6b 	bl	8009f70 <__ssputs_r>
 800a09a:	3001      	adds	r0, #1
 800a09c:	f000 80a7 	beq.w	800a1ee <_svfiprintf_r+0x1c6>
 800a0a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a2:	445a      	add	r2, fp
 800a0a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 809f 	beq.w	800a1ee <_svfiprintf_r+0x1c6>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ba:	f10a 0a01 	add.w	sl, sl, #1
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0c8:	4654      	mov	r4, sl
 800a0ca:	2205      	movs	r2, #5
 800a0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d0:	484e      	ldr	r0, [pc, #312]	@ (800a20c <_svfiprintf_r+0x1e4>)
 800a0d2:	f000 fa5f 	bl	800a594 <memchr>
 800a0d6:	9a04      	ldr	r2, [sp, #16]
 800a0d8:	b9d8      	cbnz	r0, 800a112 <_svfiprintf_r+0xea>
 800a0da:	06d0      	lsls	r0, r2, #27
 800a0dc:	bf44      	itt	mi
 800a0de:	2320      	movmi	r3, #32
 800a0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e4:	0711      	lsls	r1, r2, #28
 800a0e6:	bf44      	itt	mi
 800a0e8:	232b      	movmi	r3, #43	@ 0x2b
 800a0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f4:	d015      	beq.n	800a122 <_svfiprintf_r+0xfa>
 800a0f6:	4654      	mov	r4, sl
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f04f 0c0a 	mov.w	ip, #10
 800a0fe:	9a07      	ldr	r2, [sp, #28]
 800a100:	4621      	mov	r1, r4
 800a102:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a106:	3b30      	subs	r3, #48	@ 0x30
 800a108:	2b09      	cmp	r3, #9
 800a10a:	d94b      	bls.n	800a1a4 <_svfiprintf_r+0x17c>
 800a10c:	b1b0      	cbz	r0, 800a13c <_svfiprintf_r+0x114>
 800a10e:	9207      	str	r2, [sp, #28]
 800a110:	e014      	b.n	800a13c <_svfiprintf_r+0x114>
 800a112:	eba0 0308 	sub.w	r3, r0, r8
 800a116:	fa09 f303 	lsl.w	r3, r9, r3
 800a11a:	4313      	orrs	r3, r2
 800a11c:	46a2      	mov	sl, r4
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	e7d2      	b.n	800a0c8 <_svfiprintf_r+0xa0>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	1d19      	adds	r1, r3, #4
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	9103      	str	r1, [sp, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfbb      	ittet	lt
 800a12e:	425b      	neglt	r3, r3
 800a130:	f042 0202 	orrlt.w	r2, r2, #2
 800a134:	9307      	strge	r3, [sp, #28]
 800a136:	9307      	strlt	r3, [sp, #28]
 800a138:	bfb8      	it	lt
 800a13a:	9204      	strlt	r2, [sp, #16]
 800a13c:	7823      	ldrb	r3, [r4, #0]
 800a13e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a140:	d10a      	bne.n	800a158 <_svfiprintf_r+0x130>
 800a142:	7863      	ldrb	r3, [r4, #1]
 800a144:	2b2a      	cmp	r3, #42	@ 0x2a
 800a146:	d132      	bne.n	800a1ae <_svfiprintf_r+0x186>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	3402      	adds	r4, #2
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	9203      	str	r2, [sp, #12]
 800a152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a156:	9305      	str	r3, [sp, #20]
 800a158:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a210 <_svfiprintf_r+0x1e8>
 800a15c:	2203      	movs	r2, #3
 800a15e:	4650      	mov	r0, sl
 800a160:	7821      	ldrb	r1, [r4, #0]
 800a162:	f000 fa17 	bl	800a594 <memchr>
 800a166:	b138      	cbz	r0, 800a178 <_svfiprintf_r+0x150>
 800a168:	2240      	movs	r2, #64	@ 0x40
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	eba0 000a 	sub.w	r0, r0, sl
 800a170:	4082      	lsls	r2, r0
 800a172:	4313      	orrs	r3, r2
 800a174:	3401      	adds	r4, #1
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17c:	2206      	movs	r2, #6
 800a17e:	4825      	ldr	r0, [pc, #148]	@ (800a214 <_svfiprintf_r+0x1ec>)
 800a180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a184:	f000 fa06 	bl	800a594 <memchr>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d036      	beq.n	800a1fa <_svfiprintf_r+0x1d2>
 800a18c:	4b22      	ldr	r3, [pc, #136]	@ (800a218 <_svfiprintf_r+0x1f0>)
 800a18e:	bb1b      	cbnz	r3, 800a1d8 <_svfiprintf_r+0x1b0>
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	3307      	adds	r3, #7
 800a194:	f023 0307 	bic.w	r3, r3, #7
 800a198:	3308      	adds	r3, #8
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a19e:	4433      	add	r3, r6
 800a1a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a2:	e76a      	b.n	800a07a <_svfiprintf_r+0x52>
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ac:	e7a8      	b.n	800a100 <_svfiprintf_r+0xd8>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f04f 0c0a 	mov.w	ip, #10
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c0:	3a30      	subs	r2, #48	@ 0x30
 800a1c2:	2a09      	cmp	r2, #9
 800a1c4:	d903      	bls.n	800a1ce <_svfiprintf_r+0x1a6>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0c6      	beq.n	800a158 <_svfiprintf_r+0x130>
 800a1ca:	9105      	str	r1, [sp, #20]
 800a1cc:	e7c4      	b.n	800a158 <_svfiprintf_r+0x130>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d6:	e7f0      	b.n	800a1ba <_svfiprintf_r+0x192>
 800a1d8:	ab03      	add	r3, sp, #12
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4638      	mov	r0, r7
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a21c <_svfiprintf_r+0x1f4>)
 800a1e2:	a904      	add	r1, sp, #16
 800a1e4:	f3af 8000 	nop.w
 800a1e8:	1c42      	adds	r2, r0, #1
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	d1d6      	bne.n	800a19c <_svfiprintf_r+0x174>
 800a1ee:	89ab      	ldrh	r3, [r5, #12]
 800a1f0:	065b      	lsls	r3, r3, #25
 800a1f2:	f53f af2d 	bmi.w	800a050 <_svfiprintf_r+0x28>
 800a1f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1f8:	e72c      	b.n	800a054 <_svfiprintf_r+0x2c>
 800a1fa:	ab03      	add	r3, sp, #12
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	462a      	mov	r2, r5
 800a200:	4638      	mov	r0, r7
 800a202:	4b06      	ldr	r3, [pc, #24]	@ (800a21c <_svfiprintf_r+0x1f4>)
 800a204:	a904      	add	r1, sp, #16
 800a206:	f000 f87d 	bl	800a304 <_printf_i>
 800a20a:	e7ed      	b.n	800a1e8 <_svfiprintf_r+0x1c0>
 800a20c:	0800a6a2 	.word	0x0800a6a2
 800a210:	0800a6a8 	.word	0x0800a6a8
 800a214:	0800a6ac 	.word	0x0800a6ac
 800a218:	00000000 	.word	0x00000000
 800a21c:	08009f71 	.word	0x08009f71

0800a220 <_printf_common>:
 800a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	4616      	mov	r6, r2
 800a226:	4698      	mov	r8, r3
 800a228:	688a      	ldr	r2, [r1, #8]
 800a22a:	690b      	ldr	r3, [r1, #16]
 800a22c:	4607      	mov	r7, r0
 800a22e:	4293      	cmp	r3, r2
 800a230:	bfb8      	it	lt
 800a232:	4613      	movlt	r3, r2
 800a234:	6033      	str	r3, [r6, #0]
 800a236:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a23a:	460c      	mov	r4, r1
 800a23c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a240:	b10a      	cbz	r2, 800a246 <_printf_common+0x26>
 800a242:	3301      	adds	r3, #1
 800a244:	6033      	str	r3, [r6, #0]
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	0699      	lsls	r1, r3, #26
 800a24a:	bf42      	ittt	mi
 800a24c:	6833      	ldrmi	r3, [r6, #0]
 800a24e:	3302      	addmi	r3, #2
 800a250:	6033      	strmi	r3, [r6, #0]
 800a252:	6825      	ldr	r5, [r4, #0]
 800a254:	f015 0506 	ands.w	r5, r5, #6
 800a258:	d106      	bne.n	800a268 <_printf_common+0x48>
 800a25a:	f104 0a19 	add.w	sl, r4, #25
 800a25e:	68e3      	ldr	r3, [r4, #12]
 800a260:	6832      	ldr	r2, [r6, #0]
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	42ab      	cmp	r3, r5
 800a266:	dc2b      	bgt.n	800a2c0 <_printf_common+0xa0>
 800a268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	3b00      	subs	r3, #0
 800a270:	bf18      	it	ne
 800a272:	2301      	movne	r3, #1
 800a274:	0692      	lsls	r2, r2, #26
 800a276:	d430      	bmi.n	800a2da <_printf_common+0xba>
 800a278:	4641      	mov	r1, r8
 800a27a:	4638      	mov	r0, r7
 800a27c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a280:	47c8      	blx	r9
 800a282:	3001      	adds	r0, #1
 800a284:	d023      	beq.n	800a2ce <_printf_common+0xae>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	f003 0306 	and.w	r3, r3, #6
 800a28e:	2b04      	cmp	r3, #4
 800a290:	bf14      	ite	ne
 800a292:	2500      	movne	r5, #0
 800a294:	6833      	ldreq	r3, [r6, #0]
 800a296:	f04f 0600 	mov.w	r6, #0
 800a29a:	bf08      	it	eq
 800a29c:	68e5      	ldreq	r5, [r4, #12]
 800a29e:	f104 041a 	add.w	r4, r4, #26
 800a2a2:	bf08      	it	eq
 800a2a4:	1aed      	subeq	r5, r5, r3
 800a2a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a2aa:	bf08      	it	eq
 800a2ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	bfc4      	itt	gt
 800a2b4:	1a9b      	subgt	r3, r3, r2
 800a2b6:	18ed      	addgt	r5, r5, r3
 800a2b8:	42b5      	cmp	r5, r6
 800a2ba:	d11a      	bne.n	800a2f2 <_printf_common+0xd2>
 800a2bc:	2000      	movs	r0, #0
 800a2be:	e008      	b.n	800a2d2 <_printf_common+0xb2>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	4641      	mov	r1, r8
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	47c8      	blx	r9
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d103      	bne.n	800a2d6 <_printf_common+0xb6>
 800a2ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d6:	3501      	adds	r5, #1
 800a2d8:	e7c1      	b.n	800a25e <_printf_common+0x3e>
 800a2da:	2030      	movs	r0, #48	@ 0x30
 800a2dc:	18e1      	adds	r1, r4, r3
 800a2de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2e8:	4422      	add	r2, r4
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2f0:	e7c2      	b.n	800a278 <_printf_common+0x58>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	47c8      	blx	r9
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d0e6      	beq.n	800a2ce <_printf_common+0xae>
 800a300:	3601      	adds	r6, #1
 800a302:	e7d9      	b.n	800a2b8 <_printf_common+0x98>

0800a304 <_printf_i>:
 800a304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	7e0f      	ldrb	r7, [r1, #24]
 800a30a:	4691      	mov	r9, r2
 800a30c:	2f78      	cmp	r7, #120	@ 0x78
 800a30e:	4680      	mov	r8, r0
 800a310:	460c      	mov	r4, r1
 800a312:	469a      	mov	sl, r3
 800a314:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a316:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a31a:	d807      	bhi.n	800a32c <_printf_i+0x28>
 800a31c:	2f62      	cmp	r7, #98	@ 0x62
 800a31e:	d80a      	bhi.n	800a336 <_printf_i+0x32>
 800a320:	2f00      	cmp	r7, #0
 800a322:	f000 80d1 	beq.w	800a4c8 <_printf_i+0x1c4>
 800a326:	2f58      	cmp	r7, #88	@ 0x58
 800a328:	f000 80b8 	beq.w	800a49c <_printf_i+0x198>
 800a32c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a330:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a334:	e03a      	b.n	800a3ac <_printf_i+0xa8>
 800a336:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a33a:	2b15      	cmp	r3, #21
 800a33c:	d8f6      	bhi.n	800a32c <_printf_i+0x28>
 800a33e:	a101      	add	r1, pc, #4	@ (adr r1, 800a344 <_printf_i+0x40>)
 800a340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a344:	0800a39d 	.word	0x0800a39d
 800a348:	0800a3b1 	.word	0x0800a3b1
 800a34c:	0800a32d 	.word	0x0800a32d
 800a350:	0800a32d 	.word	0x0800a32d
 800a354:	0800a32d 	.word	0x0800a32d
 800a358:	0800a32d 	.word	0x0800a32d
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a32d 	.word	0x0800a32d
 800a364:	0800a32d 	.word	0x0800a32d
 800a368:	0800a32d 	.word	0x0800a32d
 800a36c:	0800a32d 	.word	0x0800a32d
 800a370:	0800a4af 	.word	0x0800a4af
 800a374:	0800a3db 	.word	0x0800a3db
 800a378:	0800a469 	.word	0x0800a469
 800a37c:	0800a32d 	.word	0x0800a32d
 800a380:	0800a32d 	.word	0x0800a32d
 800a384:	0800a4d1 	.word	0x0800a4d1
 800a388:	0800a32d 	.word	0x0800a32d
 800a38c:	0800a3db 	.word	0x0800a3db
 800a390:	0800a32d 	.word	0x0800a32d
 800a394:	0800a32d 	.word	0x0800a32d
 800a398:	0800a471 	.word	0x0800a471
 800a39c:	6833      	ldr	r3, [r6, #0]
 800a39e:	1d1a      	adds	r2, r3, #4
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6032      	str	r2, [r6, #0]
 800a3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e09c      	b.n	800a4ea <_printf_i+0x1e6>
 800a3b0:	6833      	ldr	r3, [r6, #0]
 800a3b2:	6820      	ldr	r0, [r4, #0]
 800a3b4:	1d19      	adds	r1, r3, #4
 800a3b6:	6031      	str	r1, [r6, #0]
 800a3b8:	0606      	lsls	r6, r0, #24
 800a3ba:	d501      	bpl.n	800a3c0 <_printf_i+0xbc>
 800a3bc:	681d      	ldr	r5, [r3, #0]
 800a3be:	e003      	b.n	800a3c8 <_printf_i+0xc4>
 800a3c0:	0645      	lsls	r5, r0, #25
 800a3c2:	d5fb      	bpl.n	800a3bc <_printf_i+0xb8>
 800a3c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	da03      	bge.n	800a3d4 <_printf_i+0xd0>
 800a3cc:	232d      	movs	r3, #45	@ 0x2d
 800a3ce:	426d      	negs	r5, r5
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3d4:	230a      	movs	r3, #10
 800a3d6:	4858      	ldr	r0, [pc, #352]	@ (800a538 <_printf_i+0x234>)
 800a3d8:	e011      	b.n	800a3fe <_printf_i+0xfa>
 800a3da:	6821      	ldr	r1, [r4, #0]
 800a3dc:	6833      	ldr	r3, [r6, #0]
 800a3de:	0608      	lsls	r0, r1, #24
 800a3e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3e4:	d402      	bmi.n	800a3ec <_printf_i+0xe8>
 800a3e6:	0649      	lsls	r1, r1, #25
 800a3e8:	bf48      	it	mi
 800a3ea:	b2ad      	uxthmi	r5, r5
 800a3ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	bf14      	ite	ne
 800a3f2:	230a      	movne	r3, #10
 800a3f4:	2308      	moveq	r3, #8
 800a3f6:	4850      	ldr	r0, [pc, #320]	@ (800a538 <_printf_i+0x234>)
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3fe:	6866      	ldr	r6, [r4, #4]
 800a400:	2e00      	cmp	r6, #0
 800a402:	60a6      	str	r6, [r4, #8]
 800a404:	db05      	blt.n	800a412 <_printf_i+0x10e>
 800a406:	6821      	ldr	r1, [r4, #0]
 800a408:	432e      	orrs	r6, r5
 800a40a:	f021 0104 	bic.w	r1, r1, #4
 800a40e:	6021      	str	r1, [r4, #0]
 800a410:	d04b      	beq.n	800a4aa <_printf_i+0x1a6>
 800a412:	4616      	mov	r6, r2
 800a414:	fbb5 f1f3 	udiv	r1, r5, r3
 800a418:	fb03 5711 	mls	r7, r3, r1, r5
 800a41c:	5dc7      	ldrb	r7, [r0, r7]
 800a41e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a422:	462f      	mov	r7, r5
 800a424:	42bb      	cmp	r3, r7
 800a426:	460d      	mov	r5, r1
 800a428:	d9f4      	bls.n	800a414 <_printf_i+0x110>
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d10b      	bne.n	800a446 <_printf_i+0x142>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	07df      	lsls	r7, r3, #31
 800a432:	d508      	bpl.n	800a446 <_printf_i+0x142>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	6861      	ldr	r1, [r4, #4]
 800a438:	4299      	cmp	r1, r3
 800a43a:	bfde      	ittt	le
 800a43c:	2330      	movle	r3, #48	@ 0x30
 800a43e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a442:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a446:	1b92      	subs	r2, r2, r6
 800a448:	6122      	str	r2, [r4, #16]
 800a44a:	464b      	mov	r3, r9
 800a44c:	4621      	mov	r1, r4
 800a44e:	4640      	mov	r0, r8
 800a450:	f8cd a000 	str.w	sl, [sp]
 800a454:	aa03      	add	r2, sp, #12
 800a456:	f7ff fee3 	bl	800a220 <_printf_common>
 800a45a:	3001      	adds	r0, #1
 800a45c:	d14a      	bne.n	800a4f4 <_printf_i+0x1f0>
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a462:	b004      	add	sp, #16
 800a464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	f043 0320 	orr.w	r3, r3, #32
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	2778      	movs	r7, #120	@ 0x78
 800a472:	4832      	ldr	r0, [pc, #200]	@ (800a53c <_printf_i+0x238>)
 800a474:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	6831      	ldr	r1, [r6, #0]
 800a47c:	061f      	lsls	r7, r3, #24
 800a47e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a482:	d402      	bmi.n	800a48a <_printf_i+0x186>
 800a484:	065f      	lsls	r7, r3, #25
 800a486:	bf48      	it	mi
 800a488:	b2ad      	uxthmi	r5, r5
 800a48a:	6031      	str	r1, [r6, #0]
 800a48c:	07d9      	lsls	r1, r3, #31
 800a48e:	bf44      	itt	mi
 800a490:	f043 0320 	orrmi.w	r3, r3, #32
 800a494:	6023      	strmi	r3, [r4, #0]
 800a496:	b11d      	cbz	r5, 800a4a0 <_printf_i+0x19c>
 800a498:	2310      	movs	r3, #16
 800a49a:	e7ad      	b.n	800a3f8 <_printf_i+0xf4>
 800a49c:	4826      	ldr	r0, [pc, #152]	@ (800a538 <_printf_i+0x234>)
 800a49e:	e7e9      	b.n	800a474 <_printf_i+0x170>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	f023 0320 	bic.w	r3, r3, #32
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	e7f6      	b.n	800a498 <_printf_i+0x194>
 800a4aa:	4616      	mov	r6, r2
 800a4ac:	e7bd      	b.n	800a42a <_printf_i+0x126>
 800a4ae:	6833      	ldr	r3, [r6, #0]
 800a4b0:	6825      	ldr	r5, [r4, #0]
 800a4b2:	1d18      	adds	r0, r3, #4
 800a4b4:	6961      	ldr	r1, [r4, #20]
 800a4b6:	6030      	str	r0, [r6, #0]
 800a4b8:	062e      	lsls	r6, r5, #24
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	d501      	bpl.n	800a4c2 <_printf_i+0x1be>
 800a4be:	6019      	str	r1, [r3, #0]
 800a4c0:	e002      	b.n	800a4c8 <_printf_i+0x1c4>
 800a4c2:	0668      	lsls	r0, r5, #25
 800a4c4:	d5fb      	bpl.n	800a4be <_printf_i+0x1ba>
 800a4c6:	8019      	strh	r1, [r3, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4616      	mov	r6, r2
 800a4cc:	6123      	str	r3, [r4, #16]
 800a4ce:	e7bc      	b.n	800a44a <_printf_i+0x146>
 800a4d0:	6833      	ldr	r3, [r6, #0]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	1d1a      	adds	r2, r3, #4
 800a4d6:	6032      	str	r2, [r6, #0]
 800a4d8:	681e      	ldr	r6, [r3, #0]
 800a4da:	6862      	ldr	r2, [r4, #4]
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f000 f859 	bl	800a594 <memchr>
 800a4e2:	b108      	cbz	r0, 800a4e8 <_printf_i+0x1e4>
 800a4e4:	1b80      	subs	r0, r0, r6
 800a4e6:	6060      	str	r0, [r4, #4]
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4f2:	e7aa      	b.n	800a44a <_printf_i+0x146>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	47d0      	blx	sl
 800a4fe:	3001      	adds	r0, #1
 800a500:	d0ad      	beq.n	800a45e <_printf_i+0x15a>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	079b      	lsls	r3, r3, #30
 800a506:	d413      	bmi.n	800a530 <_printf_i+0x22c>
 800a508:	68e0      	ldr	r0, [r4, #12]
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	4298      	cmp	r0, r3
 800a50e:	bfb8      	it	lt
 800a510:	4618      	movlt	r0, r3
 800a512:	e7a6      	b.n	800a462 <_printf_i+0x15e>
 800a514:	2301      	movs	r3, #1
 800a516:	4632      	mov	r2, r6
 800a518:	4649      	mov	r1, r9
 800a51a:	4640      	mov	r0, r8
 800a51c:	47d0      	blx	sl
 800a51e:	3001      	adds	r0, #1
 800a520:	d09d      	beq.n	800a45e <_printf_i+0x15a>
 800a522:	3501      	adds	r5, #1
 800a524:	68e3      	ldr	r3, [r4, #12]
 800a526:	9903      	ldr	r1, [sp, #12]
 800a528:	1a5b      	subs	r3, r3, r1
 800a52a:	42ab      	cmp	r3, r5
 800a52c:	dcf2      	bgt.n	800a514 <_printf_i+0x210>
 800a52e:	e7eb      	b.n	800a508 <_printf_i+0x204>
 800a530:	2500      	movs	r5, #0
 800a532:	f104 0619 	add.w	r6, r4, #25
 800a536:	e7f5      	b.n	800a524 <_printf_i+0x220>
 800a538:	0800a6b3 	.word	0x0800a6b3
 800a53c:	0800a6c4 	.word	0x0800a6c4

0800a540 <memmove>:
 800a540:	4288      	cmp	r0, r1
 800a542:	b510      	push	{r4, lr}
 800a544:	eb01 0402 	add.w	r4, r1, r2
 800a548:	d902      	bls.n	800a550 <memmove+0x10>
 800a54a:	4284      	cmp	r4, r0
 800a54c:	4623      	mov	r3, r4
 800a54e:	d807      	bhi.n	800a560 <memmove+0x20>
 800a550:	1e43      	subs	r3, r0, #1
 800a552:	42a1      	cmp	r1, r4
 800a554:	d008      	beq.n	800a568 <memmove+0x28>
 800a556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a55a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a55e:	e7f8      	b.n	800a552 <memmove+0x12>
 800a560:	4601      	mov	r1, r0
 800a562:	4402      	add	r2, r0
 800a564:	428a      	cmp	r2, r1
 800a566:	d100      	bne.n	800a56a <memmove+0x2a>
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a56e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a572:	e7f7      	b.n	800a564 <memmove+0x24>

0800a574 <_sbrk_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	2300      	movs	r3, #0
 800a578:	4d05      	ldr	r5, [pc, #20]	@ (800a590 <_sbrk_r+0x1c>)
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	f7f6 fd5c 	bl	800103c <_sbrk>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d102      	bne.n	800a58e <_sbrk_r+0x1a>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b103      	cbz	r3, 800a58e <_sbrk_r+0x1a>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	20002660 	.word	0x20002660

0800a594 <memchr>:
 800a594:	4603      	mov	r3, r0
 800a596:	b510      	push	{r4, lr}
 800a598:	b2c9      	uxtb	r1, r1
 800a59a:	4402      	add	r2, r0
 800a59c:	4293      	cmp	r3, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	d101      	bne.n	800a5a6 <memchr+0x12>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e003      	b.n	800a5ae <memchr+0x1a>
 800a5a6:	7804      	ldrb	r4, [r0, #0]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	428c      	cmp	r4, r1
 800a5ac:	d1f6      	bne.n	800a59c <memchr+0x8>
 800a5ae:	bd10      	pop	{r4, pc}

0800a5b0 <_realloc_r>:
 800a5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	4614      	mov	r4, r2
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	b921      	cbnz	r1, 800a5c6 <_realloc_r+0x16>
 800a5bc:	4611      	mov	r1, r2
 800a5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c2:	f7ff bc49 	b.w	8009e58 <_malloc_r>
 800a5c6:	b92a      	cbnz	r2, 800a5d4 <_realloc_r+0x24>
 800a5c8:	f7ff fbdc 	bl	8009d84 <_free_r>
 800a5cc:	4625      	mov	r5, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	f000 f81a 	bl	800a60c <_malloc_usable_size_r>
 800a5d8:	4284      	cmp	r4, r0
 800a5da:	4606      	mov	r6, r0
 800a5dc:	d802      	bhi.n	800a5e4 <_realloc_r+0x34>
 800a5de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5e2:	d8f4      	bhi.n	800a5ce <_realloc_r+0x1e>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7ff fc36 	bl	8009e58 <_malloc_r>
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	b908      	cbnz	r0, 800a5f4 <_realloc_r+0x44>
 800a5f0:	4645      	mov	r5, r8
 800a5f2:	e7ec      	b.n	800a5ce <_realloc_r+0x1e>
 800a5f4:	42b4      	cmp	r4, r6
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	bf28      	it	cs
 800a5fc:	4632      	movcs	r2, r6
 800a5fe:	f7ff fbb3 	bl	8009d68 <memcpy>
 800a602:	4629      	mov	r1, r5
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff fbbd 	bl	8009d84 <_free_r>
 800a60a:	e7f1      	b.n	800a5f0 <_realloc_r+0x40>

0800a60c <_malloc_usable_size_r>:
 800a60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a610:	1f18      	subs	r0, r3, #4
 800a612:	2b00      	cmp	r3, #0
 800a614:	bfbc      	itt	lt
 800a616:	580b      	ldrlt	r3, [r1, r0]
 800a618:	18c0      	addlt	r0, r0, r3
 800a61a:	4770      	bx	lr

0800a61c <_init>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	bf00      	nop
 800a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a622:	bc08      	pop	{r3}
 800a624:	469e      	mov	lr, r3
 800a626:	4770      	bx	lr

0800a628 <_fini>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr
