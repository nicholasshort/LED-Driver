
LED-Driver-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800a508  0800a508  0000b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  0000c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a5ac  0800a5ac  0000c1cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a5ac  0800a5ac  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5b0  0800a5b0  0000b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a5b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c8  200001cc  0800a780  0000c1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002594  0800a780  0000c594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001289e  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363e  00000000  00000000  0001ea93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000220d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce3  00000000  00000000  000231e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c62a  00000000  00000000  00023ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b44  00000000  00000000  000404ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9b1  00000000  00000000  00055031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f09e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a38  00000000  00000000  000f0a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f5460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a4f0 	.word	0x0800a4f0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	0800a4f0 	.word	0x0800a4f0

08000224 <SK6812_Init>:
uint8_t	SK6812_DMA_BUF[SK6812_DMA_BUF_LEN];

volatile uint8_t SK6812_DMA_COMPLETE_FLAG;


HAL_StatusTypeDef SK6812_Init() {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Init(&SK6812_TIM);
 800022a:	480d      	ldr	r0, [pc, #52]	@ (8000260 <SK6812_Init+0x3c>)
 800022c:	f004 f83a 	bl	80042a4 <HAL_TIM_PWM_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	717b      	strb	r3, [r7, #5]

	for (uint16_t i = 0; i < SK6812_DMA_BUF_LEN; i++) {
 8000234:	2300      	movs	r3, #0
 8000236:	80fb      	strh	r3, [r7, #6]
 8000238:	e006      	b.n	8000248 <SK6812_Init+0x24>

		SK6812_DMA_BUF[i] = 0;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	4a09      	ldr	r2, [pc, #36]	@ (8000264 <SK6812_Init+0x40>)
 800023e:	2100      	movs	r1, #0
 8000240:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < SK6812_DMA_BUF_LEN; i++) {
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	3301      	adds	r3, #1
 8000246:	80fb      	strh	r3, [r7, #6]
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	f5b3 6f38 	cmp.w	r3, #2944	@ 0xb80
 800024e:	d3f4      	bcc.n	800023a <SK6812_Init+0x16>

	}

	SK6812_DMA_COMPLETE_FLAG = 1;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <SK6812_Init+0x44>)
 8000252:	2201      	movs	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]

	return ret;
 8000256:	797b      	ldrb	r3, [r7, #5]

}
 8000258:	4618      	mov	r0, r3
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000f4c 	.word	0x20000f4c
 8000264:	200003c8 	.word	0x200003c8
 8000268:	20000f48 	.word	0x20000f48

0800026c <SK6812_SetColour>:

void SK6812_SetColour(uint8_t index, uint8_t red, uint8_t green, uint8_t blue) {
 800026c:	b490      	push	{r4, r7}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4604      	mov	r4, r0
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4623      	mov	r3, r4
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4603      	mov	r3, r0
 8000280:	71bb      	strb	r3, [r7, #6]
 8000282:	460b      	mov	r3, r1
 8000284:	717b      	strb	r3, [r7, #5]
 8000286:	4613      	mov	r3, r2
 8000288:	713b      	strb	r3, [r7, #4]

	SK6812_LEDSTRIP_DATA[index].colour.red = red;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <SK6812_SetColour+0x4c>)
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	79ba      	ldrb	r2, [r7, #6]
 8000294:	705a      	strb	r2, [r3, #1]
	SK6812_LEDSTRIP_DATA[index].colour.green = green;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <SK6812_SetColour+0x4c>)
 800029a:	797a      	ldrb	r2, [r7, #5]
 800029c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	SK6812_LEDSTRIP_DATA[index].colour.blue = blue;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <SK6812_SetColour+0x4c>)
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	4413      	add	r3, r2
 80002a8:	793a      	ldrb	r2, [r7, #4]
 80002aa:	709a      	strb	r2, [r3, #2]

}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc90      	pop	{r4, r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	200001e8 	.word	0x200001e8

080002bc <SK6812_Update>:

HAL_StatusTypeDef SK6812_Update() {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0

	if (!SK6812_DMA_COMPLETE_FLAG) {
 80002c2:	4b2a      	ldr	r3, [pc, #168]	@ (800036c <SK6812_Update+0xb0>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d101      	bne.n	80002d0 <SK6812_Update+0x14>

		return HAL_BUSY;
 80002cc:	2302      	movs	r3, #2
 80002ce:	e049      	b.n	8000364 <SK6812_Update+0xa8>

	}

	uint16_t bufIndex = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	80fb      	strh	r3, [r7, #6]

	for (uint8_t ledIndex = 0; ledIndex < SK6812_NUM_LEDS; ledIndex++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	717b      	strb	r3, [r7, #5]
 80002d8:	e031      	b.n	800033e <SK6812_Update+0x82>

		uint8_t transmitBitIndex = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	70bb      	strb	r3, [r7, #2]

		for (uint8_t bitIndex = 0; bitIndex < SK6812_BITS_PER_LED; bitIndex++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	713b      	strb	r3, [r7, #4]
 80002e2:	e026      	b.n	8000332 <SK6812_Update+0x76>

			transmitBitIndex = (7 - (bitIndex % 8)) + ((bitIndex / 8) * 8);
 80002e4:	793b      	ldrb	r3, [r7, #4]
 80002e6:	43db      	mvns	r3, r3
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	f003 0307 	and.w	r3, r3, #7
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	793b      	ldrb	r3, [r7, #4]
 80002f2:	08db      	lsrs	r3, r3, #3
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4413      	add	r3, r2
 80002fc:	70bb      	strb	r3, [r7, #2]

			if ((SK6812_LEDSTRIP_DATA[ledIndex].data >> transmitBitIndex) & 0x01) {
 80002fe:	797b      	ldrb	r3, [r7, #5]
 8000300:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <SK6812_Update+0xb4>)
 8000302:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000306:	78bb      	ldrb	r3, [r7, #2]
 8000308:	fa22 f303 	lsr.w	r3, r2, r3
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d004      	beq.n	800031e <SK6812_Update+0x62>

				SK6812_DMA_BUF[bufIndex] = SK6812_T1H_VAL;
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	4a17      	ldr	r2, [pc, #92]	@ (8000374 <SK6812_Update+0xb8>)
 8000318:	212b      	movs	r1, #43	@ 0x2b
 800031a:	54d1      	strb	r1, [r2, r3]
 800031c:	e003      	b.n	8000326 <SK6812_Update+0x6a>

			} else {

				SK6812_DMA_BUF[bufIndex] = SK6812_T0H_VAL;
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	4a14      	ldr	r2, [pc, #80]	@ (8000374 <SK6812_Update+0xb8>)
 8000322:	2116      	movs	r1, #22
 8000324:	54d1      	strb	r1, [r2, r3]

			}

			bufIndex++;
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	3301      	adds	r3, #1
 800032a:	80fb      	strh	r3, [r7, #6]
		for (uint8_t bitIndex = 0; bitIndex < SK6812_BITS_PER_LED; bitIndex++) {
 800032c:	793b      	ldrb	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	713b      	strb	r3, [r7, #4]
 8000332:	793b      	ldrb	r3, [r7, #4]
 8000334:	2b17      	cmp	r3, #23
 8000336:	d9d5      	bls.n	80002e4 <SK6812_Update+0x28>
	for (uint8_t ledIndex = 0; ledIndex < SK6812_NUM_LEDS; ledIndex++) {
 8000338:	797b      	ldrb	r3, [r7, #5]
 800033a:	3301      	adds	r3, #1
 800033c:	717b      	strb	r3, [r7, #5]
 800033e:	797b      	ldrb	r3, [r7, #5]
 8000340:	2b77      	cmp	r3, #119	@ 0x77
 8000342:	d9ca      	bls.n	80002da <SK6812_Update+0x1e>

	}

	// 80us reset period from Init function's 0s

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Start_DMA(&SK6812_TIM, SK6812_TIM_CHANNEL, (uint32_t*)SK6812_DMA_BUF, SK6812_DMA_BUF_LEN);
 8000344:	f44f 6338 	mov.w	r3, #2944	@ 0xb80
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <SK6812_Update+0xb8>)
 800034a:	2108      	movs	r1, #8
 800034c:	480a      	ldr	r0, [pc, #40]	@ (8000378 <SK6812_Update+0xbc>)
 800034e:	f003 fff9 	bl	8004344 <HAL_TIM_PWM_Start_DMA>
 8000352:	4603      	mov	r3, r0
 8000354:	70fb      	strb	r3, [r7, #3]

	if (ret == HAL_OK) {
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d102      	bne.n	8000362 <SK6812_Update+0xa6>

		SK6812_DMA_COMPLETE_FLAG = 0;
 800035c:	4b03      	ldr	r3, [pc, #12]	@ (800036c <SK6812_Update+0xb0>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]

	}

	return ret;
 8000362:	78fb      	ldrb	r3, [r7, #3]

}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000f48 	.word	0x20000f48
 8000370:	200001e8 	.word	0x200001e8
 8000374:	200003c8 	.word	0x200003c8
 8000378:	20000f4c 	.word	0x20000f4c

0800037c <SK6812_Callback>:

void SK6812_Callback() {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&SK6812_TIM, SK6812_TIM_CHANNEL);
 8000380:	2108      	movs	r1, #8
 8000382:	4804      	ldr	r0, [pc, #16]	@ (8000394 <SK6812_Callback+0x18>)
 8000384:	f004 f998 	bl	80046b8 <HAL_TIM_PWM_Stop_DMA>

	SK6812_DMA_COMPLETE_FLAG = 1;
 8000388:	4b03      	ldr	r3, [pc, #12]	@ (8000398 <SK6812_Callback+0x1c>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000f4c 	.word	0x20000f4c
 8000398:	20000f48 	.word	0x20000f48

0800039c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]

	SK6812_Callback();
 80003a4:	f7ff ffea 	bl	800037c <SK6812_Callback>

}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b6:	f000 fe11 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ba:	f000 f861 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003be:	f000 fa7f 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c2:	f000 fa23 	bl	800080c <MX_DMA_Init>
  MX_TIM5_Init();
 80003c6:	f000 f925 	bl	8000614 <MX_TIM5_Init>
  MX_TIM8_Init();
 80003ca:	f000 f99d 	bl	8000708 <MX_TIM8_Init>
  MX_TIM3_Init();
 80003ce:	f000 f8b3 	bl	8000538 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80003d2:	f008 ff25 	bl	8009220 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SK6812_Init();
 80003d6:	f7ff ff25 	bl	8000224 <SK6812_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t led = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	71fb      	strb	r3, [r7, #7]
  uint8_t direction = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	717b      	strb	r3, [r7, #5]
 80003e6:	e013      	b.n	8000410 <main+0x60>
			if (i == led)
 80003e8:	797a      	ldrb	r2, [r7, #5]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d106      	bne.n	80003fe <main+0x4e>
				SK6812_SetColour(i, 235, 52, 232);
 80003f0:	7978      	ldrb	r0, [r7, #5]
 80003f2:	23e8      	movs	r3, #232	@ 0xe8
 80003f4:	2234      	movs	r2, #52	@ 0x34
 80003f6:	21eb      	movs	r1, #235	@ 0xeb
 80003f8:	f7ff ff38 	bl	800026c <SK6812_SetColour>
 80003fc:	e005      	b.n	800040a <main+0x5a>
			else
				SK6812_SetColour(i, 0, 0, 0);
 80003fe:	7978      	ldrb	r0, [r7, #5]
 8000400:	2300      	movs	r3, #0
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	f7ff ff31 	bl	800026c <SK6812_SetColour>
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 800040a:	797b      	ldrb	r3, [r7, #5]
 800040c:	3301      	adds	r3, #1
 800040e:	717b      	strb	r3, [r7, #5]
 8000410:	797b      	ldrb	r3, [r7, #5]
 8000412:	2b77      	cmp	r3, #119	@ 0x77
 8000414:	d9e8      	bls.n	80003e8 <main+0x38>
		}
		if (direction == 0)
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d103      	bne.n	8000424 <main+0x74>
			led++;
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	3301      	adds	r3, #1
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	e002      	b.n	800042a <main+0x7a>
		else
			led--;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	3b01      	subs	r3, #1
 8000428:	71fb      	strb	r3, [r7, #7]
		if (led >= SK6812_NUM_LEDS) {
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b77      	cmp	r3, #119	@ 0x77
 800042e:	d904      	bls.n	800043a <main+0x8a>
			led = SK6812_NUM_LEDS;
 8000430:	2378      	movs	r3, #120	@ 0x78
 8000432:	71fb      	strb	r3, [r7, #7]
			direction = 1;
 8000434:	2301      	movs	r3, #1
 8000436:	71bb      	strb	r3, [r7, #6]
 8000438:	e006      	b.n	8000448 <main+0x98>
		}
		else if (led <= 0) {
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d103      	bne.n	8000448 <main+0x98>
			led = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	71fb      	strb	r3, [r7, #7]
			direction = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	71bb      	strb	r3, [r7, #6]
		}
		SK6812_Update();
 8000448:	f7ff ff38 	bl	80002bc <SK6812_Update>

		usbTxBufLen = snprintf((char*)usbTxBuf, USB_BUFLEN, "Hi");
 800044c:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <main+0xc4>)
 800044e:	2180      	movs	r1, #128	@ 0x80
 8000450:	4809      	ldr	r0, [pc, #36]	@ (8000478 <main+0xc8>)
 8000452:	f009 fb89 	bl	8009b68 <sniprintf>
 8000456:	4603      	mov	r3, r0
 8000458:	b29a      	uxth	r2, r3
 800045a:	4b08      	ldr	r3, [pc, #32]	@ (800047c <main+0xcc>)
 800045c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(usbTxBuf, usbTxBufLen);
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <main+0xcc>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	4804      	ldr	r0, [pc, #16]	@ (8000478 <main+0xc8>)
 8000466:	f008 ff99 	bl	800939c <CDC_Transmit_FS>

		HAL_Delay(10);
 800046a:	200a      	movs	r0, #10
 800046c:	f000 fe18 	bl	80010a0 <HAL_Delay>
		for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 8000470:	e7b7      	b.n	80003e2 <main+0x32>
 8000472:	bf00      	nop
 8000474:	0800a508 	.word	0x0800a508
 8000478:	20001200 	.word	0x20001200
 800047c:	20001280 	.word	0x20001280

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b096      	sub	sp, #88	@ 0x58
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800048a:	2228      	movs	r2, #40	@ 0x28
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f009 fba0 	bl	8009bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000494:	f107 031c 	add.w	r3, r7, #28
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b4:	2301      	movs	r3, #1
 80004b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c2:	2301      	movs	r3, #1
 80004c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	2302      	movs	r3, #2
 80004c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004da:	4618      	mov	r0, r3
 80004dc:	f003 fa4e 	bl	800397c <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004e6:	f000 fa25 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	2302      	movs	r3, #2
 80004f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	2102      	movs	r1, #2
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fcba 	bl	8003e80 <HAL_RCC_ClockConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000512:	f000 fa0f 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000516:	2310      	movs	r3, #16
 8000518:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f003 fe09 	bl	8004138 <HAL_RCCEx_PeriphCLKConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800052c:	f000 fa02 	bl	8000934 <Error_Handler>
  }
}
 8000530:	bf00      	nop
 8000532:	3758      	adds	r7, #88	@ 0x58
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	@ 0x28
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <MX_TIM3_Init+0xd4>)
 800055c:	4a2c      	ldr	r2, [pc, #176]	@ (8000610 <MX_TIM3_Init+0xd8>)
 800055e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <MX_TIM3_Init+0xd4>)
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000566:	4b29      	ldr	r3, [pc, #164]	@ (800060c <MX_TIM3_Init+0xd4>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <MX_TIM3_Init+0xd4>)
 800056e:	2259      	movs	r2, #89	@ 0x59
 8000570:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <MX_TIM3_Init+0xd4>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_TIM3_Init+0xd4>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800057e:	4823      	ldr	r0, [pc, #140]	@ (800060c <MX_TIM3_Init+0xd4>)
 8000580:	f003 fe90 	bl	80042a4 <HAL_TIM_PWM_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800058a:	f000 f9d3 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4619      	mov	r1, r3
 800059c:	481b      	ldr	r0, [pc, #108]	@ (800060c <MX_TIM3_Init+0xd4>)
 800059e:	f004 fe6d 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80005a8:	f000 f9c4 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ac:	2360      	movs	r3, #96	@ 0x60
 80005ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	4812      	ldr	r0, [pc, #72]	@ (800060c <MX_TIM3_Init+0xd4>)
 80005c4:	f004 fa3a 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f9b1 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2208      	movs	r2, #8
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <MX_TIM3_Init+0xd4>)
 80005da:	f004 fa2f 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80005e4:	f000 f9a6 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	220c      	movs	r2, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <MX_TIM3_Init+0xd4>)
 80005f0:	f004 fa24 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80005fa:	f000 f99b 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005fe:	4803      	ldr	r0, [pc, #12]	@ (800060c <MX_TIM3_Init+0xd4>)
 8000600:	f000 fb6c 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000f4c 	.word	0x20000f4c
 8000610:	40000400 	.word	0x40000400

08000614 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <MX_TIM5_Init+0xec>)
 8000638:	4a32      	ldr	r2, [pc, #200]	@ (8000704 <MX_TIM5_Init+0xf0>)
 800063a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 800063c:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <MX_TIM5_Init+0xec>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <MX_TIM5_Init+0xec>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90-1;
 8000648:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <MX_TIM5_Init+0xec>)
 800064a:	2259      	movs	r2, #89	@ 0x59
 800064c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <MX_TIM5_Init+0xec>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <MX_TIM5_Init+0xec>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800065a:	4829      	ldr	r0, [pc, #164]	@ (8000700 <MX_TIM5_Init+0xec>)
 800065c:	f003 fe22 	bl	80042a4 <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000666:	f000 f965 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4619      	mov	r1, r3
 8000678:	4821      	ldr	r0, [pc, #132]	@ (8000700 <MX_TIM5_Init+0xec>)
 800067a:	f004 fdff 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000684:	f000 f956 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000688:	2360      	movs	r3, #96	@ 0x60
 800068a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	4818      	ldr	r0, [pc, #96]	@ (8000700 <MX_TIM5_Init+0xec>)
 80006a0:	f004 f9cc 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80006aa:	f000 f943 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2204      	movs	r2, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	@ (8000700 <MX_TIM5_Init+0xec>)
 80006b6:	f004 f9c1 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80006c0:	f000 f938 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2208      	movs	r2, #8
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_TIM5_Init+0xec>)
 80006cc:	f004 f9b6 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 80006d6:	f000 f92d 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	220c      	movs	r2, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <MX_TIM5_Init+0xec>)
 80006e2:	f004 f9ab 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 80006ec:	f000 f922 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <MX_TIM5_Init+0xec>)
 80006f2:	f000 faf3 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	@ 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000f94 	.word	0x20000f94
 8000704:	40000c00 	.word	0x40000c00

08000708 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b092      	sub	sp, #72	@ 0x48
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f009 fa4e 	bl	8009bd4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000738:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <MX_TIM8_Init+0xfc>)
 800073a:	4a33      	ldr	r2, [pc, #204]	@ (8000808 <MX_TIM8_Init+0x100>)
 800073c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 800073e:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <MX_TIM8_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <MX_TIM8_Init+0xfc>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 90-1;
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <MX_TIM8_Init+0xfc>)
 800074c:	2259      	movs	r2, #89	@ 0x59
 800074e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <MX_TIM8_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_TIM8_Init+0xfc>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_TIM8_Init+0xfc>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000762:	4828      	ldr	r0, [pc, #160]	@ (8000804 <MX_TIM8_Init+0xfc>)
 8000764:	f003 fd9e 	bl	80042a4 <HAL_TIM_PWM_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800076e:	f000 f8e1 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800077a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800077e:	4619      	mov	r1, r3
 8000780:	4820      	ldr	r0, [pc, #128]	@ (8000804 <MX_TIM8_Init+0xfc>)
 8000782:	f004 fd7b 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 800078c:	f000 f8d2 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000790:	2360      	movs	r3, #96	@ 0x60
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4813      	ldr	r0, [pc, #76]	@ (8000804 <MX_TIM8_Init+0xfc>)
 80007b6:	f004 f941 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80007c0:	f000 f8b8 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4807      	ldr	r0, [pc, #28]	@ (8000804 <MX_TIM8_Init+0xfc>)
 80007e8:	f004 fdb4 	bl	8005354 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80007f2:	f000 f89f 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007f6:	4803      	ldr	r0, [pc, #12]	@ (8000804 <MX_TIM8_Init+0xfc>)
 80007f8:	f000 fa70 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80007fc:	bf00      	nop
 80007fe:	3748      	adds	r7, #72	@ 0x48
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000fdc 	.word	0x20000fdc
 8000808:	40013400 	.word	0x40013400

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_DMA_Init+0xb0>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a29      	ldr	r2, [pc, #164]	@ (80008bc <MX_DMA_Init+0xb0>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_DMA_Init+0xb0>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_DMA_Init+0xb0>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <MX_DMA_Init+0xb0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_DMA_Init+0xb0>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200c      	movs	r0, #12
 8000848:	f000 fd25 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800084c:	200c      	movs	r0, #12
 800084e:	f000 fd3e 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	200d      	movs	r0, #13
 8000858:	f000 fd1d 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800085c:	200d      	movs	r0, #13
 800085e:	f000 fd36 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2010      	movs	r0, #16
 8000868:	f000 fd15 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800086c:	2010      	movs	r0, #16
 800086e:	f000 fd2e 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2038      	movs	r0, #56	@ 0x38
 8000878:	f000 fd0d 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800087c:	2038      	movs	r0, #56	@ 0x38
 800087e:	f000 fd26 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2039      	movs	r0, #57	@ 0x39
 8000888:	f000 fd05 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800088c:	2039      	movs	r0, #57	@ 0x39
 800088e:	f000 fd1e 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	203a      	movs	r0, #58	@ 0x3a
 8000898:	f000 fcfd 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800089c:	203a      	movs	r0, #58	@ 0x3a
 800089e:	f000 fd16 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	203b      	movs	r0, #59	@ 0x3b
 80008a8:	f000 fcf5 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80008ac:	203b      	movs	r0, #59	@ 0x3b
 80008ae:	f000 fd0e 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <MX_GPIO_Init+0x70>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x70>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_GPIO_Init+0x70>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <MX_GPIO_Init+0x70>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <MX_GPIO_Init+0x70>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a14      	ldr	r2, [pc, #80]	@ (800099c <HAL_MspInit+0x5c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_MspInit+0x5c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_MspInit+0x60>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_MspInit+0x60>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0x144>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	f040 80a8 	bne.w	8000b08 <HAL_TIM_PWM_MspInit+0x164>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009b8:	4b4c      	ldr	r3, [pc, #304]	@ (8000aec <HAL_TIM_PWM_MspInit+0x148>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	4a4b      	ldr	r2, [pc, #300]	@ (8000aec <HAL_TIM_PWM_MspInit+0x148>)
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	61d3      	str	r3, [r2, #28]
 80009c4:	4b49      	ldr	r3, [pc, #292]	@ (8000aec <HAL_TIM_PWM_MspInit+0x148>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80009d0:	4b47      	ldr	r3, [pc, #284]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009d2:	4a48      	ldr	r2, [pc, #288]	@ (8000af4 <HAL_TIM_PWM_MspInit+0x150>)
 80009d4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d6:	4b46      	ldr	r3, [pc, #280]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80009dc:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80009e2:	4b43      	ldr	r3, [pc, #268]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e8:	4b41      	ldr	r3, [pc, #260]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009f0:	4b3f      	ldr	r3, [pc, #252]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80009f8:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80009fe:	4b3c      	ldr	r3, [pc, #240]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000a04:	483a      	ldr	r0, [pc, #232]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a06:	f000 fc7d 	bl	8001304 <HAL_DMA_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8000a10:	f7ff ff90 	bl	8000934 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a36      	ldr	r2, [pc, #216]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a1a:	4a35      	ldr	r2, [pc, #212]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a33      	ldr	r2, [pc, #204]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a24:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a26:	4a32      	ldr	r2, [pc, #200]	@ (8000af0 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a2e:	4a33      	ldr	r2, [pc, #204]	@ (8000afc <HAL_TIM_PWM_MspInit+0x158>)
 8000a30:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a32:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8000a5e:	4826      	ldr	r0, [pc, #152]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a60:	f000 fc50 	bl	8001304 <HAL_DMA_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_TIM_PWM_MspInit+0xca>
    {
      Error_Handler();
 8000a6a:	f7ff ff63 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a21      	ldr	r2, [pc, #132]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a74:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x154>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000a7c:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x160>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000a9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000aae:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000ab0:	f000 fc28 	bl	8001304 <HAL_DMA_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_TIM_PWM_MspInit+0x11a>
    {
      Error_Handler();
 8000aba:	f7ff ff3b 	bl	8000934 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000ac2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000ace:	621a      	str	r2, [r3, #32]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x15c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201d      	movs	r0, #29
 8000adc:	f000 fbdb 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ae0:	201d      	movs	r0, #29
 8000ae2:	f000 fbf4 	bl	80012ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ae6:	e0df      	b.n	8000ca8 <HAL_TIM_PWM_MspInit+0x304>
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	20001024 	.word	0x20001024
 8000af4:	4002006c 	.word	0x4002006c
 8000af8:	20001068 	.word	0x20001068
 8000afc:	4002001c 	.word	0x4002001c
 8000b00:	200010ac 	.word	0x200010ac
 8000b04:	40020030 	.word	0x40020030
  else if(htim_pwm->Instance==TIM5)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a68      	ldr	r2, [pc, #416]	@ (8000cb0 <HAL_TIM_PWM_MspInit+0x30c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 8091 	bne.w	8000c36 <HAL_TIM_PWM_MspInit+0x292>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b14:	4b67      	ldr	r3, [pc, #412]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x310>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	4a66      	ldr	r2, [pc, #408]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x310>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	61d3      	str	r3, [r2, #28]
 8000b20:	4b64      	ldr	r3, [pc, #400]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x310>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch2.Instance = DMA2_Channel4;
 8000b2c:	4b62      	ldr	r3, [pc, #392]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b2e:	4a63      	ldr	r2, [pc, #396]	@ (8000cbc <HAL_TIM_PWM_MspInit+0x318>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b61      	ldr	r3, [pc, #388]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b5f      	ldr	r3, [pc, #380]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b40:	2280      	movs	r2, #128	@ 0x80
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b44:	4b5c      	ldr	r3, [pc, #368]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000b54:	4b58      	ldr	r3, [pc, #352]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000b5a:	4b57      	ldr	r3, [pc, #348]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000b60:	4855      	ldr	r0, [pc, #340]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b62:	f000 fbcf 	bl	8001304 <HAL_DMA_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_TIM_PWM_MspInit+0x1cc>
      Error_Handler();
 8000b6c:	f7ff fee2 	bl	8000934 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a51      	ldr	r2, [pc, #324]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b76:	4a50      	ldr	r2, [pc, #320]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x314>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch3_up.Instance = DMA2_Channel2;
 8000b7c:	4b50      	ldr	r3, [pc, #320]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000b7e:	4a51      	ldr	r2, [pc, #324]	@ (8000cc4 <HAL_TIM_PWM_MspInit+0x320>)
 8000b80:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b94:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9c:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ba2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8000ba4:	4b46      	ldr	r3, [pc, #280]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b45      	ldr	r3, [pc, #276]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8000bb0:	4843      	ldr	r0, [pc, #268]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000bb2:	f000 fba7 	bl	8001304 <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_TIM_PWM_MspInit+0x21c>
      Error_Handler();
 8000bbc:	f7ff feba 	bl	8000934 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000bd0:	621a      	str	r2, [r3, #32]
 8000bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8000cc0 <HAL_TIM_PWM_MspInit+0x31c>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch4_trig.Instance = DMA2_Channel1;
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000bda:	4a3c      	ldr	r2, [pc, #240]	@ (8000ccc <HAL_TIM_PWM_MspInit+0x328>)
 8000bdc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bde:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf0:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000bf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfe:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8000c00:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000c06:	4b30      	ldr	r3, [pc, #192]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8000c0c:	482e      	ldr	r0, [pc, #184]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c0e:	f000 fb79 	bl	8001304 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_TIM_PWM_MspInit+0x278>
      Error_Handler();
 8000c18:	f7ff fe8c 	bl	8000934 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c20:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c22:	4a29      	ldr	r2, [pc, #164]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a27      	ldr	r2, [pc, #156]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c2e:	4a26      	ldr	r2, [pc, #152]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x324>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000c34:	e038      	b.n	8000ca8 <HAL_TIM_PWM_MspInit+0x304>
  else if(htim_pwm->Instance==TIM8)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a25      	ldr	r2, [pc, #148]	@ (8000cd0 <HAL_TIM_PWM_MspInit+0x32c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d133      	bne.n	8000ca8 <HAL_TIM_PWM_MspInit+0x304>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c40:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x310>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x310>)
 8000c46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x310>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd8 <HAL_TIM_PWM_MspInit+0x334>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000c8c:	4811      	ldr	r0, [pc, #68]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000c8e:	f000 fb39 	bl	8001304 <HAL_DMA_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_TIM_PWM_MspInit+0x2f8>
      Error_Handler();
 8000c98:	f7ff fe4c 	bl	8000934 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x330>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40000c00 	.word	0x40000c00
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	200010f0 	.word	0x200010f0
 8000cbc:	40020444 	.word	0x40020444
 8000cc0:	20001134 	.word	0x20001134
 8000cc4:	4002041c 	.word	0x4002041c
 8000cc8:	20001178 	.word	0x20001178
 8000ccc:	40020408 	.word	0x40020408
 8000cd0:	40013400 	.word	0x40013400
 8000cd4:	200011bc 	.word	0x200011bc
 8000cd8:	40020430 	.word	0x40020430

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a39      	ldr	r2, [pc, #228]	@ (8000ddc <HAL_TIM_MspPostInit+0x100>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d130      	bne.n	8000d5e <HAL_TIM_MspPostInit+0x82>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b38      	ldr	r3, [pc, #224]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a37      	ldr	r2, [pc, #220]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a31      	ldr	r2, [pc, #196]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d2c:	2340      	movs	r3, #64	@ 0x40
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2302      	movs	r3, #2
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4829      	ldr	r0, [pc, #164]	@ (8000de4 <HAL_TIM_MspPostInit+0x108>)
 8000d40:	f000 ff28 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4824      	ldr	r0, [pc, #144]	@ (8000de8 <HAL_TIM_MspPostInit+0x10c>)
 8000d58:	f000 ff1c 	bl	8001b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d5c:	e03a      	b.n	8000dd4 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM5)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a22      	ldr	r2, [pc, #136]	@ (8000dec <HAL_TIM_MspPostInit+0x110>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d118      	bne.n	8000d9a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d80:	230f      	movs	r3, #15
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <HAL_TIM_MspPostInit+0x108>)
 8000d94:	f000 fefe 	bl	8001b94 <HAL_GPIO_Init>
}
 8000d98:	e01c      	b.n	8000dd4 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <HAL_TIM_MspPostInit+0x114>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d117      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_TIM_MspPostInit+0x104>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0310 	and.w	r3, r3, #16
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbc:	2340      	movs	r3, #64	@ 0x40
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <HAL_TIM_MspPostInit+0x118>)
 8000dd0:	f000 fee0 	bl	8001b94 <HAL_GPIO_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40000c00 	.word	0x40000c00
 8000df0:	40013400 	.word	0x40013400
 8000df4:	40011000 	.word	0x40011000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 f90e 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Channel2_IRQHandler+0x10>)
 8000e56:	f000 fc33 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20001068 	.word	0x20001068

08000e64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <DMA1_Channel3_IRQHandler+0x10>)
 8000e6a:	f000 fc29 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200010ac 	.word	0x200010ac

08000e78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <DMA1_Channel6_IRQHandler+0x10>)
 8000e7e:	f000 fc1f 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001024 	.word	0x20001024

08000e8c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000e92:	f001 f92f 	bl	80020f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20001f54 	.word	0x20001f54

08000ea0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ea6:	f001 f925 	bl	80020f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20001f54 	.word	0x20001f54

08000eb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM3_IRQHandler+0x10>)
 8000eba:	f003 fccf 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000f4c 	.word	0x20000f4c

08000ec8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <DMA2_Channel1_IRQHandler+0x10>)
 8000ece:	f000 fbf7 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20001178 	.word	0x20001178

08000edc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <DMA2_Channel2_IRQHandler+0x10>)
 8000ee2:	f000 fbed 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20001134 	.word	0x20001134

08000ef0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <DMA2_Channel3_IRQHandler+0x10>)
 8000ef6:	f000 fbe3 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200011bc 	.word	0x200011bc

08000f04 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA2_Channel4_5_IRQHandler+0x10>)
 8000f0a:	f000 fbd9 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200010f0 	.word	0x200010f0

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f008 fe4c 	bl	8009be4 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000c000 	.word	0x2000c000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	20001284 	.word	0x20001284
 8000f80:	20002598 	.word	0x20002598

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff fff8 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f96:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fac:	4c09      	ldr	r4, [pc, #36]	@ (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f008 fe19 	bl	8009bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff f9f7 	bl	80003b0 <main>
  bx lr
 8000fc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000fcc:	0800a5b4 	.word	0x0800a5b4
  ldr r2, =_sbss
 8000fd0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000fd4:	20002594 	.word	0x20002594

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f947 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fca2 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f95f 	bl	80012ea <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001044:	f000 f927 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x20>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000008 	.word	0x20000008
 8001088:	20001288 	.word	0x20001288

0800108c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	@ (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20001288 	.word	0x20001288

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff0 	bl	800108c <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffe0 	bl	800108c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	@ (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	@ (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	@ 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff42 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff35 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e059      	b.n	80013ce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <HAL_DMA_Init+0xd4>)
 8001322:	429a      	cmp	r2, r3
 8001324:	d80f      	bhi.n	8001346 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_DMA_Init+0xd8>)
 800132e:	4413      	add	r3, r2
 8001330:	4a2b      	ldr	r2, [pc, #172]	@ (80013e0 <HAL_DMA_Init+0xdc>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	009a      	lsls	r2, r3, #2
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a28      	ldr	r2, [pc, #160]	@ (80013e4 <HAL_DMA_Init+0xe0>)
 8001342:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001344:	e00e      	b.n	8001364 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_DMA_Init+0xe4>)
 800134e:	4413      	add	r3, r2
 8001350:	4a23      	ldr	r2, [pc, #140]	@ (80013e0 <HAL_DMA_Init+0xdc>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <HAL_DMA_Init+0xe8>)
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800137a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800137e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40020407 	.word	0x40020407
 80013dc:	bffdfff8 	.word	0xbffdfff8
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	40020000 	.word	0x40020000
 80013e8:	bffdfbf8 	.word	0xbffdfbf8
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Start_IT+0x20>
 800140c:	2302      	movs	r3, #2
 800140e:	e04b      	b.n	80014a8 <HAL_DMA_Start_IT+0xb8>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d13a      	bne.n	800149a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 fb75 	bl	8001b38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 020e 	orr.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e00f      	b.n	8001488 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 020a 	orr.w	r2, r2, #10
 8001486:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e005      	b.n	80014a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014a2:	2302      	movs	r3, #2
 80014a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d005      	beq.n	80014d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e0d6      	b.n	8001682 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 020e 	bic.w	r2, r2, #14
 80014e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b64      	ldr	r3, [pc, #400]	@ (800168c <HAL_DMA_Abort_IT+0x1dc>)
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d958      	bls.n	80015b2 <HAL_DMA_Abort_IT+0x102>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a62      	ldr	r2, [pc, #392]	@ (8001690 <HAL_DMA_Abort_IT+0x1e0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04f      	beq.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a61      	ldr	r2, [pc, #388]	@ (8001694 <HAL_DMA_Abort_IT+0x1e4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d048      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xf6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5f      	ldr	r2, [pc, #380]	@ (8001698 <HAL_DMA_Abort_IT+0x1e8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d040      	beq.n	80015a0 <HAL_DMA_Abort_IT+0xf0>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a5e      	ldr	r2, [pc, #376]	@ (800169c <HAL_DMA_Abort_IT+0x1ec>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d038      	beq.n	800159a <HAL_DMA_Abort_IT+0xea>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a5c      	ldr	r2, [pc, #368]	@ (80016a0 <HAL_DMA_Abort_IT+0x1f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d030      	beq.n	8001594 <HAL_DMA_Abort_IT+0xe4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a5b      	ldr	r2, [pc, #364]	@ (80016a4 <HAL_DMA_Abort_IT+0x1f4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d028      	beq.n	800158e <HAL_DMA_Abort_IT+0xde>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a52      	ldr	r2, [pc, #328]	@ (800168c <HAL_DMA_Abort_IT+0x1dc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d020      	beq.n	8001588 <HAL_DMA_Abort_IT+0xd8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a57      	ldr	r2, [pc, #348]	@ (80016a8 <HAL_DMA_Abort_IT+0x1f8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <HAL_DMA_Abort_IT+0xd4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a55      	ldr	r2, [pc, #340]	@ (80016ac <HAL_DMA_Abort_IT+0x1fc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <HAL_DMA_Abort_IT+0xd0>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a54      	ldr	r2, [pc, #336]	@ (80016b0 <HAL_DMA_Abort_IT+0x200>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00a      	beq.n	800157a <HAL_DMA_Abort_IT+0xca>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_DMA_Abort_IT+0x204>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <HAL_DMA_Abort_IT+0xc4>
 800156e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001572:	e01b      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 8001574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001578:	e018      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 800157a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157e:	e015      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 8001580:	2310      	movs	r3, #16
 8001582:	e013      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 8001584:	2301      	movs	r3, #1
 8001586:	e011      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 8001588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800158c:	e00e      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 800158e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001592:	e00b      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 8001594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001598:	e008      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 800159a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159e:	e005      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	e002      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 80015a6:	2310      	movs	r3, #16
 80015a8:	e000      	b.n	80015ac <HAL_DMA_Abort_IT+0xfc>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4a42      	ldr	r2, [pc, #264]	@ (80016b8 <HAL_DMA_Abort_IT+0x208>)
 80015ae:	6053      	str	r3, [r2, #4]
 80015b0:	e057      	b.n	8001662 <HAL_DMA_Abort_IT+0x1b2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <HAL_DMA_Abort_IT+0x1e0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04f      	beq.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a34      	ldr	r2, [pc, #208]	@ (8001694 <HAL_DMA_Abort_IT+0x1e4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d048      	beq.n	8001658 <HAL_DMA_Abort_IT+0x1a8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a33      	ldr	r2, [pc, #204]	@ (8001698 <HAL_DMA_Abort_IT+0x1e8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d040      	beq.n	8001652 <HAL_DMA_Abort_IT+0x1a2>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a31      	ldr	r2, [pc, #196]	@ (800169c <HAL_DMA_Abort_IT+0x1ec>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d038      	beq.n	800164c <HAL_DMA_Abort_IT+0x19c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <HAL_DMA_Abort_IT+0x1f0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d030      	beq.n	8001646 <HAL_DMA_Abort_IT+0x196>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2e      	ldr	r2, [pc, #184]	@ (80016a4 <HAL_DMA_Abort_IT+0x1f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d028      	beq.n	8001640 <HAL_DMA_Abort_IT+0x190>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a26      	ldr	r2, [pc, #152]	@ (800168c <HAL_DMA_Abort_IT+0x1dc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d020      	beq.n	800163a <HAL_DMA_Abort_IT+0x18a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2a      	ldr	r2, [pc, #168]	@ (80016a8 <HAL_DMA_Abort_IT+0x1f8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_DMA_Abort_IT+0x186>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <HAL_DMA_Abort_IT+0x1fc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <HAL_DMA_Abort_IT+0x182>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <HAL_DMA_Abort_IT+0x200>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <HAL_DMA_Abort_IT+0x204>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_DMA_Abort_IT+0x176>
 8001620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001624:	e01b      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162a:	e018      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 800162c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001630:	e015      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001632:	2310      	movs	r3, #16
 8001634:	e013      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001636:	2301      	movs	r3, #1
 8001638:	e011      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 800163a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800163e:	e00e      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001640:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001644:	e00b      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001646:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800164a:	e008      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 800164c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001650:	e005      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001652:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001656:	e002      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 8001658:	2310      	movs	r3, #16
 800165a:	e000      	b.n	800165e <HAL_DMA_Abort_IT+0x1ae>
 800165c:	2301      	movs	r3, #1
 800165e:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_DMA_Abort_IT+0x20c>)
 8001660:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
    } 
  }
  return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020080 	.word	0x40020080
 8001690:	40020008 	.word	0x40020008
 8001694:	4002001c 	.word	0x4002001c
 8001698:	40020030 	.word	0x40020030
 800169c:	40020044 	.word	0x40020044
 80016a0:	40020058 	.word	0x40020058
 80016a4:	4002006c 	.word	0x4002006c
 80016a8:	40020408 	.word	0x40020408
 80016ac:	4002041c 	.word	0x4002041c
 80016b0:	40020430 	.word	0x40020430
 80016b4:	40020444 	.word	0x40020444
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020000 	.word	0x40020000

080016c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	2204      	movs	r2, #4
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80f1 	beq.w	80018cc <HAL_DMA_IRQHandler+0x20c>
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80eb 	beq.w	80018cc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0204 	bic.w	r2, r2, #4
 8001712:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <HAL_DMA_IRQHandler+0x1d8>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d958      	bls.n	80017d2 <HAL_DMA_IRQHandler+0x112>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a5d      	ldr	r2, [pc, #372]	@ (800189c <HAL_DMA_IRQHandler+0x1dc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d04f      	beq.n	80017ca <HAL_DMA_IRQHandler+0x10a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5c      	ldr	r2, [pc, #368]	@ (80018a0 <HAL_DMA_IRQHandler+0x1e0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d048      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x106>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a5a      	ldr	r2, [pc, #360]	@ (80018a4 <HAL_DMA_IRQHandler+0x1e4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d040      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x100>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a59      	ldr	r2, [pc, #356]	@ (80018a8 <HAL_DMA_IRQHandler+0x1e8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d038      	beq.n	80017ba <HAL_DMA_IRQHandler+0xfa>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a57      	ldr	r2, [pc, #348]	@ (80018ac <HAL_DMA_IRQHandler+0x1ec>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d030      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xf4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a56      	ldr	r2, [pc, #344]	@ (80018b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d028      	beq.n	80017ae <HAL_DMA_IRQHandler+0xee>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a4d      	ldr	r2, [pc, #308]	@ (8001898 <HAL_DMA_IRQHandler+0x1d8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d020      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xe8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a52      	ldr	r2, [pc, #328]	@ (80018b4 <HAL_DMA_IRQHandler+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d019      	beq.n	80017a4 <HAL_DMA_IRQHandler+0xe4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a50      	ldr	r2, [pc, #320]	@ (80018b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d012      	beq.n	80017a0 <HAL_DMA_IRQHandler+0xe0>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a4f      	ldr	r2, [pc, #316]	@ (80018bc <HAL_DMA_IRQHandler+0x1fc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00a      	beq.n	800179a <HAL_DMA_IRQHandler+0xda>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a4d      	ldr	r2, [pc, #308]	@ (80018c0 <HAL_DMA_IRQHandler+0x200>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d102      	bne.n	8001794 <HAL_DMA_IRQHandler+0xd4>
 800178e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001792:	e01b      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 8001794:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001798:	e018      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 800179a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800179e:	e015      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017a0:	2340      	movs	r3, #64	@ 0x40
 80017a2:	e013      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e011      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017be:	e005      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c4:	e002      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x10c>
 80017ca:	2304      	movs	r3, #4
 80017cc:	4a3d      	ldr	r2, [pc, #244]	@ (80018c4 <HAL_DMA_IRQHandler+0x204>)
 80017ce:	6053      	str	r3, [r2, #4]
 80017d0:	e057      	b.n	8001882 <HAL_DMA_IRQHandler+0x1c2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a31      	ldr	r2, [pc, #196]	@ (800189c <HAL_DMA_IRQHandler+0x1dc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04f      	beq.n	800187c <HAL_DMA_IRQHandler+0x1bc>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2f      	ldr	r2, [pc, #188]	@ (80018a0 <HAL_DMA_IRQHandler+0x1e0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d048      	beq.n	8001878 <HAL_DMA_IRQHandler+0x1b8>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2e      	ldr	r2, [pc, #184]	@ (80018a4 <HAL_DMA_IRQHandler+0x1e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d040      	beq.n	8001872 <HAL_DMA_IRQHandler+0x1b2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2c      	ldr	r2, [pc, #176]	@ (80018a8 <HAL_DMA_IRQHandler+0x1e8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d038      	beq.n	800186c <HAL_DMA_IRQHandler+0x1ac>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2b      	ldr	r2, [pc, #172]	@ (80018ac <HAL_DMA_IRQHandler+0x1ec>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d030      	beq.n	8001866 <HAL_DMA_IRQHandler+0x1a6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a29      	ldr	r2, [pc, #164]	@ (80018b0 <HAL_DMA_IRQHandler+0x1f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d028      	beq.n	8001860 <HAL_DMA_IRQHandler+0x1a0>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <HAL_DMA_IRQHandler+0x1d8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d020      	beq.n	800185a <HAL_DMA_IRQHandler+0x19a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_DMA_IRQHandler+0x1f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_DMA_IRQHandler+0x196>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d012      	beq.n	8001852 <HAL_DMA_IRQHandler+0x192>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <HAL_DMA_IRQHandler+0x1fc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00a      	beq.n	800184c <HAL_DMA_IRQHandler+0x18c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a21      	ldr	r2, [pc, #132]	@ (80018c0 <HAL_DMA_IRQHandler+0x200>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <HAL_DMA_IRQHandler+0x186>
 8001840:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001844:	e01b      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001846:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800184a:	e018      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 800184c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001850:	e015      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001852:	2340      	movs	r3, #64	@ 0x40
 8001854:	e013      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001856:	2304      	movs	r3, #4
 8001858:	e011      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 800185a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800185e:	e00e      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001860:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001864:	e00b      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001866:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800186a:	e008      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 800186c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001870:	e005      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001876:	e002      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 8001878:	2340      	movs	r3, #64	@ 0x40
 800187a:	e000      	b.n	800187e <HAL_DMA_IRQHandler+0x1be>
 800187c:	2304      	movs	r3, #4
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <HAL_DMA_IRQHandler+0x208>)
 8001880:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8136 	beq.w	8001af8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001894:	e130      	b.n	8001af8 <HAL_DMA_IRQHandler+0x438>
 8001896:	bf00      	nop
 8001898:	40020080 	.word	0x40020080
 800189c:	40020008 	.word	0x40020008
 80018a0:	4002001c 	.word	0x4002001c
 80018a4:	40020030 	.word	0x40020030
 80018a8:	40020044 	.word	0x40020044
 80018ac:	40020058 	.word	0x40020058
 80018b0:	4002006c 	.word	0x4002006c
 80018b4:	40020408 	.word	0x40020408
 80018b8:	4002041c 	.word	0x4002041c
 80018bc:	40020430 	.word	0x40020430
 80018c0:	40020444 	.word	0x40020444
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	2202      	movs	r2, #2
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80dd 	beq.w	8001a98 <HAL_DMA_IRQHandler+0x3d8>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80d7 	beq.w	8001a98 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020a 	bic.w	r2, r2, #10
 8001906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b7b      	ldr	r3, [pc, #492]	@ (8001b04 <HAL_DMA_IRQHandler+0x444>)
 8001918:	429a      	cmp	r2, r3
 800191a:	d958      	bls.n	80019ce <HAL_DMA_IRQHandler+0x30e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a79      	ldr	r2, [pc, #484]	@ (8001b08 <HAL_DMA_IRQHandler+0x448>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d04f      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x306>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a78      	ldr	r2, [pc, #480]	@ (8001b0c <HAL_DMA_IRQHandler+0x44c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d048      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x302>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a76      	ldr	r2, [pc, #472]	@ (8001b10 <HAL_DMA_IRQHandler+0x450>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d040      	beq.n	80019bc <HAL_DMA_IRQHandler+0x2fc>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a75      	ldr	r2, [pc, #468]	@ (8001b14 <HAL_DMA_IRQHandler+0x454>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d038      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x2f6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a73      	ldr	r2, [pc, #460]	@ (8001b18 <HAL_DMA_IRQHandler+0x458>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d030      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x2f0>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a72      	ldr	r2, [pc, #456]	@ (8001b1c <HAL_DMA_IRQHandler+0x45c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d028      	beq.n	80019aa <HAL_DMA_IRQHandler+0x2ea>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a69      	ldr	r2, [pc, #420]	@ (8001b04 <HAL_DMA_IRQHandler+0x444>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d020      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x2e4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	@ (8001b20 <HAL_DMA_IRQHandler+0x460>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d019      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6c      	ldr	r2, [pc, #432]	@ (8001b24 <HAL_DMA_IRQHandler+0x464>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d012      	beq.n	800199c <HAL_DMA_IRQHandler+0x2dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6b      	ldr	r2, [pc, #428]	@ (8001b28 <HAL_DMA_IRQHandler+0x468>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00a      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2d6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a69      	ldr	r2, [pc, #420]	@ (8001b2c <HAL_DMA_IRQHandler+0x46c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d102      	bne.n	8001990 <HAL_DMA_IRQHandler+0x2d0>
 800198a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800198e:	e01b      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 8001990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001994:	e018      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 8001996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800199a:	e015      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 800199c:	2320      	movs	r3, #32
 800199e:	e013      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e011      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a8:	e00e      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80019ae:	e00b      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b4:	e008      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ba:	e005      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c0:	e002      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019c2:	2320      	movs	r3, #32
 80019c4:	e000      	b.n	80019c8 <HAL_DMA_IRQHandler+0x308>
 80019c6:	2302      	movs	r3, #2
 80019c8:	4a59      	ldr	r2, [pc, #356]	@ (8001b30 <HAL_DMA_IRQHandler+0x470>)
 80019ca:	6053      	str	r3, [r2, #4]
 80019cc:	e057      	b.n	8001a7e <HAL_DMA_IRQHandler+0x3be>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001b08 <HAL_DMA_IRQHandler+0x448>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d04f      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x3b8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <HAL_DMA_IRQHandler+0x44c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d048      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x3b4>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001b10 <HAL_DMA_IRQHandler+0x450>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d040      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x3ae>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <HAL_DMA_IRQHandler+0x454>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d038      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x3a8>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a47      	ldr	r2, [pc, #284]	@ (8001b18 <HAL_DMA_IRQHandler+0x458>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d030      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x3a2>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a45      	ldr	r2, [pc, #276]	@ (8001b1c <HAL_DMA_IRQHandler+0x45c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d028      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x39c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b04 <HAL_DMA_IRQHandler+0x444>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d020      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x396>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a41      	ldr	r2, [pc, #260]	@ (8001b20 <HAL_DMA_IRQHandler+0x460>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d019      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x392>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a40      	ldr	r2, [pc, #256]	@ (8001b24 <HAL_DMA_IRQHandler+0x464>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d012      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x38e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b28 <HAL_DMA_IRQHandler+0x468>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00a      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x388>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <HAL_DMA_IRQHandler+0x46c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x382>
 8001a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a40:	e01b      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a46:	e018      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4c:	e015      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a4e:	2320      	movs	r3, #32
 8001a50:	e013      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e011      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5a:	e00e      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a60:	e00b      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a66:	e008      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a6c:	e005      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a72:	e002      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a74:	2320      	movs	r3, #32
 8001a76:	e000      	b.n	8001a7a <HAL_DMA_IRQHandler+0x3ba>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8001b34 <HAL_DMA_IRQHandler+0x474>)
 8001a7c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d034      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a96:	e02f      	b.n	8001af8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d028      	beq.n	8001afa <HAL_DMA_IRQHandler+0x43a>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d023      	beq.n	8001afa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020e 	bic.w	r2, r2, #14
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
    }
  }
  return;
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
}
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020080 	.word	0x40020080
 8001b08:	40020008 	.word	0x40020008
 8001b0c:	4002001c 	.word	0x4002001c
 8001b10:	40020030 	.word	0x40020030
 8001b14:	40020044 	.word	0x40020044
 8001b18:	40020058 	.word	0x40020058
 8001b1c:	4002006c 	.word	0x4002006c
 8001b20:	40020408 	.word	0x40020408
 8001b24:	4002041c 	.word	0x4002041c
 8001b28:	40020430 	.word	0x40020430
 8001b2c:	40020444 	.word	0x40020444
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020000 	.word	0x40020000

08001b38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d108      	bne.n	8001b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b76:	e007      	b.n	8001b88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b08b      	sub	sp, #44	@ 0x2c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e179      	b.n	8001e9c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8168 	bne.w	8001e96 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a96      	ldr	r2, [pc, #600]	@ (8001e24 <HAL_GPIO_Init+0x290>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bd0:	4a94      	ldr	r2, [pc, #592]	@ (8001e24 <HAL_GPIO_Init+0x290>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d875      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a94      	ldr	r2, [pc, #592]	@ (8001e28 <HAL_GPIO_Init+0x294>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d058      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bdc:	4a92      	ldr	r2, [pc, #584]	@ (8001e28 <HAL_GPIO_Init+0x294>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d86f      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001be2:	4a92      	ldr	r2, [pc, #584]	@ (8001e2c <HAL_GPIO_Init+0x298>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d052      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001be8:	4a90      	ldr	r2, [pc, #576]	@ (8001e2c <HAL_GPIO_Init+0x298>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d869      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bee:	4a90      	ldr	r2, [pc, #576]	@ (8001e30 <HAL_GPIO_Init+0x29c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04c      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8001e30 <HAL_GPIO_Init+0x29c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d863      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a8e      	ldr	r2, [pc, #568]	@ (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d046      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001c00:	4a8c      	ldr	r2, [pc, #560]	@ (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d85d      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d82a      	bhi.n	8001c60 <HAL_GPIO_Init+0xcc>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d859      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <HAL_GPIO_Init+0x80>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c7b 	.word	0x08001c7b
 8001c20:	08001cbd 	.word	0x08001cbd
 8001c24:	08001cc3 	.word	0x08001cc3
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cc3 	.word	0x08001cc3
 8001c30:	08001cc3 	.word	0x08001cc3
 8001c34:	08001cc3 	.word	0x08001cc3
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001cc3 	.word	0x08001cc3
 8001c40:	08001cc3 	.word	0x08001cc3
 8001c44:	08001cc3 	.word	0x08001cc3
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001cc3 	.word	0x08001cc3
 8001c50:	08001cc3 	.word	0x08001cc3
 8001c54:	08001cc3 	.word	0x08001cc3
 8001c58:	08001c71 	.word	0x08001c71
 8001c5c:	08001c85 	.word	0x08001c85
 8001c60:	4a75      	ldr	r2, [pc, #468]	@ (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e029      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e024      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01f      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e01a      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e013      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e009      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e003      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          break;
 8001cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	@ 0xff
 8001cc8:	d801      	bhi.n	8001cce <HAL_GPIO_Init+0x13a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_Init+0x13e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	@ 0xff
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_GPIO_Init+0x14c>
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x152>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	3b08      	subs	r3, #8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	210f      	movs	r1, #15
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80c1 	beq.w	8001e96 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d14:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a48      	ldr	r2, [pc, #288]	@ (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2c:	4a44      	ldr	r2, [pc, #272]	@ (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3c      	ldr	r2, [pc, #240]	@ (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <HAL_GPIO_Init+0x2b4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x200>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3a      	ldr	r2, [pc, #232]	@ (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1fc>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a39      	ldr	r2, [pc, #228]	@ (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a38      	ldr	r2, [pc, #224]	@ (8001e54 <HAL_GPIO_Init+0x2c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1f4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a37      	ldr	r2, [pc, #220]	@ (8001e58 <HAL_GPIO_Init+0x2c4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1f0>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e00a      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d84:	2306      	movs	r3, #6
 8001d86:	e008      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001daa:	4925      	ldr	r1, [pc, #148]	@ (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc4:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4924      	ldr	r1, [pc, #144]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4920      	ldr	r1, [pc, #128]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	491a      	ldr	r1, [pc, #104]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4916      	ldr	r1, [pc, #88]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d025      	beq.n	8001e60 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4910      	ldr	r1, [pc, #64]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e025      	b.n	8001e6e <HAL_GPIO_Init+0x2da>
 8001e22:	bf00      	nop
 8001e24:	10320000 	.word	0x10320000
 8001e28:	10310000 	.word	0x10310000
 8001e2c:	10220000 	.word	0x10220000
 8001e30:	10210000 	.word	0x10210000
 8001e34:	10120000 	.word	0x10120000
 8001e38:	10110000 	.word	0x10110000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010800 	.word	0x40010800
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40011400 	.word	0x40011400
 8001e54:	40011800 	.word	0x40011800
 8001e58:	40011c00 	.word	0x40011c00
 8001e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e60:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4913      	ldr	r1, [pc, #76]	@ (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
 8001e86:	e006      	b.n	8001e96 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4909      	ldr	r1, [pc, #36]	@ (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	3301      	adds	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f47f ae7e 	bne.w	8001ba8 <HAL_GPIO_Init+0x14>
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	372c      	adds	r7, #44	@ 0x2c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0e8      	b.n	80020a0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f007 fb8e 	bl	8009604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fab0 	bl	8005460 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0a:	f003 fa86 	bl	800541a <USB_CoreInit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0bf      	b.n	80020a0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fab4 	bl	8005494 <USB_SetCurrentMode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0b0      	b.n	80020a0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e03e      	b.n	8001fc2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	3311      	adds	r3, #17
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3310      	adds	r3, #16
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	3313      	adds	r3, #19
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3320      	adds	r3, #32
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3324      	adds	r3, #36	@ 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3bb      	bcc.n	8001f44 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e044      	b.n	800205c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3b5      	bcc.n	8001fd2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002070:	f003 fa1c 	bl	80054ac <USB_DevInit>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00c      	b.n	80020a0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f005 fc9c 	bl	80079d6 <USB_DevDisconnect>

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_PCD_Start+0x16>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e016      	b.n	80020ec <HAL_PCD_Start+0x44>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 f9b2 	bl	8005434 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020d0:	2101      	movs	r1, #1
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f007 fd11 	bl	8009afa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f005 fc70 	bl	80079c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f005 fc72 	bl	80079ea <USB_ReadInterrupts>
 8002106:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fb1a 	bl	800274c <PCD_EP_ISR_Handler>

    return;
 8002118:	e119      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800212c:	b29a      	uxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002136:	b292      	uxth	r2, r2
 8002138:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f007 fae4 	bl	800970a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f905 	bl	8002354 <HAL_PCD_SetAddress>

    return;
 800214a:	e100      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002168:	b292      	uxth	r2, r2
 800216a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800216e:	e0ee      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800218c:	b292      	uxth	r2, r2
 800218e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002192:	e0dc      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d027      	beq.n	80021ee <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0204 	bic.w	r2, r2, #4
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021be:	b29a      	uxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	b292      	uxth	r2, r2
 80021ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f007 fad4 	bl	800977c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021e6:	b292      	uxth	r2, r2
 80021e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021ec:	e0af      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8083 	beq.w	8002300 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	77fb      	strb	r3, [r7, #31]
 80021fe:	e010      	b.n	8002222 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	7ffb      	ldrb	r3, [r7, #31]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	441a      	add	r2, r3
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	b292      	uxth	r2, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	3320      	adds	r3, #32
 8002216:	443b      	add	r3, r7
 8002218:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	3301      	adds	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
 8002222:	7ffb      	ldrb	r3, [r7, #31]
 8002224:	2b07      	cmp	r3, #7
 8002226:	d9eb      	bls.n	8002200 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	b292      	uxth	r2, r2
 800223c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	b292      	uxth	r2, r2
 8002254:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002258:	bf00      	nop
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002262:	b29b      	uxth	r3, r3
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f6      	beq.n	800225a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227e:	b292      	uxth	r2, r2
 8002280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	77fb      	strb	r3, [r7, #31]
 8002288:	e00f      	b.n	80022aa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800228a:	7ffb      	ldrb	r3, [r7, #31]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	4611      	mov	r1, r2
 8002292:	7ffa      	ldrb	r2, [r7, #31]
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	440a      	add	r2, r1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	3320      	adds	r3, #32
 800229c:	443b      	add	r3, r7
 800229e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80022a2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
 80022a6:	3301      	adds	r3, #1
 80022a8:	77fb      	strb	r3, [r7, #31]
 80022aa:	7ffb      	ldrb	r3, [r7, #31]
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d9ec      	bls.n	800228a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	b292      	uxth	r2, r2
 80022c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022da:	b292      	uxth	r2, r2
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0204 	orr.w	r2, r2, #4
 80022f2:	b292      	uxth	r2, r2
 80022f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f007 fa25 	bl	8009748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022fe:	e026      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00f      	beq.n	800232a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800231c:	b292      	uxth	r2, r2
 800231e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f007 f9e3 	bl	80096ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002328:	e011      	b.n	800234e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002346:	b292      	uxth	r2, r2
 8002348:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800234c:	bf00      	nop
  }
}
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_PCD_SetAddress+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e012      	b.n	8002394 <HAL_PCD_SetAddress+0x40>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f005 fb09 	bl	800799c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	70fb      	strb	r3, [r7, #3]
 80023ae:	460b      	mov	r3, r1
 80023b0:	803b      	strh	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da0e      	bge.n	80023e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0207 	and.w	r2, r3, #7
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	3310      	adds	r3, #16
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	e00e      	b.n	80023fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 0207 	and.w	r2, r3, #7
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800240a:	883a      	ldrh	r2, [r7, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	78ba      	ldrb	r2, [r7, #2]
 8002414:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002416:	78bb      	ldrb	r3, [r7, #2]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d102      	bne.n	8002422 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_PCD_EP_Open+0x94>
 800242c:	2302      	movs	r3, #2
 800242e:	e00e      	b.n	800244e <HAL_PCD_EP_Open+0xb2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f852 	bl	80054e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800244c:	7afb      	ldrb	r3, [r7, #11]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002466:	2b00      	cmp	r3, #0
 8002468:	da0e      	bge.n	8002488 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0207 	and.w	r2, r3, #7
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3310      	adds	r3, #16
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	705a      	strb	r2, [r3, #1]
 8002486:	e00e      	b.n	80024a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_EP_Close+0x6a>
 80024bc:	2302      	movs	r3, #2
 80024be:	e00e      	b.n	80024de <HAL_PCD_EP_Close+0x88>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fbca 	bl	8005c68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	460b      	mov	r3, r1
 80024f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	f003 0207 	and.w	r2, r3, #7
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2200      	movs	r2, #0
 8002524:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2da      	uxtb	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6979      	ldr	r1, [r7, #20]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 fd81 	bl	8006040 <USB_EPStartXfer>

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 0207 	and.w	r2, r3, #7
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	f003 0207 	and.w	r2, r3, #7
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	3310      	adds	r3, #16
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2201      	movs	r2, #1
 80025c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6979      	ldr	r1, [r7, #20]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fd33 	bl	8006040 <USB_EPStartXfer>

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	7912      	ldrb	r2, [r2, #4]
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e04c      	b.n	800269c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002606:	2b00      	cmp	r3, #0
 8002608:	da0e      	bge.n	8002628 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 0207 	and.w	r2, r3, #7
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	3310      	adds	r3, #16
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	705a      	strb	r2, [r3, #1]
 8002626:	e00c      	b.n	8002642 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_PCD_EP_SetStall+0x7e>
 800265e:	2302      	movs	r3, #2
 8002660:	e01c      	b.n	800269c <HAL_PCD_EP_SetStall+0xb8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68f9      	ldr	r1, [r7, #12]
 8002670:	4618      	mov	r0, r3
 8002672:	f005 f896 	bl	80077a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	2b00      	cmp	r3, #0
 800267e:	d108      	bne.n	8002692 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f005 f9bb 	bl	8007a08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	7912      	ldrb	r2, [r2, #4]
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e040      	b.n	8002744 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da0e      	bge.n	80026e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 0207 	and.w	r2, r3, #7
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	3310      	adds	r3, #16
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	705a      	strb	r2, [r3, #1]
 80026e6:	e00e      	b.n	8002706 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 0207 	and.w	r2, r3, #7
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_PCD_EP_ClrStall+0x82>
 8002722:	2302      	movs	r3, #2
 8002724:	e00e      	b.n	8002744 <HAL_PCD_EP_ClrStall+0xa0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f005 f884 	bl	8007842 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b096      	sub	sp, #88	@ 0x58
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002754:	e3bb      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800275e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002762:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002770:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 8175 	bne.w	8002a64 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800277a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d14e      	bne.n	8002824 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002796:	81fb      	strh	r3, [r7, #14]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	89fb      	ldrh	r3, [r7, #14]
 800279e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3310      	adds	r3, #16
 80027ae:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	3302      	adds	r3, #2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	441a      	add	r2, r3
 80027e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027ea:	2100      	movs	r1, #0
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f006 ff64 	bl	80096ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7b5b      	ldrb	r3, [r3, #13]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8368 	beq.w	8002ece <PCD_EP_ISR_Handler+0x782>
 80027fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8363 	bne.w	8002ece <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7b5b      	ldrb	r3, [r3, #13]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	735a      	strb	r2, [r3, #13]
 8002822:	e354      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800282a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002836:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800283a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283e:	2b00      	cmp	r3, #0
 8002840:	d034      	beq.n	80028ac <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	3306      	adds	r3, #6
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800286a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800287a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800287c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800287e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002880:	b29b      	uxth	r3, r3
 8002882:	f005 f912 	bl	8007aaa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29a      	uxth	r2, r3
 800288e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002892:	4013      	ands	r3, r2
 8002894:	823b      	strh	r3, [r7, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	8a3a      	ldrh	r2, [r7, #16]
 800289c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028a0:	b292      	uxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f006 fedb 	bl	8009660 <HAL_PCD_SetupStageCallback>
 80028aa:	e310      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f280 830c 	bge.w	8002ece <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80028c2:	4013      	ands	r3, r2
 80028c4:	83fb      	strh	r3, [r7, #30]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	8bfa      	ldrh	r2, [r7, #30]
 80028cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028d0:	b292      	uxth	r2, r2
 80028d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	3306      	adds	r3, #6
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d019      	beq.n	800293c <PCD_EP_ISR_Handler+0x1f0>
 8002908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800291c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002920:	b29b      	uxth	r3, r3
 8002922:	f005 f8c2 	bl	8007aaa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	441a      	add	r2, r3
 8002930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002932:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002934:	2100      	movs	r1, #0
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f006 fea4 	bl	8009684 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002946:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800294a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 82bd 	bne.w	8002ece <PCD_EP_ISR_Handler+0x782>
 8002954:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002958:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800295c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002960:	f000 82b5 	beq.w	8002ece <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b3e      	cmp	r3, #62	@ 0x3e
 800299a:	d91d      	bls.n	80029d8 <PCD_EP_ISR_Handler+0x28c>
 800299c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <PCD_EP_ISR_Handler+0x26a>
 80029b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b2:	3b01      	subs	r3, #1
 80029b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029be:	b29b      	uxth	r3, r3
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e026      	b.n	8002a26 <PCD_EP_ISR_Handler+0x2da>
 80029d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <PCD_EP_ISR_Handler+0x2aa>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e017      	b.n	8002a26 <PCD_EP_ISR_Handler+0x2da>
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <PCD_EP_ISR_Handler+0x2c4>
 8002a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a36:	827b      	strh	r3, [r7, #18]
 8002a38:	8a7b      	ldrh	r3, [r7, #18]
 8002a3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002a3e:	827b      	strh	r3, [r7, #18]
 8002a40:	8a7b      	ldrh	r3, [r7, #18]
 8002a42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a46:	827b      	strh	r3, [r7, #18]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	8a7b      	ldrh	r3, [r7, #18]
 8002a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8013      	strh	r3, [r2, #0]
 8002a62:	e234      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a78:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f280 80fc 	bge.w	8002c7a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a98:	4013      	ands	r3, r2
 8002a9a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002ab0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ab8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad0:	7b1b      	ldrb	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d125      	bne.n	8002b22 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3306      	adds	r3, #6
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002b02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8092 	beq.w	8002c30 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b12:	6959      	ldr	r1, [r3, #20]
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	88da      	ldrh	r2, [r3, #6]
 8002b18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b1c:	f004 ffc5 	bl	8007aaa <USB_ReadPMA>
 8002b20:	e086      	b.n	8002c30 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d10a      	bne.n	8002b40 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9d9 	bl	8002eea <HAL_PCD_EP_DB_Receive>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002b3e:	e077      	b.n	8002c30 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002bca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02e      	beq.n	8002c30 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd8:	6959      	ldr	r1, [r3, #20]
 8002bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bdc:	891a      	ldrh	r2, [r3, #8]
 8002bde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002be2:	f004 ff62 	bl	8007aaa <USB_ReadPMA>
 8002be6:	e023      	b.n	8002c30 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3306      	adds	r3, #6
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c10:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002c14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c22:	6959      	ldr	r1, [r3, #20]
 8002c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c26:	895a      	ldrh	r2, [r3, #10]
 8002c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c2c:	f004 ff3d 	bl	8007aaa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c38:	441a      	add	r2, r3
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c46:	441a      	add	r2, r3
 8002c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <PCD_EP_ISR_Handler+0x514>
 8002c54:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d206      	bcs.n	8002c6e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f006 fd0c 	bl	8009684 <HAL_PCD_DataOutStageCallback>
 8002c6c:	e005      	b.n	8002c7a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f9e3 	bl	8006040 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8123 	beq.w	8002ece <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c88:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	3310      	adds	r3, #16
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	441a      	add	r2, r3
 8002cc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f040 80a2 	bne.w	8002e26 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cea:	7b1b      	ldrb	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8093 	beq.w	8002e18 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d046      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d126      	bne.n	8002d54 <PCD_EP_ISR_Handler+0x608>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	4413      	add	r3, r2
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011a      	lsls	r2, r3, #4
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	e061      	b.n	8002e18 <PCD_EP_ISR_Handler+0x6cc>
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d15d      	bne.n	8002e18 <PCD_EP_ISR_Handler+0x6cc>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	4413      	add	r3, r2
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	011a      	lsls	r2, r3, #4
 8002d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d86:	2200      	movs	r2, #0
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	e045      	b.n	8002e18 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d126      	bne.n	8002de8 <PCD_EP_ISR_Handler+0x69c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	4413      	add	r3, r2
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	011a      	lsls	r2, r3, #4
 8002db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dba:	4413      	add	r3, r2
 8002dbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	e017      	b.n	8002e18 <PCD_EP_ISR_Handler+0x6cc>
 8002de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d113      	bne.n	8002e18 <PCD_EP_ISR_Handler+0x6cc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfe:	4413      	add	r3, r2
 8002e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	011a      	lsls	r2, r3, #4
 8002e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f006 fc4b 	bl	80096ba <HAL_PCD_DataInStageCallback>
 8002e24:	e053      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d146      	bne.n	8002ec0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	3302      	adds	r3, #2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d907      	bls.n	8002e7a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	619a      	str	r2, [r3, #24]
 8002e78:	e002      	b.n	8002e80 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f006 fc13 	bl	80096ba <HAL_PCD_DataInStageCallback>
 8002e94:	e01b      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e9e:	441a      	add	r2, r3
 8002ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002eac:	441a      	add	r2, r3
 8002eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f8c1 	bl	8006040 <USB_EPStartXfer>
 8002ebe:	e006      	b.n	8002ece <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ec0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f91b 	bl	8003104 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f6ff ac3b 	blt.w	8002756 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3758      	adds	r7, #88	@ 0x58
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b088      	sub	sp, #32
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d07e      	beq.n	8003000 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	3302      	adds	r3, #2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	8b7b      	ldrh	r3, [r7, #26]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d306      	bcc.n	8002f44 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	8b7b      	ldrh	r3, [r7, #26]
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	e002      	b.n	8002f4a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d123      	bne.n	8002f9a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6c:	833b      	strh	r3, [r7, #24]
 8002f6e:	8b3b      	ldrh	r3, [r7, #24]
 8002f70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f74:	833b      	strh	r3, [r7, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	8b3b      	ldrh	r3, [r7, #24]
 8002f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01f      	beq.n	8002fe4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fbe:	82fb      	strh	r3, [r7, #22]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fe4:	8b7b      	ldrh	r3, [r7, #26]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8087 	beq.w	80030fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6959      	ldr	r1, [r3, #20]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	891a      	ldrh	r2, [r3, #8]
 8002ff8:	8b7b      	ldrh	r3, [r7, #26]
 8002ffa:	f004 fd56 	bl	8007aaa <USB_ReadPMA>
 8002ffe:	e07c      	b.n	80030fa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	3306      	adds	r3, #6
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003028:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	8b7b      	ldrh	r3, [r7, #26]
 8003030:	429a      	cmp	r2, r3
 8003032:	d306      	bcc.n	8003042 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	8b7b      	ldrh	r3, [r7, #26]
 800303a:	1ad2      	subs	r2, r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	619a      	str	r2, [r3, #24]
 8003040:	e002      	b.n	8003048 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d123      	bne.n	8003098 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306a:	83fb      	strh	r3, [r7, #30]
 800306c:	8bfb      	ldrh	r3, [r7, #30]
 800306e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003072:	83fb      	strh	r3, [r7, #30]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	8bfb      	ldrh	r3, [r7, #30]
 8003084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800308c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003094:	b29b      	uxth	r3, r3
 8003096:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030bc:	83bb      	strh	r3, [r7, #28]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	8bbb      	ldrh	r3, [r7, #28]
 80030ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030e2:	8b7b      	ldrh	r3, [r7, #26]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	895a      	ldrh	r2, [r3, #10]
 80030f4:	8b7b      	ldrh	r3, [r7, #26]
 80030f6:	f004 fcd8 	bl	8007aaa <USB_ReadPMA>
    }
  }

  return count;
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0a4      	sub	sp, #144	@ 0x90
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 81dd 	beq.w	80034d8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	3302      	adds	r3, #2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003146:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003152:	429a      	cmp	r2, r3
 8003154:	d907      	bls.n	8003166 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	619a      	str	r2, [r3, #24]
 8003164:	e002      	b.n	800316c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 80b9 	bne.w	80032e8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d126      	bne.n	80031cc <HAL_PCD_EP_DB_Transmit+0xc8>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	4413      	add	r3, r2
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	011a      	lsls	r2, r3, #4
 800319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319e:	4413      	add	r3, r2
 80031a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	e01a      	b.n	8003202 <HAL_PCD_EP_DB_Transmit+0xfe>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d116      	bne.n	8003202 <HAL_PCD_EP_DB_Transmit+0xfe>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	4413      	add	r3, r2
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	011a      	lsls	r2, r3, #4
 80031f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f4:	4413      	add	r3, r2
 80031f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	2200      	movs	r2, #0
 8003200:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d126      	bne.n	800325e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	011a      	lsls	r2, r3, #4
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003242:	b29a      	uxth	r2, r3
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003256:	b29a      	uxth	r2, r3
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	801a      	strh	r2, [r3, #0]
 800325c:	e017      	b.n	800328e <HAL_PCD_EP_DB_Transmit+0x18a>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d113      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	4413      	add	r3, r2
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	011a      	lsls	r2, r3, #4
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	4413      	add	r3, r2
 8003282:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	2200      	movs	r2, #0
 800328c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f006 fa10 	bl	80096ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 82fc 	beq.w	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c0:	82fb      	strh	r3, [r7, #22]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	441a      	add	r2, r3
 80032d0:	8afb      	ldrh	r3, [r7, #22]
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	e2da      	b.n	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d021      	beq.n	8003336 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800332a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800332e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 82ae 	bne.w	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800334a:	441a      	add	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003358:	441a      	add	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	d30b      	bcc.n	8003382 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	621a      	str	r2, [r3, #32]
 8003380:	e017      	b.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800338a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800338e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800339a:	e00a      	b.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d165      	bne.n	8003486 <HAL_PCD_EP_DB_Transmit+0x382>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ce:	4413      	add	r3, r2
 80033d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	011a      	lsls	r2, r3, #4
 80033d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033da:	4413      	add	r3, r2
 80033dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80033f8:	d91d      	bls.n	8003436 <HAL_PCD_EP_DB_Transmit+0x332>
 80033fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_PCD_EP_DB_Transmit+0x310>
 800340e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003410:	3b01      	subs	r3, #1
 8003412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29a      	uxth	r2, r3
 800341a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800341c:	b29b      	uxth	r3, r3
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	b29b      	uxth	r3, r3
 8003422:	4313      	orrs	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800342a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342e:	b29a      	uxth	r2, r3
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	801a      	strh	r2, [r3, #0]
 8003434:	e044      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_PCD_EP_DB_Transmit+0x350>
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344c:	b29a      	uxth	r2, r3
 800344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e035      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800345c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800346a:	3301      	adds	r3, #1
 800346c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800346e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29a      	uxth	r2, r3
 8003474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003476:	b29b      	uxth	r3, r3
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	b29b      	uxth	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	b29a      	uxth	r2, r3
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	e01c      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d118      	bne.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	647b      	str	r3, [r7, #68]	@ 0x44
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a2:	4413      	add	r3, r2
 80034a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	011a      	lsls	r2, r3, #4
 80034ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ae:	4413      	add	r3, r2
 80034b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6959      	ldr	r1, [r3, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	891a      	ldrh	r2, [r3, #8]
 80034cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f004 faa4 	bl	8007a1e <USB_WritePMA>
 80034d6:	e1e2      	b.n	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	3306      	adds	r3, #6
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003500:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800350c:	429a      	cmp	r2, r3
 800350e:	d307      	bcc.n	8003520 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003518:	1ad2      	subs	r2, r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	619a      	str	r2, [r3, #24]
 800351e:	e002      	b.n	8003526 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 80c0 	bne.w	80036b0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	785b      	ldrb	r3, [r3, #1]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d126      	bne.n	8003586 <HAL_PCD_EP_DB_Transmit+0x482>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003546:	b29b      	uxth	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800354c:	4413      	add	r3, r2
 800354e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	011a      	lsls	r2, r3, #4
 8003556:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003558:	4413      	add	r3, r2
 800355a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800355e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356a:	b29a      	uxth	r2, r3
 800356c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800357a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357e:	b29a      	uxth	r2, r3
 8003580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	e01a      	b.n	80035bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d116      	bne.n	80035bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	667b      	str	r3, [r7, #100]	@ 0x64
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800359c:	b29b      	uxth	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a2:	4413      	add	r3, r2
 80035a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	011a      	lsls	r2, r3, #4
 80035ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ae:	4413      	add	r3, r2
 80035b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b8:	2200      	movs	r2, #0
 80035ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d12b      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x51e>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d8:	b29b      	uxth	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035de:	4413      	add	r3, r2
 80035e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	011a      	lsls	r2, r3, #4
 80035e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ea:	4413      	add	r3, r2
 80035ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003600:	b29a      	uxth	r2, r3
 8003602:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003618:	b29a      	uxth	r2, r3
 800361a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	e017      	b.n	8003652 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d113      	bne.n	8003652 <HAL_PCD_EP_DB_Transmit+0x54e>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003632:	b29b      	uxth	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003638:	4413      	add	r3, r2
 800363a:	677b      	str	r3, [r7, #116]	@ 0x74
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	011a      	lsls	r2, r3, #4
 8003642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003644:	4413      	add	r3, r2
 8003646:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800364a:	673b      	str	r3, [r7, #112]	@ 0x70
 800364c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800364e:	2200      	movs	r2, #0
 8003650:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f006 f82e 	bl	80096ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	f040 811a 	bne.w	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003684:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]
 80036ae:	e0f6      	b.n	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	f040 80ca 	bne.w	800389e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003712:	441a      	add	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003720:	441a      	add	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	429a      	cmp	r2, r3
 8003730:	d30b      	bcc.n	800374a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	621a      	str	r2, [r3, #32]
 8003748:	e017      	b.n	800377a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003752:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003762:	e00a      	b.n	800377a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d165      	bne.n	8003854 <HAL_PCD_EP_DB_Transmit+0x750>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800379c:	4413      	add	r3, r2
 800379e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	011a      	lsls	r2, r3, #4
 80037a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a8:	4413      	add	r3, r2
 80037aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80037c6:	d91d      	bls.n	8003804 <HAL_PCD_EP_DB_Transmit+0x700>
 80037c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80037dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037de:	3b01      	subs	r3, #1
 80037e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	e041      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x784>
 8003804:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_PCD_EP_DB_Transmit+0x71e>
 800380c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381a:	b29a      	uxth	r2, r3
 800381c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	e032      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x784>
 8003822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800382a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_PCD_EP_DB_Transmit+0x738>
 8003836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003838:	3301      	adds	r3, #1
 800383a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b29a      	uxth	r2, r3
 8003842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003844:	b29b      	uxth	r3, r3
 8003846:	029b      	lsls	r3, r3, #10
 8003848:	b29b      	uxth	r3, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	b29a      	uxth	r2, r3
 800384e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	e019      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x784>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d115      	bne.n	8003888 <HAL_PCD_EP_DB_Transmit+0x784>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386a:	4413      	add	r3, r2
 800386c:	657b      	str	r3, [r7, #84]	@ 0x54
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	011a      	lsls	r2, r3, #4
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	4413      	add	r3, r2
 8003878:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800387c:	653b      	str	r3, [r7, #80]	@ 0x50
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003882:	b29a      	uxth	r2, r3
 8003884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003886:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6959      	ldr	r1, [r3, #20]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	895a      	ldrh	r2, [r3, #10]
 8003894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003898:	b29b      	uxth	r3, r3
 800389a:	f004 f8c0 	bl	8007a1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b8:	82bb      	strh	r3, [r7, #20]
 80038ba:	8abb      	ldrh	r3, [r7, #20]
 80038bc:	f083 0310 	eor.w	r3, r3, #16
 80038c0:	82bb      	strh	r3, [r7, #20]
 80038c2:	8abb      	ldrh	r3, [r7, #20]
 80038c4:	f083 0320 	eor.w	r3, r3, #32
 80038c8:	82bb      	strh	r3, [r7, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	441a      	add	r2, r3
 80038d8:	8abb      	ldrh	r3, [r7, #20]
 80038da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3790      	adds	r7, #144	@ 0x90
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	4613      	mov	r3, r2
 8003908:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	f003 0207 	and.w	r2, r3, #7
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	3310      	adds	r3, #16
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e009      	b.n	8003942 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800392e:	897a      	ldrh	r2, [r7, #10]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2200      	movs	r2, #0
 800394c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	b29a      	uxth	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	80da      	strh	r2, [r3, #6]
 8003956:	e00b      	b.n	8003970 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2201      	movs	r2, #1
 800395c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	b29a      	uxth	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	b29a      	uxth	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e272      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8087 	beq.w	8003aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800399c:	4b92      	ldr	r3, [pc, #584]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a8:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d112      	bne.n	80039da <HAL_RCC_OscConfig+0x5e>
 80039b4:	4b8c      	ldr	r3, [pc, #560]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c0:	d10b      	bne.n	80039da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c2:	4b89      	ldr	r3, [pc, #548]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d06c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x12c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d168      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e24c      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x76>
 80039e4:	4b80      	ldr	r3, [pc, #512]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7f      	ldr	r2, [pc, #508]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e02e      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x98>
 80039fa:	4b7b      	ldr	r3, [pc, #492]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a7a      	ldr	r2, [pc, #488]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b78      	ldr	r3, [pc, #480]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a77      	ldr	r2, [pc, #476]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0xbc>
 8003a1e:	4b72      	ldr	r3, [pc, #456]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a71      	ldr	r2, [pc, #452]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 8003a38:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b68      	ldr	r3, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a67      	ldr	r2, [pc, #412]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fb18 	bl	800108c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fb14 	bl	800108c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e200      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5d      	ldr	r3, [pc, #372]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe4>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fb04 	bl	800108c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fb00 	bl	800108c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1ec      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x10c>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ac2:	4b49      	ldr	r3, [pc, #292]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x18c>
 8003ace:	4b46      	ldr	r3, [pc, #280]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x176>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c0      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3d      	ldr	r3, [pc, #244]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4939      	ldr	r1, [pc, #228]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <HAL_RCC_OscConfig+0x270>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd fab9 	bl	800108c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fab5 	bl	800108c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a1      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2d      	ldr	r3, [pc, #180]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4927      	ldr	r1, [pc, #156]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <HAL_RCC_OscConfig+0x270>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fd fa98 	bl	800108c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fa94 	bl	800108c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e180      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d03a      	beq.n	8003c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d019      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fd fa78 	bl	800108c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fa74 	bl	800108c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e160      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f000 fa9c 	bl	80040fc <RCC_Delay>
 8003bc4:	e01c      	b.n	8003c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fa5e 	bl	800108c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd2:	e00f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd fa5a 	bl	800108c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d908      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e146      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	42420000 	.word	0x42420000
 8003bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	4b92      	ldr	r3, [pc, #584]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e9      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a6 	beq.w	8003d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b8b      	ldr	r3, [pc, #556]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	4b88      	ldr	r3, [pc, #544]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4a87      	ldr	r2, [pc, #540]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	61d3      	str	r3, [r2, #28]
 8003c2a:	4b85      	ldr	r3, [pc, #532]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b82      	ldr	r3, [pc, #520]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d118      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c52:	f7fd fa1b 	bl	800108c <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5a:	f7fd fa17 	bl	800108c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b64      	cmp	r3, #100	@ 0x64
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e103      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	4b75      	ldr	r3, [pc, #468]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x312>
 8003c80:	4b6f      	ldr	r3, [pc, #444]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	e02d      	b.n	8003cea <HAL_RCC_OscConfig+0x36e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x334>
 8003c96:	4b6a      	ldr	r3, [pc, #424]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a69      	ldr	r2, [pc, #420]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6213      	str	r3, [r2, #32]
 8003ca2:	4b67      	ldr	r3, [pc, #412]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a66      	ldr	r2, [pc, #408]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	6213      	str	r3, [r2, #32]
 8003cae:	e01c      	b.n	8003cea <HAL_RCC_OscConfig+0x36e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x356>
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a60      	ldr	r2, [pc, #384]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6213      	str	r3, [r2, #32]
 8003cd0:	e00b      	b.n	8003cea <HAL_RCC_OscConfig+0x36e>
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6213      	str	r3, [r2, #32]
 8003cde:	4b58      	ldr	r3, [pc, #352]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4a57      	ldr	r2, [pc, #348]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd f9cb 	bl	800108c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fd f9c7 	bl	800108c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0b1      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	4b4b      	ldr	r3, [pc, #300]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCC_OscConfig+0x37e>
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fd f9b5 	bl	800108c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fd f9b1 	bl	800108c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e09b      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	4b40      	ldr	r3, [pc, #256]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8087 	beq.w	8003e72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d64:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d061      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d146      	bne.n	8003e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b33      	ldr	r3, [pc, #204]	@ (8003e48 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fd f985 	bl	800108c <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fd f981 	bl	800108c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e06d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d98:	4b29      	ldr	r3, [pc, #164]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dac:	d108      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dae:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4921      	ldr	r1, [pc, #132]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a19      	ldr	r1, [r3, #32]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	491b      	ldr	r1, [pc, #108]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd f955 	bl	800108c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd f951 	bl	800108c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x46a>
 8003e04:	e035      	b.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_RCC_OscConfig+0x4cc>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f93e 	bl	800108c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd f93a 	bl	800108c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e026      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x498>
 8003e32:	e01e      	b.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e019      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
 8003e48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_OscConfig+0x500>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000

08003e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0d0      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b6a      	ldr	r3, [pc, #424]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d910      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b67      	ldr	r3, [pc, #412]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	4965      	ldr	r1, [pc, #404]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b63      	ldr	r3, [pc, #396]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0b8      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003edc:	4b59      	ldr	r3, [pc, #356]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a58      	ldr	r2, [pc, #352]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef4:	4b53      	ldr	r3, [pc, #332]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a52      	ldr	r2, [pc, #328]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003efe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f00:	4b50      	ldr	r3, [pc, #320]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	494d      	ldr	r1, [pc, #308]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d040      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b47      	ldr	r3, [pc, #284]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d115      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e07f      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b41      	ldr	r3, [pc, #260]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e073      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06b      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4936      	ldr	r1, [pc, #216]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f70:	f7fd f88c 	bl	800108c <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd f888 	bl	800108c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e053      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d210      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 0207 	bic.w	r2, r3, #7
 8003fb6:	4922      	ldr	r1, [pc, #136]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e032      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	4b19      	ldr	r3, [pc, #100]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4916      	ldr	r1, [pc, #88]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ffa:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	490e      	ldr	r1, [pc, #56]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800400e:	f000 f821 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	490a      	ldr	r1, [pc, #40]	@ (8004048 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a09      	ldr	r2, [pc, #36]	@ (800404c <HAL_RCC_ClockConfig+0x1cc>)
 8004028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCC_ClockConfig+0x1d0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fc ffea 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40022000 	.word	0x40022000
 8004044:	40021000 	.word	0x40021000
 8004048:	0800a554 	.word	0x0800a554
 800404c:	20000000 	.word	0x20000000
 8004050:	20000004 	.word	0x20000004

08004054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800406e:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b04      	cmp	r3, #4
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x30>
 800407e:	2b08      	cmp	r3, #8
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x36>
 8004082:	e027      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004084:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004086:	613b      	str	r3, [r7, #16]
      break;
 8004088:	e027      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	0c9b      	lsrs	r3, r3, #18
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a17      	ldr	r2, [pc, #92]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d010      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0c5b      	lsrs	r3, r3, #17
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a0d      	ldr	r2, [pc, #52]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x98>)
 80040b6:	fb03 f202 	mul.w	r2, r3, r2
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e004      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0c      	ldr	r2, [pc, #48]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	613b      	str	r3, [r7, #16]
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x98>)
 80040d6:	613b      	str	r3, [r7, #16]
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	693b      	ldr	r3, [r7, #16]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	0800a564 	.word	0x0800a564
 80040f4:	0800a574 	.word	0x0800a574
 80040f8:	003d0900 	.word	0x003d0900

080040fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <RCC_Delay+0x34>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0a      	ldr	r2, [pc, #40]	@ (8004134 <RCC_Delay+0x38>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0a5b      	lsrs	r3, r3, #9
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004118:	bf00      	nop
  }
  while (Delay --);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e5a      	subs	r2, r3, #1
 800411e:	60fa      	str	r2, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f9      	bne.n	8004118 <RCC_Delay+0x1c>
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	20000000 	.word	0x20000000
 8004134:	10624dd3 	.word	0x10624dd3

08004138 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d07d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004154:	2300      	movs	r3, #0
 8004156:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004158:	4b4f      	ldr	r3, [pc, #316]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10d      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004164:	4b4c      	ldr	r3, [pc, #304]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4a4b      	ldr	r2, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416e:	61d3      	str	r3, [r2, #28]
 8004170:	4b49      	ldr	r3, [pc, #292]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417c:	2301      	movs	r3, #1
 800417e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	4b46      	ldr	r3, [pc, #280]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d118      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418c:	4b43      	ldr	r3, [pc, #268]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a42      	ldr	r2, [pc, #264]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004198:	f7fc ff78 	bl	800108c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	e008      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a0:	f7fc ff74 	bl	800108c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	@ 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e06d      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b2:	4b3a      	ldr	r3, [pc, #232]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041be:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02e      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d027      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e6:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ec:	4b2c      	ldr	r3, [pc, #176]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041f2:	4a29      	ldr	r2, [pc, #164]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d014      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fc ff43 	bl	800108c <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fc ff3f 	bl	800108c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e036      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004220:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ee      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422c:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4917      	ldr	r1, [pc, #92]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	4313      	orrs	r3, r2
 800423c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800425c:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	490b      	ldr	r1, [pc, #44]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800427a:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	4904      	ldr	r1, [pc, #16]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
 80042a0:	42420440 	.word	0x42420440

080042a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e041      	b.n	800433a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fb6a 	bl	80009a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fd74 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_TIM_PWM_Start_DMA+0x2c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e022      	b.n	80043b6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d109      	bne.n	800438a <HAL_TIM_PWM_Start_DMA+0x46>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e015      	b.n	80043b6 <HAL_TIM_PWM_Start_DMA+0x72>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start_DMA+0x60>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_PWM_Start_DMA+0x72>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	e167      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_TIM_PWM_Start_DMA+0x94>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e022      	b.n	800441e <HAL_TIM_PWM_Start_DMA+0xda>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d109      	bne.n	80043f2 <HAL_TIM_PWM_Start_DMA+0xae>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e015      	b.n	800441e <HAL_TIM_PWM_Start_DMA+0xda>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start_DMA+0xc8>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e008      	b.n	800441e <HAL_TIM_PWM_Start_DMA+0xda>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_TIM_PWM_Start_DMA+0xea>
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e12d      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004440:	e016      	b.n	8004470 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004450:	e00e      	b.n	8004470 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004460:	e006      	b.n	8004470 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800446a:	e001      	b.n	8004470 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e10e      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
  }

  switch (Channel)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	f200 80ae 	bhi.w	80045d4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004478:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080045d5 	.word	0x080045d5
 8004488:	080045d5 	.word	0x080045d5
 800448c:	080045d5 	.word	0x080045d5
 8004490:	080044fd 	.word	0x080044fd
 8004494:	080045d5 	.word	0x080045d5
 8004498:	080045d5 	.word	0x080045d5
 800449c:	080045d5 	.word	0x080045d5
 80044a0:	08004545 	.word	0x08004545
 80044a4:	080045d5 	.word	0x080045d5
 80044a8:	080045d5 	.word	0x080045d5
 80044ac:	080045d5 	.word	0x080045d5
 80044b0:	0800458d 	.word	0x0800458d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	4a77      	ldr	r2, [pc, #476]	@ (8004698 <HAL_TIM_PWM_Start_DMA+0x354>)
 80044ba:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	4a76      	ldr	r2, [pc, #472]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x358>)
 80044c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	4a75      	ldr	r2, [pc, #468]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3334      	adds	r3, #52	@ 0x34
 80044d8:	461a      	mov	r2, r3
 80044da:	887b      	ldrh	r3, [r7, #2]
 80044dc:	f7fc ff88 	bl	80013f0 <HAL_DMA_Start_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0d1      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f8:	60da      	str	r2, [r3, #12]
      break;
 80044fa:	e06e      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	4a65      	ldr	r2, [pc, #404]	@ (8004698 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	4a64      	ldr	r2, [pc, #400]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x358>)
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	4a63      	ldr	r2, [pc, #396]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3338      	adds	r3, #56	@ 0x38
 8004520:	461a      	mov	r2, r3
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	f7fc ff64 	bl	80013f0 <HAL_DMA_Start_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0ad      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004540:	60da      	str	r2, [r3, #12]
      break;
 8004542:	e04a      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4a53      	ldr	r2, [pc, #332]	@ (8004698 <HAL_TIM_PWM_Start_DMA+0x354>)
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	4a52      	ldr	r2, [pc, #328]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x358>)
 8004552:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4a51      	ldr	r2, [pc, #324]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	333c      	adds	r3, #60	@ 0x3c
 8004568:	461a      	mov	r2, r3
 800456a:	887b      	ldrh	r3, [r7, #2]
 800456c:	f7fc ff40 	bl	80013f0 <HAL_DMA_Start_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e089      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004588:	60da      	str	r2, [r3, #12]
      break;
 800458a:	e026      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	4a41      	ldr	r2, [pc, #260]	@ (8004698 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	4a40      	ldr	r2, [pc, #256]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x358>)
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	4a3f      	ldr	r2, [pc, #252]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3340      	adds	r3, #64	@ 0x40
 80045b0:	461a      	mov	r2, r3
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	f7fc ff1c 	bl	80013f0 <HAL_DMA_Start_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e065      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045d0:	60da      	str	r2, [r3, #12]
      break;
 80045d2:	e002      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
      break;
 80045d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d155      	bne.n	800468c <HAL_TIM_PWM_Start_DMA+0x348>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fe23 	bl	8005234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2c      	ldr	r2, [pc, #176]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x360>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_PWM_Start_DMA+0x2be>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x364>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a20      	ldr	r2, [pc, #128]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x360>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_TIM_PWM_Start_DMA+0x314>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1f      	ldr	r2, [pc, #124]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x364>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_TIM_PWM_Start_DMA+0x314>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004638:	d00e      	beq.n	8004658 <HAL_TIM_PWM_Start_DMA+0x314>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x368>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_TIM_PWM_Start_DMA+0x314>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_TIM_PWM_Start_DMA+0x314>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d111      	bne.n	800467c <HAL_TIM_PWM_Start_DMA+0x338>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d010      	beq.n	800468c <HAL_TIM_PWM_Start_DMA+0x348>
      {
        __HAL_TIM_ENABLE(htim);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467a:	e007      	b.n	800468c <HAL_TIM_PWM_Start_DMA+0x348>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	08004cbf 	.word	0x08004cbf
 800469c:	08004d67 	.word	0x08004d67
 80046a0:	08004c2d 	.word	0x08004c2d
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00

080046b8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d855      	bhi.n	8004778 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80046cc:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004779 	.word	0x08004779
 80046dc:	08004779 	.word	0x08004779
 80046e0:	08004779 	.word	0x08004779
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004779 	.word	0x08004779
 80046ec:	08004779 	.word	0x08004779
 80046f0:	08004779 	.word	0x08004779
 80046f4:	08004741 	.word	0x08004741
 80046f8:	08004779 	.word	0x08004779
 80046fc:	08004779 	.word	0x08004779
 8004700:	08004779 	.word	0x08004779
 8004704:	0800475d 	.word	0x0800475d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004716:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc fec7 	bl	80014b0 <HAL_DMA_Abort_IT>
      break;
 8004722:	e02c      	b.n	800477e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004732:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc feb9 	bl	80014b0 <HAL_DMA_Abort_IT>
      break;
 800473e:	e01e      	b.n	800477e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800474e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc feab 	bl	80014b0 <HAL_DMA_Abort_IT>
      break;
 800475a:	e010      	b.n	800477e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800476a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	4618      	mov	r0, r3
 8004772:	f7fc fe9d 	bl	80014b0 <HAL_DMA_Abort_IT>
      break;
 8004776:	e002      	b.n	800477e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	bf00      	nop
  }

  if (status == HAL_OK)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d161      	bne.n	8004848 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fd51 	bl	8005234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a2f      	ldr	r2, [pc, #188]	@ (8004854 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIM_PWM_Stop_DMA+0xee>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004858 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_Stop_DMA+0xf2>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_TIM_PWM_Stop_DMA+0xf4>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10f      	bne.n	80047e0 <HAL_TIM_PWM_Stop_DMA+0x128>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_PWM_Stop_DMA+0x128>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10f      	bne.n	8004810 <HAL_TIM_PWM_Stop_DMA+0x158>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_TIM_PWM_Stop_DMA+0x168>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481e:	e013      	b.n	8004848 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d104      	bne.n	8004830 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482e:	e00b      	b.n	8004848 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b08      	cmp	r3, #8
 8004834:	d104      	bne.n	8004840 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483e:	e003      	b.n	8004848 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40013400 	.word	0x40013400

0800485c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d020      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0202 	mvn.w	r2, #2
 8004890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f99c 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f98f 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fb fd71 	bl	800039c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0204 	mvn.w	r2, #4
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f976 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f969 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fb fd4b 	bl	800039c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d020      	beq.n	8004958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0208 	mvn.w	r2, #8
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f950 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f943 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fb fd25 	bl	800039c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	d020      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01b      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0210 	mvn.w	r2, #16
 8004974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2208      	movs	r2, #8
 800497a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f92a 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f91d 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fb fcff 	bl	800039c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0201 	mvn.w	r2, #1
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8fc 	bl	8004bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00c      	beq.n	80049ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fd0e 	bl	8005408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00c      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8fc 	bl	8004c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0220 	mvn.w	r2, #32
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fce1 	bl	80053f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0ae      	b.n	8004bb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	f200 809f 	bhi.w	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004aa5 	.word	0x08004aa5
 8004a74:	08004ba9 	.word	0x08004ba9
 8004a78:	08004ba9 	.word	0x08004ba9
 8004a7c:	08004ba9 	.word	0x08004ba9
 8004a80:	08004ae5 	.word	0x08004ae5
 8004a84:	08004ba9 	.word	0x08004ba9
 8004a88:	08004ba9 	.word	0x08004ba9
 8004a8c:	08004ba9 	.word	0x08004ba9
 8004a90:	08004b27 	.word	0x08004b27
 8004a94:	08004ba9 	.word	0x08004ba9
 8004a98:	08004ba9 	.word	0x08004ba9
 8004a9c:	08004ba9 	.word	0x08004ba9
 8004aa0:	08004b67 	.word	0x08004b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fa16 	bl	8004edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0208 	orr.w	r2, r2, #8
 8004abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0204 	bic.w	r2, r2, #4
 8004ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	619a      	str	r2, [r3, #24]
      break;
 8004ae2:	e064      	b.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fa66 	bl	8004fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6999      	ldr	r1, [r3, #24]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	021a      	lsls	r2, r3, #8
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	619a      	str	r2, [r3, #24]
      break;
 8004b24:	e043      	b.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fab9 	bl	80050a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0208 	orr.w	r2, r2, #8
 8004b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0204 	bic.w	r2, r2, #4
 8004b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69d9      	ldr	r1, [r3, #28]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	61da      	str	r2, [r3, #28]
      break;
 8004b64:	e023      	b.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fb0d 	bl	800518c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69d9      	ldr	r1, [r3, #28]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	021a      	lsls	r2, r3, #8
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	61da      	str	r2, [r3, #28]
      break;
 8004ba6:	e002      	b.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c52:	e02a      	b.n	8004caa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d107      	bne.n	8004c6e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2202      	movs	r2, #2
 8004c62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c6c:	e01d      	b.n	8004caa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d107      	bne.n	8004c88 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c86:	e010      	b.n	8004caa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d107      	bne.n	8004ca2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2208      	movs	r2, #8
 8004c96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ca0:	e003      	b.n	8004caa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff ffb5 	bl	8004c1a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10b      	bne.n	8004cee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d136      	bne.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cec:	e031      	b.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10b      	bne.n	8004d10 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d125      	bne.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d0e:	e020      	b.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d10b      	bne.n	8004d32 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d114      	bne.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d30:	e00f      	b.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d10a      	bne.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2208      	movs	r2, #8
 8004d40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7fb fb22 	bl	800039c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	771a      	strb	r2, [r3, #28]
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d103      	bne.n	8004d86 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	771a      	strb	r2, [r3, #28]
 8004d84:	e019      	b.n	8004dba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d103      	bne.n	8004d98 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2202      	movs	r2, #2
 8004d94:	771a      	strb	r2, [r3, #28]
 8004d96:	e010      	b.n	8004dba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d103      	bne.n	8004daa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2204      	movs	r2, #4
 8004da6:	771a      	strb	r2, [r3, #28]
 8004da8:	e007      	b.n	8004dba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d102      	bne.n	8004dba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2208      	movs	r2, #8
 8004db8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff ff1b 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	771a      	strb	r2, [r3, #28]
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a39      	ldr	r2, [pc, #228]	@ (8004ec8 <TIM_Base_SetConfig+0xf8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a38      	ldr	r2, [pc, #224]	@ (8004ecc <TIM_Base_SetConfig+0xfc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a35      	ldr	r2, [pc, #212]	@ (8004ed0 <TIM_Base_SetConfig+0x100>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a34      	ldr	r2, [pc, #208]	@ (8004ed4 <TIM_Base_SetConfig+0x104>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a33      	ldr	r2, [pc, #204]	@ (8004ed8 <TIM_Base_SetConfig+0x108>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a28      	ldr	r2, [pc, #160]	@ (8004ec8 <TIM_Base_SetConfig+0xf8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x82>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a27      	ldr	r2, [pc, #156]	@ (8004ecc <TIM_Base_SetConfig+0xfc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x82>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x82>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <TIM_Base_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x82>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a23      	ldr	r2, [pc, #140]	@ (8004ed4 <TIM_Base_SetConfig+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x82>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ed8 <TIM_Base_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec8 <TIM_Base_SetConfig+0xf8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_Base_SetConfig+0xc8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a0e      	ldr	r2, [pc, #56]	@ (8004ecc <TIM_Base_SetConfig+0xfc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d103      	bne.n	8004ea0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f023 0201 	bic.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	611a      	str	r2, [r3, #16]
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00

08004edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 0201 	bic.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0302 	bic.w	r3, r3, #2
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a20      	ldr	r2, [pc, #128]	@ (8004fb4 <TIM_OC1_SetConfig+0xd8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC1_SetConfig+0x64>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <TIM_OC1_SetConfig+0xdc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <TIM_OC1_SetConfig+0xd8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_OC1_SetConfig+0x8e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a14      	ldr	r2, [pc, #80]	@ (8004fb8 <TIM_OC1_SetConfig+0xdc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d111      	bne.n	8004f8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40013400 	.word	0x40013400

08004fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f023 0210 	bic.w	r2, r3, #16
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a21      	ldr	r2, [pc, #132]	@ (800509c <TIM_OC2_SetConfig+0xe0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC2_SetConfig+0x68>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a20      	ldr	r2, [pc, #128]	@ (80050a0 <TIM_OC2_SetConfig+0xe4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10d      	bne.n	8005040 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a16      	ldr	r2, [pc, #88]	@ (800509c <TIM_OC2_SetConfig+0xe0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_OC2_SetConfig+0x94>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <TIM_OC2_SetConfig+0xe4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d113      	bne.n	8005078 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40013400 	.word	0x40013400

080050a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a21      	ldr	r2, [pc, #132]	@ (8005184 <TIM_OC3_SetConfig+0xe0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a20      	ldr	r2, [pc, #128]	@ (8005188 <TIM_OC3_SetConfig+0xe4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10d      	bne.n	8005126 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a16      	ldr	r2, [pc, #88]	@ (8005184 <TIM_OC3_SetConfig+0xe0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0x92>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a15      	ldr	r2, [pc, #84]	@ (8005188 <TIM_OC3_SetConfig+0xe4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400

0800518c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a11      	ldr	r2, [pc, #68]	@ (800522c <TIM_OC4_SetConfig+0xa0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC4_SetConfig+0x68>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a10      	ldr	r2, [pc, #64]	@ (8005230 <TIM_OC4_SetConfig+0xa4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d109      	bne.n	8005208 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40013400 	.word	0x40013400

08005234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005290:	2302      	movs	r3, #2
 8005292:	e050      	b.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a19      	ldr	r2, [pc, #100]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ea:	d00e      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a14      	ldr	r2, [pc, #80]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10c      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00

08005354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800536c:	2302      	movs	r3, #2
 800536e:	e03d      	b.n	80053ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	4638      	mov	r0, r7
 8005424:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005444:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005448:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005468:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800546c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	b29b      	uxth	r3, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	b29b      	uxth	r3, r3
 800547e:	4013      	ands	r3, r2
 8005480:	b29a      	uxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	4638      	mov	r0, r7
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
	...

080054e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b09d      	sub	sp, #116	@ 0x74
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d81f      	bhi.n	800555a <USB_ActivateEndpoint+0x72>
 800551a:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <USB_ActivateEndpoint+0x38>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005531 	.word	0x08005531
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005563 	.word	0x08005563
 800552c:	0800553f 	.word	0x0800553f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005530:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005534:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005538:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800553c:	e012      	b.n	8005564 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800553e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005542:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005546:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800554a:	e00b      	b.n	8005564 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800554c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005554:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005558:	e004      	b.n	8005564 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005560:	e000      	b.n	8005564 <USB_ActivateEndpoint+0x7c>
      break;
 8005562:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559c:	b29b      	uxth	r3, r3
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	7b1b      	ldrb	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 8178 	bne.w	80058c4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8084 	beq.w	80056e6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	4413      	add	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	011a      	lsls	r2, r3, #4
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	88db      	ldrh	r3, [r3, #6]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	827b      	strh	r3, [r7, #18]
 8005620:	8a7b      	ldrh	r3, [r7, #18]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01b      	beq.n	8005662 <USB_ActivateEndpoint+0x17a>
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800563c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005640:	823b      	strh	r3, [r7, #16]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	8a3b      	ldrh	r3, [r7, #16]
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	78db      	ldrb	r3, [r3, #3]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d020      	beq.n	80056ac <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005680:	81bb      	strh	r3, [r7, #12]
 8005682:	89bb      	ldrh	r3, [r7, #12]
 8005684:	f083 0320 	eor.w	r3, r3, #32
 8005688:	81bb      	strh	r3, [r7, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	89bb      	ldrh	r3, [r7, #12]
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]
 80056aa:	e2d5      	b.n	8005c58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c2:	81fb      	strh	r3, [r7, #14]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]
 80056e4:	e2b8      	b.n	8005c58 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	4413      	add	r3, r2
 80056f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	4413      	add	r3, r2
 8005704:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	88db      	ldrh	r3, [r3, #6]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005724:	b29b      	uxth	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	4413      	add	r3, r2
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	011a      	lsls	r2, r3, #4
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	4413      	add	r3, r2
 8005738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005748:	b29a      	uxth	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b3e      	cmp	r3, #62	@ 0x3e
 8005754:	d91d      	bls.n	8005792 <USB_ActivateEndpoint+0x2aa>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <USB_ActivateEndpoint+0x288>
 800576a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800576c:	3b01      	subs	r3, #1
 800576e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e026      	b.n	80057e0 <USB_ActivateEndpoint+0x2f8>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <USB_ActivateEndpoint+0x2c8>
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e017      	b.n	80057e0 <USB_ActivateEndpoint+0x2f8>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <USB_ActivateEndpoint+0x2e2>
 80057c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c6:	3301      	adds	r3, #1
 80057c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	029b      	lsls	r3, r3, #10
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	847b      	strh	r3, [r7, #34]	@ 0x22
 80057ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80057f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01b      	beq.n	8005830 <USB_ActivateEndpoint+0x348>
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	843b      	strh	r3, [r7, #32]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	8c3b      	ldrh	r3, [r7, #32]
 800581c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005824:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582c:	b29b      	uxth	r3, r3
 800582e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d124      	bne.n	8005882 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800584a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584e:	83bb      	strh	r3, [r7, #28]
 8005850:	8bbb      	ldrh	r3, [r7, #28]
 8005852:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005856:	83bb      	strh	r3, [r7, #28]
 8005858:	8bbb      	ldrh	r3, [r7, #28]
 800585a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800585e:	83bb      	strh	r3, [r7, #28]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	8bbb      	ldrh	r3, [r7, #28]
 800586c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587c:	b29b      	uxth	r3, r3
 800587e:	8013      	strh	r3, [r2, #0]
 8005880:	e1ea      	b.n	8005c58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005898:	83fb      	strh	r3, [r7, #30]
 800589a:	8bfb      	ldrh	r3, [r7, #30]
 800589c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058a0:	83fb      	strh	r3, [r7, #30]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	8bfb      	ldrh	r3, [r7, #30]
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	e1c9      	b.n	8005c58 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	78db      	ldrb	r3, [r3, #3]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d11e      	bne.n	800590a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]
 8005908:	e01d      	b.n	8005946 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800591c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005920:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005956:	4413      	add	r3, r2
 8005958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005962:	4413      	add	r3, r2
 8005964:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	891b      	ldrh	r3, [r3, #8]
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	b29b      	uxth	r3, r3
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	657b      	str	r3, [r7, #84]	@ 0x54
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005984:	b29b      	uxth	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800598a:	4413      	add	r3, r2
 800598c:	657b      	str	r3, [r7, #84]	@ 0x54
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	011a      	lsls	r2, r3, #4
 8005994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005996:	4413      	add	r3, r2
 8005998:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800599c:	653b      	str	r3, [r7, #80]	@ 0x50
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	895b      	ldrh	r3, [r3, #10]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059ac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 8093 	bne.w	8005ade <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80059c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80059cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01b      	beq.n	8005a0c <USB_ActivateEndpoint+0x524>
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005a1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <USB_ActivateEndpoint+0x574>
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a82:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]
 8005adc:	e0bc      	b.n	8005c58 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01d      	beq.n	8005b36 <USB_ActivateEndpoint+0x64e>
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b10:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005b46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01d      	beq.n	8005b8e <USB_ActivateEndpoint+0x6a6>
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b68:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	441a      	add	r2, r3
 8005b76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	78db      	ldrb	r3, [r3, #3]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d024      	beq.n	8005be0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005bb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005bb4:	f083 0320 	eor.w	r3, r3, #32
 8005bb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
 8005bde:	e01d      	b.n	8005c1c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bf6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005c58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3774      	adds	r7, #116	@ 0x74
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop

08005c68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b08d      	sub	sp, #52	@ 0x34
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	7b1b      	ldrb	r3, [r3, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 808e 	bne.w	8005d98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d044      	beq.n	8005d0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	81bb      	strh	r3, [r7, #12]
 8005c92:	89bb      	ldrh	r3, [r7, #12]
 8005c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01b      	beq.n	8005cd4 <USB_DeactivateEndpoint+0x6c>
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb2:	817b      	strh	r3, [r7, #10]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ccc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cea:	813b      	strh	r3, [r7, #8]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
 8005d0c:	e192      	b.n	8006034 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	827b      	strh	r3, [r7, #18]
 8005d1c:	8a7b      	ldrh	r3, [r7, #18]
 8005d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01b      	beq.n	8005d5e <USB_DeactivateEndpoint+0xf6>
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3c:	823b      	strh	r3, [r7, #16]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	8a3b      	ldrh	r3, [r7, #16]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d74:	81fb      	strh	r3, [r7, #14]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]
 8005d96:	e14d      	b.n	8006034 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 80a5 	bne.w	8005eec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	843b      	strh	r3, [r7, #32]
 8005db0:	8c3b      	ldrh	r3, [r7, #32]
 8005db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01b      	beq.n	8005df2 <USB_DeactivateEndpoint+0x18a>
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd0:	83fb      	strh	r3, [r7, #30]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	8bfb      	ldrh	r3, [r7, #30]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	83bb      	strh	r3, [r7, #28]
 8005e00:	8bbb      	ldrh	r3, [r7, #28]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01b      	beq.n	8005e42 <USB_DeactivateEndpoint+0x1da>
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e20:	837b      	strh	r3, [r7, #26]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	8b7b      	ldrh	r3, [r7, #26]
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e58:	833b      	strh	r3, [r7, #24]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	8b3b      	ldrh	r3, [r7, #24]
 8005e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e90:	82fb      	strh	r3, [r7, #22]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	8afb      	ldrh	r3, [r7, #22]
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec8:	82bb      	strh	r3, [r7, #20]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8abb      	ldrh	r3, [r7, #20]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
 8005eea:	e0a3      	b.n	8006034 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005efa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01b      	beq.n	8005f3c <USB_DeactivateEndpoint+0x2d4>
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005f4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01b      	beq.n	8005f8c <USB_DeactivateEndpoint+0x324>
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800600e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006012:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800602c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3734      	adds	r7, #52	@ 0x34
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b0c2      	sub	sp, #264	@ 0x108
 8006044:	af00      	add	r7, sp, #0
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604e:	6018      	str	r0, [r3, #0]
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b01      	cmp	r3, #1
 8006068:	f040 86b7 	bne.w	8006dda <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800606c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d908      	bls.n	800609a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006098:	e007      	b.n	80060aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d13a      	bne.n	8006130 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6959      	ldr	r1, [r3, #20]
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	88da      	ldrh	r2, [r3, #6]
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060e0:	6800      	ldr	r0, [r0, #0]
 80060e2:	f001 fc9c 	bl	8007a1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	011a      	lsls	r2, r3, #4
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	f000 be1f 	b.w	8006d6e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b02      	cmp	r3, #2
 800613e:	f040 8462 	bne.w	8006a06 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	429a      	cmp	r2, r3
 800615c:	f240 83df 	bls.w	800691e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80061a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80061b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80061bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 81c7 	beq.w	8006590 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	633b      	str	r3, [r7, #48]	@ 0x30
 800620e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d177      	bne.n	800630e <USB_EPStartXfer+0x2ce>
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	4413      	add	r3, r2
 8006240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	011a      	lsls	r2, r3, #4
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	4413      	add	r3, r2
 8006254:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006264:	b29a      	uxth	r2, r3
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006270:	d921      	bls.n	80062b6 <USB_EPStartXfer+0x276>
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <USB_EPStartXfer+0x252>
 8006288:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800628c:	3b01      	subs	r3, #1
 800628e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29a      	uxth	r2, r3
 8006298:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800629c:	b29b      	uxth	r3, r3
 800629e:	029b      	lsls	r3, r3, #10
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4313      	orrs	r3, r2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e050      	b.n	8006358 <USB_EPStartXfer+0x318>
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <USB_EPStartXfer+0x294>
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e041      	b.n	8006358 <USB_EPStartXfer+0x318>
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <USB_EPStartXfer+0x2b4>
 80062ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80062ee:	3301      	adds	r3, #1
 80062f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80062fe:	b29b      	uxth	r3, r3
 8006300:	029b      	lsls	r3, r3, #10
 8006302:	b29b      	uxth	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b29a      	uxth	r2, r3
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e024      	b.n	8006358 <USB_EPStartXfer+0x318>
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d11c      	bne.n	8006358 <USB_EPStartXfer+0x318>
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	4413      	add	r3, r2
 8006334:	633b      	str	r3, [r7, #48]	@ 0x30
 8006336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	011a      	lsls	r2, r3, #4
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	4413      	add	r3, r2
 8006348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	b29a      	uxth	r2, r3
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	895b      	ldrh	r3, [r3, #10]
 8006364:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6959      	ldr	r1, [r3, #20]
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006378:	b29b      	uxth	r3, r3
 800637a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800637e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006382:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	f001 fb49 	bl	8007a1e <USB_WritePMA>
            ep->xfer_buff += len;
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	441a      	add	r2, r3
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d90f      	bls.n	80063e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	621a      	str	r2, [r3, #32]
 80063e4:	e00e      	b.n	8006404 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80063e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80063f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d177      	bne.n	8006504 <USB_EPStartXfer+0x4c4>
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	011a      	lsls	r2, r3, #4
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	4413      	add	r3, r2
 800644a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800645a:	b29a      	uxth	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006464:	2b3e      	cmp	r3, #62	@ 0x3e
 8006466:	d921      	bls.n	80064ac <USB_EPStartXfer+0x46c>
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <USB_EPStartXfer+0x448>
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006482:	3b01      	subs	r3, #1
 8006484:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29a      	uxth	r2, r3
 800648e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006492:	b29b      	uxth	r3, r3
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	b29b      	uxth	r3, r3
 8006498:	4313      	orrs	r3, r2
 800649a:	b29b      	uxth	r3, r3
 800649c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e056      	b.n	800655a <USB_EPStartXfer+0x51a>
 80064ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <USB_EPStartXfer+0x48a>
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	e047      	b.n	800655a <USB_EPStartXfer+0x51a>
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <USB_EPStartXfer+0x4aa>
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064e4:	3301      	adds	r3, #1
 80064e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e02a      	b.n	800655a <USB_EPStartXfer+0x51a>
 8006504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d122      	bne.n	800655a <USB_EPStartXfer+0x51a>
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	4413      	add	r3, r2
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	011a      	lsls	r2, r3, #4
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	4413      	add	r3, r2
 800654a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	b29a      	uxth	r2, r3
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800655a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	891b      	ldrh	r3, [r3, #8]
 8006566:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800656a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6959      	ldr	r1, [r3, #20]
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657a:	b29b      	uxth	r3, r3
 800657c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006580:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006584:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006588:	6800      	ldr	r0, [r0, #0]
 800658a:	f001 fa48 	bl	8007a1e <USB_WritePMA>
 800658e:	e3ee      	b.n	8006d6e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d177      	bne.n	8006690 <USB_EPStartXfer+0x650>
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c0:	4413      	add	r3, r2
 80065c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d4:	4413      	add	r3, r2
 80065d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065da:	647b      	str	r3, [r7, #68]	@ 0x44
 80065dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80065f2:	d921      	bls.n	8006638 <USB_EPStartXfer+0x5f8>
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USB_EPStartXfer+0x5d4>
 800660a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800660e:	3b01      	subs	r3, #1
 8006610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29a      	uxth	r2, r3
 800661a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800661e:	b29b      	uxth	r3, r3
 8006620:	029b      	lsls	r3, r3, #10
 8006622:	b29b      	uxth	r3, r3
 8006624:	4313      	orrs	r3, r2
 8006626:	b29b      	uxth	r3, r3
 8006628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006630:	b29a      	uxth	r2, r3
 8006632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e056      	b.n	80066e6 <USB_EPStartXfer+0x6a6>
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <USB_EPStartXfer+0x616>
 8006640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664e:	b29a      	uxth	r2, r3
 8006650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e047      	b.n	80066e6 <USB_EPStartXfer+0x6a6>
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <USB_EPStartXfer+0x636>
 800666c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006670:	3301      	adds	r3, #1
 8006672:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29a      	uxth	r2, r3
 800667c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29b      	uxth	r3, r3
 8006686:	4313      	orrs	r3, r2
 8006688:	b29a      	uxth	r2, r3
 800668a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e02a      	b.n	80066e6 <USB_EPStartXfer+0x6a6>
 8006690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d122      	bne.n	80066e6 <USB_EPStartXfer+0x6a6>
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c0:	4413      	add	r3, r2
 80066c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	011a      	lsls	r2, r3, #4
 80066d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d4:	4413      	add	r3, r2
 80066d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	891b      	ldrh	r3, [r3, #8]
 80066f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6959      	ldr	r1, [r3, #20]
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006706:	b29b      	uxth	r3, r3
 8006708:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800670c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006710:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006714:	6800      	ldr	r0, [r0, #0]
 8006716:	f001 f982 	bl	8007a1e <USB_WritePMA>
            ep->xfer_buff += len;
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672a:	441a      	add	r2, r3
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d90f      	bls.n	8006774 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	1ad2      	subs	r2, r2, r3
 8006766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	621a      	str	r2, [r3, #32]
 8006772:	e00e      	b.n	8006792 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	643b      	str	r3, [r7, #64]	@ 0x40
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d177      	bne.n	800689e <USB_EPStartXfer+0x85e>
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ce:	4413      	add	r3, r2
 80067d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	011a      	lsls	r2, r3, #4
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	4413      	add	r3, r2
 80067e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006800:	d921      	bls.n	8006846 <USB_EPStartXfer+0x806>
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <USB_EPStartXfer+0x7e2>
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681c:	3b01      	subs	r3, #1
 800681e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	b29b      	uxth	r3, r3
 800682e:	029b      	lsls	r3, r3, #10
 8006830:	b29b      	uxth	r3, r3
 8006832:	4313      	orrs	r3, r2
 8006834:	b29b      	uxth	r3, r3
 8006836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683e:	b29a      	uxth	r2, r3
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e050      	b.n	80068e8 <USB_EPStartXfer+0x8a8>
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <USB_EPStartXfer+0x824>
 800684e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e041      	b.n	80068e8 <USB_EPStartXfer+0x8a8>
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800686e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <USB_EPStartXfer+0x844>
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687e:	3301      	adds	r3, #1
 8006880:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29a      	uxth	r2, r3
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688e:	b29b      	uxth	r3, r3
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	b29b      	uxth	r3, r3
 8006894:	4313      	orrs	r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	e024      	b.n	80068e8 <USB_EPStartXfer+0x8a8>
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d11c      	bne.n	80068e8 <USB_EPStartXfer+0x8a8>
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068bc:	b29b      	uxth	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c2:	4413      	add	r3, r2
 80068c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	011a      	lsls	r2, r3, #4
 80068d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	895b      	ldrh	r3, [r3, #10]
 80068f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	b29b      	uxth	r3, r3
 800690a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800690e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006912:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	f001 f881 	bl	8007a1e <USB_WritePMA>
 800691c:	e227      	b.n	8006d6e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800691e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006954:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800698a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069aa:	4413      	add	r3, r2
 80069ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	011a      	lsls	r2, r3, #4
 80069bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069be:	4413      	add	r3, r2
 80069c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	891b      	ldrh	r3, [r3, #8]
 80069dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6959      	ldr	r1, [r3, #20]
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069fe:	6800      	ldr	r0, [r0, #0]
 8006a00:	f001 f80d 	bl	8007a1e <USB_WritePMA>
 8006a04:	e1b3      	b.n	8006d6e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6a1a      	ldr	r2, [r3, #32]
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80c6 	beq.w	8006bd8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d177      	bne.n	8006b58 <USB_EPStartXfer+0xb18>
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a88:	4413      	add	r3, r2
 8006a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	011a      	lsls	r2, r3, #4
 8006a9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aba:	d921      	bls.n	8006b00 <USB_EPStartXfer+0xac0>
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <USB_EPStartXfer+0xa9c>
 8006ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	029b      	lsls	r3, r3, #10
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	e050      	b.n	8006ba2 <USB_EPStartXfer+0xb62>
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <USB_EPStartXfer+0xade>
 8006b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e041      	b.n	8006ba2 <USB_EPStartXfer+0xb62>
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <USB_EPStartXfer+0xafe>
 8006b34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	029b      	lsls	r3, r3, #10
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e024      	b.n	8006ba2 <USB_EPStartXfer+0xb62>
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d11c      	bne.n	8006ba2 <USB_EPStartXfer+0xb62>
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b7c:	4413      	add	r3, r2
 8006b7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	895b      	ldrh	r3, [r3, #10]
 8006bae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6959      	ldr	r1, [r3, #20]
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bd0:	6800      	ldr	r0, [r0, #0]
 8006bd2:	f000 ff24 	bl	8007a1e <USB_WritePMA>
 8006bd6:	e0ca      	b.n	8006d6e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d177      	bne.n	8006cd8 <USB_EPStartXfer+0xc98>
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c08:	4413      	add	r3, r2
 8006c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	011a      	lsls	r2, r3, #4
 8006c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c3a:	d921      	bls.n	8006c80 <USB_EPStartXfer+0xc40>
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USB_EPStartXfer+0xc1c>
 8006c52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e05c      	b.n	8006d3a <USB_EPStartXfer+0xcfa>
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <USB_EPStartXfer+0xc5e>
 8006c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	e04d      	b.n	8006d3a <USB_EPStartXfer+0xcfa>
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <USB_EPStartXfer+0xc7e>
 8006cb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cd4:	801a      	strh	r2, [r3, #0]
 8006cd6:	e030      	b.n	8006d3a <USB_EPStartXfer+0xcfa>
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d128      	bne.n	8006d3a <USB_EPStartXfer+0xcfa>
 8006ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	011a      	lsls	r2, r3, #4
 8006d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	891b      	ldrh	r3, [r3, #8]
 8006d46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6959      	ldr	r1, [r3, #20]
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d68:	6800      	ldr	r0, [r0, #0]
 8006d6a:	f000 fe58 	bl	8007a1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d94:	817b      	strh	r3, [r7, #10]
 8006d96:	897b      	ldrh	r3, [r7, #10]
 8006d98:	f083 0310 	eor.w	r3, r3, #16
 8006d9c:	817b      	strh	r3, [r7, #10]
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	f083 0320 	eor.w	r3, r3, #32
 8006da4:	817b      	strh	r3, [r7, #10]
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	897b      	ldrh	r3, [r7, #10]
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]
 8006dd6:	f000 bcde 	b.w	8007796 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	7b1b      	ldrb	r3, [r3, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 80bb 	bne.w	8006f62 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699a      	ldr	r2, [r3, #24]
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d917      	bls.n	8006e38 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	619a      	str	r2, [r3, #24]
 8006e36:	e00e      	b.n	8006e56 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	011a      	lsls	r2, r3, #4
 8006e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb6:	d924      	bls.n	8006f02 <USB_EPStartXfer+0xec2>
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <USB_EPStartXfer+0xe98>
 8006ece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	f000 bc10 	b.w	8007722 <USB_EPStartXfer+0x16e2>
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <USB_EPStartXfer+0xee4>
 8006f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e3fe      	b.n	8007722 <USB_EPStartXfer+0x16e2>
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <USB_EPStartXfer+0xf04>
 8006f3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006f3e:	3301      	adds	r3, #1
 8006f40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	e3df      	b.n	8007722 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	f040 8218 	bne.w	80073a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 809d 	bne.w	80070c0 <USB_EPStartXfer+0x1080>
 8006f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006faa:	4413      	add	r3, r2
 8006fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	011a      	lsls	r2, r3, #4
 8006fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fee:	d92b      	bls.n	8007048 <USB_EPStartXfer+0x1008>
 8006ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <USB_EPStartXfer+0xfe0>
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800701a:	3b01      	subs	r3, #1
 800701c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29a      	uxth	r2, r3
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702c:	b29b      	uxth	r3, r3
 800702e:	029b      	lsls	r3, r3, #10
 8007030:	b29b      	uxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e070      	b.n	800712a <USB_EPStartXfer+0x10ea>
 8007048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10c      	bne.n	8007072 <USB_EPStartXfer+0x1032>
 8007058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	e05b      	b.n	800712a <USB_EPStartXfer+0x10ea>
 8007072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <USB_EPStartXfer+0x1062>
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709c:	3301      	adds	r3, #1
 800709e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	029b      	lsls	r3, r3, #10
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e034      	b.n	800712a <USB_EPStartXfer+0x10ea>
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d12c      	bne.n	800712a <USB_EPStartXfer+0x10ea>
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070f4:	4413      	add	r3, r2
 80070f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	011a      	lsls	r2, r3, #4
 8007108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800710c:	4413      	add	r3, r2
 800710e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	b29a      	uxth	r2, r3
 8007124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 809d 	bne.w	8007284 <USB_EPStartXfer+0x1244>
 800714a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800716e:	4413      	add	r3, r2
 8007170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	011a      	lsls	r2, r3, #4
 8007182:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007186:	4413      	add	r3, r2
 8007188:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800718c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80071b2:	d92b      	bls.n	800720c <USB_EPStartXfer+0x11cc>
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <USB_EPStartXfer+0x11a4>
 80071da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071de:	3b01      	subs	r3, #1
 80071e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	029b      	lsls	r3, r3, #10
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e069      	b.n	80072e0 <USB_EPStartXfer+0x12a0>
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10c      	bne.n	8007236 <USB_EPStartXfer+0x11f6>
 800721c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722c:	b29a      	uxth	r2, r3
 800722e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e054      	b.n	80072e0 <USB_EPStartXfer+0x12a0>
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <USB_EPStartXfer+0x1226>
 800725c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007260:	3301      	adds	r3, #1
 8007262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007266:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007272:	b29b      	uxth	r3, r3
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	b29b      	uxth	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b29a      	uxth	r2, r3
 800727c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e02d      	b.n	80072e0 <USB_EPStartXfer+0x12a0>
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d125      	bne.n	80072e0 <USB_EPStartXfer+0x12a0>
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072aa:	4413      	add	r3, r2
 80072ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	011a      	lsls	r2, r3, #4
 80072be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8218 	beq.w	8007722 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007312:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <USB_EPStartXfer+0x12ea>
 800731e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800732a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800732e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 81f5 	bne.w	8007722 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007338:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800733c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 81ee 	bne.w	8007722 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800736c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800738e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800739a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800739e:	b29b      	uxth	r3, r3
 80073a0:	8013      	strh	r3, [r2, #0]
 80073a2:	e1be      	b.n	8007722 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	78db      	ldrb	r3, [r3, #3]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 81b4 	bne.w	800771e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d917      	bls.n	8007402 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80073d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	619a      	str	r2, [r3, #24]
 8007400:	e00e      	b.n	8007420 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2200      	movs	r2, #0
 800741e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f040 8085 	bne.w	800753c <USB_EPStartXfer+0x14fc>
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800744e:	b29b      	uxth	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007456:	4413      	add	r3, r2
 8007458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800745c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	011a      	lsls	r2, r3, #4
 800746a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800746e:	4413      	add	r3, r2
 8007470:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007484:	b29a      	uxth	r2, r3
 8007486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	2b3e      	cmp	r3, #62	@ 0x3e
 8007492:	d923      	bls.n	80074dc <USB_EPStartXfer+0x149c>
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <USB_EPStartXfer+0x1474>
 80074aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ae:	3b01      	subs	r3, #1
 80074b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	029b      	lsls	r3, r3, #10
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e060      	b.n	800759e <USB_EPStartXfer+0x155e>
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10c      	bne.n	80074fe <USB_EPStartXfer+0x14be>
 80074e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074fa:	801a      	strh	r2, [r3, #0]
 80074fc:	e04f      	b.n	800759e <USB_EPStartXfer+0x155e>
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <USB_EPStartXfer+0x14de>
 8007514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007518:	3301      	adds	r3, #1
 800751a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800751e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29a      	uxth	r2, r3
 8007526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752a:	b29b      	uxth	r3, r3
 800752c:	029b      	lsls	r3, r3, #10
 800752e:	b29b      	uxth	r3, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	b29a      	uxth	r2, r3
 8007534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	e030      	b.n	800759e <USB_EPStartXfer+0x155e>
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d128      	bne.n	800759e <USB_EPStartXfer+0x155e>
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007568:	b29b      	uxth	r3, r3
 800756a:	461a      	mov	r2, r3
 800756c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007570:	4413      	add	r3, r2
 8007572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	011a      	lsls	r2, r3, #4
 8007584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007588:	4413      	add	r3, r2
 800758a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800758e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	b29a      	uxth	r2, r3
 8007598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800759c:	801a      	strh	r2, [r3, #0]
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f040 8085 	bne.w	80076c8 <USB_EPStartXfer+0x1688>
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075e2:	4413      	add	r3, r2
 80075e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	011a      	lsls	r2, r3, #4
 80075f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007610:	b29a      	uxth	r2, r3
 8007612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	2b3e      	cmp	r3, #62	@ 0x3e
 800761e:	d923      	bls.n	8007668 <USB_EPStartXfer+0x1628>
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <USB_EPStartXfer+0x1600>
 8007636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800763a:	3b01      	subs	r3, #1
 800763c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29a      	uxth	r2, r3
 8007648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800764c:	b29b      	uxth	r3, r3
 800764e:	029b      	lsls	r3, r3, #10
 8007650:	b29b      	uxth	r3, r3
 8007652:	4313      	orrs	r3, r2
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e05c      	b.n	8007722 <USB_EPStartXfer+0x16e2>
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10c      	bne.n	800768a <USB_EPStartXfer+0x164a>
 8007670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007680:	b29a      	uxth	r2, r3
 8007682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e04b      	b.n	8007722 <USB_EPStartXfer+0x16e2>
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <USB_EPStartXfer+0x166a>
 80076a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076a4:	3301      	adds	r3, #1
 80076a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	029b      	lsls	r3, r3, #10
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4313      	orrs	r3, r2
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	e02c      	b.n	8007722 <USB_EPStartXfer+0x16e2>
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d124      	bne.n	8007722 <USB_EPStartXfer+0x16e2>
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076ee:	4413      	add	r3, r2
 80076f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	011a      	lsls	r2, r3, #4
 8007702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007706:	4413      	add	r3, r2
 8007708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800770c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e001      	b.n	8007722 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e03a      	b.n	8007798 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007748:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800774c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007750:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007754:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007758:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800775c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007760:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d020      	beq.n	80077f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ca:	81bb      	strh	r3, [r7, #12]
 80077cc:	89bb      	ldrh	r3, [r7, #12]
 80077ce:	f083 0310 	eor.w	r3, r3, #16
 80077d2:	81bb      	strh	r3, [r7, #12]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	89bb      	ldrh	r3, [r7, #12]
 80077e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8013      	strh	r3, [r2, #0]
 80077f4:	e01f      	b.n	8007836 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780c:	81fb      	strh	r3, [r7, #14]
 800780e:	89fb      	ldrh	r3, [r7, #14]
 8007810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007814:	81fb      	strh	r3, [r7, #14]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800782a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800782e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007832:	b29b      	uxth	r3, r3
 8007834:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	7b1b      	ldrb	r3, [r3, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 809d 	bne.w	8007990 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d04c      	beq.n	80078f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	823b      	strh	r3, [r7, #16]
 800786c:	8a3b      	ldrh	r3, [r7, #16]
 800786e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01b      	beq.n	80078ae <USB_EPClearStall+0x6c>
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788c:	81fb      	strh	r3, [r7, #14]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	441a      	add	r2, r3
 8007898:	89fb      	ldrh	r3, [r7, #14]
 800789a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800789e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	78db      	ldrb	r3, [r3, #3]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d06c      	beq.n	8007990 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078cc:	81bb      	strh	r3, [r7, #12]
 80078ce:	89bb      	ldrh	r3, [r7, #12]
 80078d0:	f083 0320 	eor.w	r3, r3, #32
 80078d4:	81bb      	strh	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	89bb      	ldrh	r3, [r7, #12]
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
 80078f6:	e04b      	b.n	8007990 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	82fb      	strh	r3, [r7, #22]
 8007906:	8afb      	ldrh	r3, [r7, #22]
 8007908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01b      	beq.n	8007948 <USB_EPClearStall+0x106>
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007926:	82bb      	strh	r3, [r7, #20]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	441a      	add	r2, r3
 8007932:	8abb      	ldrh	r3, [r7, #20]
 8007934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800793c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007944:	b29b      	uxth	r3, r3
 8007946:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	827b      	strh	r3, [r7, #18]
 8007960:	8a7b      	ldrh	r3, [r7, #18]
 8007962:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007966:	827b      	strh	r3, [r7, #18]
 8007968:	8a7b      	ldrh	r3, [r7, #18]
 800796a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800796e:	827b      	strh	r3, [r7, #18]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	8a7b      	ldrh	r3, [r7, #18]
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr

0800799c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2280      	movs	r2, #128	@ 0x80
 80079b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr

080079ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b085      	sub	sp, #20
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr

08007a1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b08b      	sub	sp, #44	@ 0x2c
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	80fb      	strh	r3, [r7, #6]
 8007a30:	4613      	mov	r3, r2
 8007a32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a34:	88bb      	ldrh	r3, [r7, #4]
 8007a36:	3301      	adds	r3, #1
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	005a      	lsls	r2, r3, #1
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a56:	e01f      	b.n	8007a98 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3301      	adds	r3, #1
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b21b      	sxth	r3, r3
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	b21a      	sxth	r2, r3
 8007a6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	b21b      	sxth	r3, r3
 8007a72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	8a7a      	ldrh	r2, [r7, #18]
 8007a78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	3302      	adds	r3, #2
 8007a84:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	3b01      	subs	r3, #1
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1dc      	bne.n	8007a58 <USB_WritePMA+0x3a>
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	372c      	adds	r7, #44	@ 0x2c
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b08b      	sub	sp, #44	@ 0x2c
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	460b      	mov	r3, r1
 8007aba:	80fb      	strh	r3, [r7, #6]
 8007abc:	4613      	mov	r3, r2
 8007abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ac0:	88bb      	ldrh	r3, [r7, #4]
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	005a      	lsls	r2, r3, #1
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007adc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae2:	e01b      	b.n	8007b1c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	3302      	adds	r3, #2
 8007af0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	3301      	adds	r3, #1
 8007afe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	3302      	adds	r3, #2
 8007b14:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e0      	bne.n	8007ae4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b22:	88bb      	ldrh	r3, [r7, #4]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	701a      	strb	r2, [r3, #0]
  }
}
 8007b3e:	bf00      	nop
 8007b40:	372c      	adds	r7, #44	@ 0x2c
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bc80      	pop	{r7}
 8007b46:	4770      	bx	lr

08007b48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7c1b      	ldrb	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d115      	bne.n	8007b8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b64:	2202      	movs	r2, #2
 8007b66:	2181      	movs	r1, #129	@ 0x81
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fe8a 	bl	8009882 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b78:	2202      	movs	r2, #2
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fe80 	bl	8009882 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007b8a:	e012      	b.n	8007bb2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b8c:	2340      	movs	r3, #64	@ 0x40
 8007b8e:	2202      	movs	r2, #2
 8007b90:	2181      	movs	r1, #129	@ 0x81
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fe75 	bl	8009882 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b9e:	2340      	movs	r3, #64	@ 0x40
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fe6c 	bl	8009882 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	2182      	movs	r1, #130	@ 0x82
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fe62 	bl	8009882 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bc4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007bc8:	f001 ff82 	bl	8009ad0 <USBD_static_malloc>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
 8007be2:	e026      	b.n	8007c32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7c1b      	ldrb	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c18:	2101      	movs	r1, #1
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 ff21 	bl	8009a62 <USBD_LL_PrepareReceive>
 8007c20:	e007      	b.n	8007c32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c28:	2340      	movs	r3, #64	@ 0x40
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 ff18 	bl	8009a62 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c4c:	2181      	movs	r1, #129	@ 0x81
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 fe3d 	bl	80098ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 fe36 	bl	80098ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c6a:	2182      	movs	r1, #130	@ 0x82
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fe2e 	bl	80098ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00e      	beq.n	8007ca0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 ff28 	bl	8009ae8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d039      	beq.n	8007d48 <USBD_CDC_Setup+0x9e>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d17f      	bne.n	8007dd8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	88db      	ldrh	r3, [r3, #6]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d029      	beq.n	8007d34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b25b      	sxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	da11      	bge.n	8007d0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007cf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	88d2      	ldrh	r2, [r2, #6]
 8007cfc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007cfe:	6939      	ldr	r1, [r7, #16]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	88db      	ldrh	r3, [r3, #6]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fa06 	bl	8009118 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d0c:	e06b      	b.n	8007de6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	785a      	ldrb	r2, [r3, #1]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	88db      	ldrh	r3, [r3, #6]
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d24:	6939      	ldr	r1, [r7, #16]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fa21 	bl	8009174 <USBD_CtlPrepareRx>
      break;
 8007d32:	e058      	b.n	8007de6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	7850      	ldrb	r0, [r2, #1]
 8007d40:	2200      	movs	r2, #0
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	4798      	blx	r3
      break;
 8007d46:	e04e      	b.n	8007de6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b0b      	cmp	r3, #11
 8007d4e:	d02e      	beq.n	8007dae <USBD_CDC_Setup+0x104>
 8007d50:	2b0b      	cmp	r3, #11
 8007d52:	dc38      	bgt.n	8007dc6 <USBD_CDC_Setup+0x11c>
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <USBD_CDC_Setup+0xb4>
 8007d58:	2b0a      	cmp	r3, #10
 8007d5a:	d014      	beq.n	8007d86 <USBD_CDC_Setup+0xdc>
 8007d5c:	e033      	b.n	8007dc6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d107      	bne.n	8007d78 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f9d1 	bl	8009118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d76:	e02e      	b.n	8007dd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 f962 	bl	8009044 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d80:	2302      	movs	r3, #2
 8007d82:	75fb      	strb	r3, [r7, #23]
          break;
 8007d84:	e027      	b.n	8007dd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d107      	bne.n	8007da0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d90:	f107 030f 	add.w	r3, r7, #15
 8007d94:	2201      	movs	r2, #1
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f9bd 	bl	8009118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d9e:	e01a      	b.n	8007dd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 f94e 	bl	8009044 <USBD_CtlError>
            ret = USBD_FAIL;
 8007da8:	2302      	movs	r3, #2
 8007daa:	75fb      	strb	r3, [r7, #23]
          break;
 8007dac:	e013      	b.n	8007dd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d00d      	beq.n	8007dd4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 f942 	bl	8009044 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dc4:	e006      	b.n	8007dd4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f93b 	bl	8009044 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007dd2:	e000      	b.n	8007dd6 <USBD_CDC_Setup+0x12c>
          break;
 8007dd4:	bf00      	nop
      }
      break;
 8007dd6:	e006      	b.n	8007de6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 f932 	bl	8009044 <USBD_CtlError>
      ret = USBD_FAIL;
 8007de0:	2302      	movs	r3, #2
 8007de2:	75fb      	strb	r3, [r7, #23]
      break;
 8007de4:	bf00      	nop
  }

  return ret;
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e02:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e0a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d03a      	beq.n	8007e8c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	331c      	adds	r3, #28
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d029      	beq.n	8007e80 <USBD_CDC_DataIn+0x90>
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	331c      	adds	r3, #28
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	78f9      	ldrb	r1, [r7, #3]
 8007e40:	68b8      	ldr	r0, [r7, #8]
 8007e42:	460b      	mov	r3, r1
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	440b      	add	r3, r1
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4403      	add	r3, r0
 8007e4c:	3320      	adds	r3, #32
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e54:	fb01 f303 	mul.w	r3, r1, r3
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d110      	bne.n	8007e80 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007e5e:	78fa      	ldrb	r2, [r7, #3]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	331c      	adds	r3, #28
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e72:	78f9      	ldrb	r1, [r7, #3]
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fdcf 	bl	8009a1c <USBD_LL_Transmit>
 8007e7e:	e003      	b.n	8007e88 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e000      	b.n	8007e8e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e8c:	2302      	movs	r3, #2
  }
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fdfa 	bl	8009aa8 <USBD_LL_GetRxDataSize>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007eda:	4611      	mov	r1, r2
 8007edc:	4798      	blx	r3

    return USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e000      	b.n	8007ee4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ee2:	2302      	movs	r3, #2
  }
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007efa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d014      	beq.n	8007f30 <USBD_CDC_EP0_RxReady+0x44>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007f0c:	2bff      	cmp	r3, #255	@ 0xff
 8007f0e:	d00f      	beq.n	8007f30 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	22ff      	movs	r2, #255	@ 0xff
 8007f2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2243      	movs	r2, #67	@ 0x43
 8007f48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007f4a:	4b03      	ldr	r3, [pc, #12]	@ (8007f58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	20000094 	.word	0x20000094

08007f5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2243      	movs	r2, #67	@ 0x43
 8007f68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	@ (8007f78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000050 	.word	0x20000050

08007f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2243      	movs	r2, #67	@ 0x43
 8007f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f8a:	4b03      	ldr	r3, [pc, #12]	@ (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	200000d8 	.word	0x200000d8

08007f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	@ (8007fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr

08007fe8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008006:	88fa      	ldrh	r2, [r7, #6]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr

08008040 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800804e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01c      	beq.n	8008094 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008060:	2b00      	cmp	r3, #0
 8008062:	d115      	bne.n	8008090 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008082:	b29b      	uxth	r3, r3
 8008084:	2181      	movs	r1, #129	@ 0x81
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fcc8 	bl	8009a1c <USBD_LL_Transmit>

      return USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	e002      	b.n	8008096 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008094:	2302      	movs	r3, #2
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d017      	beq.n	80080e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	7c1b      	ldrb	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080ca:	2101      	movs	r1, #1
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 fcc8 	bl	8009a62 <USBD_LL_PrepareReceive>
 80080d2:	e007      	b.n	80080e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080da:	2340      	movs	r3, #64	@ 0x40
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fcbf 	bl	8009a62 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	4613      	mov	r3, r2
 80080fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008106:	2302      	movs	r3, #2
 8008108:	e01a      	b.n	8008140 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	79fa      	ldrb	r2, [r7, #7]
 8008136:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f001 fb2d 	bl	8009798 <USBD_LL_Init>

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	e001      	b.n	800816e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800816a:	2302      	movs	r3, #2
 800816c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr

0800817a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 fb62 	bl	800984c <USBD_LL_Start>

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081b2:	2302      	movs	r3, #2
 80081b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00c      	beq.n	80081da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	4611      	mov	r1, r2
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	4611      	mov	r1, r2
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fed8 	bl	8008fd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008230:	461a      	mov	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	2b02      	cmp	r3, #2
 8008244:	d016      	beq.n	8008274 <USBD_LL_SetupStage+0x6a>
 8008246:	2b02      	cmp	r3, #2
 8008248:	d81c      	bhi.n	8008284 <USBD_LL_SetupStage+0x7a>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <USBD_LL_SetupStage+0x4a>
 800824e:	2b01      	cmp	r3, #1
 8008250:	d008      	beq.n	8008264 <USBD_LL_SetupStage+0x5a>
 8008252:	e017      	b.n	8008284 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f9cb 	bl	80085f8 <USBD_StdDevReq>
      break;
 8008262:	e01a      	b.n	800829a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa2d 	bl	80086cc <USBD_StdItfReq>
      break;
 8008272:	e012      	b.n	800829a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fa6d 	bl	800875c <USBD_StdEPReq>
      break;
 8008282:	e00a      	b.n	800829a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800828a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800828e:	b2db      	uxtb	r3, r3
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 fb3a 	bl	800990c <USBD_LL_StallEP>
      break;
 8008298:	bf00      	nop
  }

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	460b      	mov	r3, r1
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d14b      	bne.n	8008350 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80082be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d134      	bne.n	8008334 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d919      	bls.n	800830a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d203      	bcs.n	80082f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	e002      	b.n	80082fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 ff54 	bl	80091b0 <USBD_CtlContinueRx>
 8008308:	e038      	b.n	800837c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800831c:	2b03      	cmp	r3, #3
 800831e:	d105      	bne.n	800832c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 ff51 	bl	80091d4 <USBD_CtlSendStatus>
 8008332:	e023      	b.n	800837c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800833a:	2b05      	cmp	r3, #5
 800833c:	d11e      	bne.n	800837c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008346:	2100      	movs	r1, #0
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f001 fadf 	bl	800990c <USBD_LL_StallEP>
 800834e:	e015      	b.n	800837c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00d      	beq.n	8008378 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008362:	2b03      	cmp	r3, #3
 8008364:	d108      	bne.n	8008378 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	7afa      	ldrb	r2, [r7, #11]
 8008370:	4611      	mov	r1, r2
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	4798      	blx	r3
 8008376:	e001      	b.n	800837c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008378:	2302      	movs	r3, #2
 800837a:	e000      	b.n	800837e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	460b      	mov	r3, r1
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d17f      	bne.n	800849a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3314      	adds	r3, #20
 800839e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d15c      	bne.n	8008464 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d915      	bls.n	80083e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 febe 	bl	8009150 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d4:	2300      	movs	r3, #0
 80083d6:	2200      	movs	r2, #0
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 fb41 	bl	8009a62 <USBD_LL_PrepareReceive>
 80083e0:	e04e      	b.n	8008480 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	6912      	ldr	r2, [r2, #16]
 80083ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80083ee:	fb01 f202 	mul.w	r2, r1, r2
 80083f2:	1a9b      	subs	r3, r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11c      	bne.n	8008432 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008400:	429a      	cmp	r2, r3
 8008402:	d316      	bcc.n	8008432 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800840e:	429a      	cmp	r2, r3
 8008410:	d20f      	bcs.n	8008432 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008412:	2200      	movs	r2, #0
 8008414:	2100      	movs	r1, #0
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fe9a 	bl	8009150 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008424:	2300      	movs	r3, #0
 8008426:	2200      	movs	r2, #0
 8008428:	2100      	movs	r1, #0
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f001 fb19 	bl	8009a62 <USBD_LL_PrepareReceive>
 8008430:	e026      	b.n	8008480 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008444:	2b03      	cmp	r3, #3
 8008446:	d105      	bne.n	8008454 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008454:	2180      	movs	r1, #128	@ 0x80
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f001 fa58 	bl	800990c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fecc 	bl	80091fa <USBD_CtlReceiveStatus>
 8008462:	e00d      	b.n	8008480 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800846a:	2b04      	cmp	r3, #4
 800846c:	d004      	beq.n	8008478 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008478:	2180      	movs	r1, #128	@ 0x80
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f001 fa46 	bl	800990c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008486:	2b01      	cmp	r3, #1
 8008488:	d11d      	bne.n	80084c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fe81 	bl	8008192 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008498:	e015      	b.n	80084c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00d      	beq.n	80084c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d108      	bne.n	80084c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	7afa      	ldrb	r2, [r7, #11]
 80084ba:	4611      	mov	r1, r2
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	4798      	blx	r3
 80084c0:	e001      	b.n	80084c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084c2:	2302      	movs	r3, #2
 80084c4:	e000      	b.n	80084c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084d8:	2340      	movs	r3, #64	@ 0x40
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 f9cf 	bl	8009882 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2240      	movs	r2, #64	@ 0x40
 80084f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084f4:	2340      	movs	r3, #64	@ 0x40
 80084f6:	2200      	movs	r2, #0
 80084f8:	2180      	movs	r1, #128	@ 0x80
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 f9c1 	bl	8009882 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2240      	movs	r2, #64	@ 0x40
 800850a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6852      	ldr	r2, [r2, #4]
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	4611      	mov	r1, r2
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4798      	blx	r3
  }

  return USBD_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2204      	movs	r2, #4
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d105      	bne.n	80085b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr

080085c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d10b      	bne.n	80085ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800860e:	2b40      	cmp	r3, #64	@ 0x40
 8008610:	d005      	beq.n	800861e <USBD_StdDevReq+0x26>
 8008612:	2b40      	cmp	r3, #64	@ 0x40
 8008614:	d84f      	bhi.n	80086b6 <USBD_StdDevReq+0xbe>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <USBD_StdDevReq+0x36>
 800861a:	2b20      	cmp	r3, #32
 800861c:	d14b      	bne.n	80086b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
      break;
 800862c:	e048      	b.n	80086c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b09      	cmp	r3, #9
 8008634:	d839      	bhi.n	80086aa <USBD_StdDevReq+0xb2>
 8008636:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <USBD_StdDevReq+0x44>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	0800868d 	.word	0x0800868d
 8008640:	080086a1 	.word	0x080086a1
 8008644:	080086ab 	.word	0x080086ab
 8008648:	08008697 	.word	0x08008697
 800864c:	080086ab 	.word	0x080086ab
 8008650:	0800866f 	.word	0x0800866f
 8008654:	08008665 	.word	0x08008665
 8008658:	080086ab 	.word	0x080086ab
 800865c:	08008683 	.word	0x08008683
 8008660:	08008679 	.word	0x08008679
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f9dc 	bl	8008a24 <USBD_GetDescriptor>
          break;
 800866c:	e022      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fb3f 	bl	8008cf4 <USBD_SetAddress>
          break;
 8008676:	e01d      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb7e 	bl	8008d7c <USBD_SetConfig>
          break;
 8008680:	e018      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc07 	bl	8008e98 <USBD_GetConfig>
          break;
 800868a:	e013      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fc37 	bl	8008f02 <USBD_GetStatus>
          break;
 8008694:	e00e      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fc65 	bl	8008f68 <USBD_SetFeature>
          break;
 800869e:	e009      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fc74 	bl	8008f90 <USBD_ClrFeature>
          break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fcc9 	bl	8009044 <USBD_CtlError>
          break;
 80086b2:	bf00      	nop
      }
      break;
 80086b4:	e004      	b.n	80086c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fcc3 	bl	8009044 <USBD_CtlError>
      break;
 80086be:	bf00      	nop
  }

  return ret;
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d005      	beq.n	80086f2 <USBD_StdItfReq+0x26>
 80086e6:	2b40      	cmp	r3, #64	@ 0x40
 80086e8:	d82e      	bhi.n	8008748 <USBD_StdItfReq+0x7c>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <USBD_StdItfReq+0x26>
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d12a      	bne.n	8008748 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f8:	3b01      	subs	r3, #1
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d81d      	bhi.n	800873a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	889b      	ldrh	r3, [r3, #4]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d813      	bhi.n	8008730 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
 8008716:	4603      	mov	r3, r0
 8008718:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	88db      	ldrh	r3, [r3, #6]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d110      	bne.n	8008744 <USBD_StdItfReq+0x78>
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10d      	bne.n	8008744 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fd53 	bl	80091d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800872e:	e009      	b.n	8008744 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fc86 	bl	8009044 <USBD_CtlError>
          break;
 8008738:	e004      	b.n	8008744 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc81 	bl	8009044 <USBD_CtlError>
          break;
 8008742:	e000      	b.n	8008746 <USBD_StdItfReq+0x7a>
          break;
 8008744:	bf00      	nop
      }
      break;
 8008746:	e004      	b.n	8008752 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fc7a 	bl	8009044 <USBD_CtlError>
      break;
 8008750:	bf00      	nop
  }

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008778:	2b40      	cmp	r3, #64	@ 0x40
 800877a:	d007      	beq.n	800878c <USBD_StdEPReq+0x30>
 800877c:	2b40      	cmp	r3, #64	@ 0x40
 800877e:	f200 8146 	bhi.w	8008a0e <USBD_StdEPReq+0x2b2>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <USBD_StdEPReq+0x40>
 8008786:	2b20      	cmp	r3, #32
 8008788:	f040 8141 	bne.w	8008a0e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
      break;
 800879a:	e13d      	b.n	8008a18 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d10a      	bne.n	80087be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
 80087b6:	4603      	mov	r3, r0
 80087b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	e12d      	b.n	8008a1a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d007      	beq.n	80087d6 <USBD_StdEPReq+0x7a>
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	f300 811b 	bgt.w	8008a02 <USBD_StdEPReq+0x2a6>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d072      	beq.n	80088b6 <USBD_StdEPReq+0x15a>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d03a      	beq.n	800884a <USBD_StdEPReq+0xee>
 80087d4:	e115      	b.n	8008a02 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d002      	beq.n	80087e6 <USBD_StdEPReq+0x8a>
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d015      	beq.n	8008810 <USBD_StdEPReq+0xb4>
 80087e4:	e02b      	b.n	800883e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00c      	beq.n	8008806 <USBD_StdEPReq+0xaa>
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b80      	cmp	r3, #128	@ 0x80
 80087f0:	d009      	beq.n	8008806 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 f888 	bl	800990c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087fc:	2180      	movs	r1, #128	@ 0x80
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 f884 	bl	800990c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008804:	e020      	b.n	8008848 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fc1b 	bl	8009044 <USBD_CtlError>
              break;
 800880e:	e01b      	b.n	8008848 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	885b      	ldrh	r3, [r3, #2]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10e      	bne.n	8008836 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <USBD_StdEPReq+0xda>
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b80      	cmp	r3, #128	@ 0x80
 8008822:	d008      	beq.n	8008836 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f86b 	bl	800990c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fccc 	bl	80091d4 <USBD_CtlSendStatus>

              break;
 800883c:	e004      	b.n	8008848 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fbff 	bl	8009044 <USBD_CtlError>
              break;
 8008846:	bf00      	nop
          }
          break;
 8008848:	e0e0      	b.n	8008a0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008850:	2b02      	cmp	r3, #2
 8008852:	d002      	beq.n	800885a <USBD_StdEPReq+0xfe>
 8008854:	2b03      	cmp	r3, #3
 8008856:	d015      	beq.n	8008884 <USBD_StdEPReq+0x128>
 8008858:	e026      	b.n	80088a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <USBD_StdEPReq+0x11e>
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b80      	cmp	r3, #128	@ 0x80
 8008864:	d009      	beq.n	800887a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 f84e 	bl	800990c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008870:	2180      	movs	r1, #128	@ 0x80
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 f84a 	bl	800990c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008878:	e01c      	b.n	80088b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fbe1 	bl	8009044 <USBD_CtlError>
              break;
 8008882:	e017      	b.n	80088b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	885b      	ldrh	r3, [r3, #2]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d112      	bne.n	80088b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 f855 	bl	800994a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc97 	bl	80091d4 <USBD_CtlSendStatus>
              }
              break;
 80088a6:	e004      	b.n	80088b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fbca 	bl	8009044 <USBD_CtlError>
              break;
 80088b0:	e000      	b.n	80088b4 <USBD_StdEPReq+0x158>
              break;
 80088b2:	bf00      	nop
          }
          break;
 80088b4:	e0aa      	b.n	8008a0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d002      	beq.n	80088c6 <USBD_StdEPReq+0x16a>
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d032      	beq.n	800892a <USBD_StdEPReq+0x1ce>
 80088c4:	e097      	b.n	80089f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <USBD_StdEPReq+0x180>
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b80      	cmp	r3, #128	@ 0x80
 80088d0:	d004      	beq.n	80088dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fbb5 	bl	8009044 <USBD_CtlError>
                break;
 80088da:	e091      	b.n	8008a00 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	da0b      	bge.n	80088fc <USBD_StdEPReq+0x1a0>
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	3310      	adds	r3, #16
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	3304      	adds	r3, #4
 80088fa:	e00b      	b.n	8008914 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	3304      	adds	r3, #4
 8008914:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2202      	movs	r2, #2
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fbf8 	bl	8009118 <USBD_CtlSendData>
              break;
 8008928:	e06a      	b.n	8008a00 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800892a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	da11      	bge.n	8008956 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	f003 020f 	and.w	r2, r3, #15
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	3318      	adds	r3, #24
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d117      	bne.n	800897c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb78 	bl	8009044 <USBD_CtlError>
                  break;
 8008954:	e054      	b.n	8008a00 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	f003 020f 	and.w	r2, r3, #15
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d104      	bne.n	800897c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fb65 	bl	8009044 <USBD_CtlError>
                  break;
 800897a:	e041      	b.n	8008a00 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800897c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da0b      	bge.n	800899c <USBD_StdEPReq+0x240>
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	3310      	adds	r3, #16
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	3304      	adds	r3, #4
 800899a:	e00b      	b.n	80089b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	3304      	adds	r3, #4
 80089b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <USBD_StdEPReq+0x266>
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b80      	cmp	r3, #128	@ 0x80
 80089c0:	d103      	bne.n	80089ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	e00e      	b.n	80089e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 ffda 	bl	8009988 <USBD_LL_IsStallEP>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2201      	movs	r2, #1
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e002      	b.n	80089e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2202      	movs	r2, #2
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fb92 	bl	8009118 <USBD_CtlSendData>
              break;
 80089f4:	e004      	b.n	8008a00 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fb23 	bl	8009044 <USBD_CtlError>
              break;
 80089fe:	bf00      	nop
          }
          break;
 8008a00:	e004      	b.n	8008a0c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fb1d 	bl	8009044 <USBD_CtlError>
          break;
 8008a0a:	bf00      	nop
      }
      break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fb17 	bl	8009044 <USBD_CtlError>
      break;
 8008a16:	bf00      	nop
  }

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	885b      	ldrh	r3, [r3, #2]
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b06      	cmp	r3, #6
 8008a46:	f200 8128 	bhi.w	8008c9a <USBD_GetDescriptor+0x276>
 8008a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <USBD_GetDescriptor+0x2c>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a6d 	.word	0x08008a6d
 8008a54:	08008a85 	.word	0x08008a85
 8008a58:	08008ac5 	.word	0x08008ac5
 8008a5c:	08008c9b 	.word	0x08008c9b
 8008a60:	08008c9b 	.word	0x08008c9b
 8008a64:	08008c3b 	.word	0x08008c3b
 8008a68:	08008c67 	.word	0x08008c67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7c12      	ldrb	r2, [r2, #16]
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
      break;
 8008a82:	e112      	b.n	8008caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7c1b      	ldrb	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10d      	bne.n	8008aa8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f107 0208 	add.w	r2, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008aa6:	e100      	b.n	8008caa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	f107 0208 	add.w	r2, r7, #8
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
 8008ab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	2202      	movs	r2, #2
 8008ac0:	701a      	strb	r2, [r3, #0]
      break;
 8008ac2:	e0f2      	b.n	8008caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	885b      	ldrh	r3, [r3, #2]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	f200 80ac 	bhi.w	8008c28 <USBD_GetDescriptor+0x204>
 8008ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad8 <USBD_GetDescriptor+0xb4>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008af1 	.word	0x08008af1
 8008adc:	08008b25 	.word	0x08008b25
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b8d 	.word	0x08008b8d
 8008ae8:	08008bc1 	.word	0x08008bc1
 8008aec:	08008bf5 	.word	0x08008bf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7c12      	ldrb	r2, [r2, #16]
 8008b08:	f107 0108 	add.w	r1, r7, #8
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b12:	e091      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa94 	bl	8009044 <USBD_CtlError>
            err++;
 8008b1c:	7afb      	ldrb	r3, [r7, #11]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	72fb      	strb	r3, [r7, #11]
          break;
 8008b22:	e089      	b.n	8008c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7c12      	ldrb	r2, [r2, #16]
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b46:	e077      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fa7a 	bl	8009044 <USBD_CtlError>
            err++;
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	3301      	adds	r3, #1
 8008b54:	72fb      	strb	r3, [r7, #11]
          break;
 8008b56:	e06f      	b.n	8008c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7a:	e05d      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa60 	bl	8009044 <USBD_CtlError>
            err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8a:	e055      	b.n	8008c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bae:	e043      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fa46 	bl	8009044 <USBD_CtlError>
            err++;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bbe:	e03b      	b.n	8008c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be2:	e029      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa2c 	bl	8009044 <USBD_CtlError>
            err++;
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf2:	e021      	b.n	8008c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7c12      	ldrb	r2, [r2, #16]
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c16:	e00f      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa12 	bl	8009044 <USBD_CtlError>
            err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
          break;
 8008c26:	e007      	b.n	8008c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa0a 	bl	8009044 <USBD_CtlError>
          err++;
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	3301      	adds	r3, #1
 8008c34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c36:	e038      	b.n	8008caa <USBD_GetDescriptor+0x286>
 8008c38:	e037      	b.n	8008caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7c1b      	ldrb	r3, [r3, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4a:	f107 0208 	add.w	r2, r7, #8
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4798      	blx	r3
 8008c52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c54:	e029      	b.n	8008caa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f9f3 	bl	8009044 <USBD_CtlError>
        err++;
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
 8008c60:	3301      	adds	r3, #1
 8008c62:	72fb      	strb	r3, [r7, #11]
      break;
 8008c64:	e021      	b.n	8008caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7c1b      	ldrb	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10d      	bne.n	8008c8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c76:	f107 0208 	add.w	r2, r7, #8
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4798      	blx	r3
 8008c7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	2207      	movs	r2, #7
 8008c86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c88:	e00f      	b.n	8008caa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f9d9 	bl	8009044 <USBD_CtlError>
        err++;
 8008c92:	7afb      	ldrb	r3, [r7, #11]
 8008c94:	3301      	adds	r3, #1
 8008c96:	72fb      	strb	r3, [r7, #11]
      break;
 8008c98:	e007      	b.n	8008caa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f9d1 	bl	8009044 <USBD_CtlError>
      err++;
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ca8:	bf00      	nop
  }

  if (err != 0U)
 8008caa:	7afb      	ldrb	r3, [r7, #11]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d11c      	bne.n	8008cea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008cb0:	893b      	ldrh	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d011      	beq.n	8008cda <USBD_GetDescriptor+0x2b6>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	88db      	ldrh	r3, [r3, #6]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00d      	beq.n	8008cda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	88da      	ldrh	r2, [r3, #6]
 8008cc2:	893b      	ldrh	r3, [r7, #8]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	bf28      	it	cs
 8008cc8:	4613      	movcs	r3, r2
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cce:	893b      	ldrh	r3, [r7, #8]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fa1f 	bl	8009118 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	88db      	ldrh	r3, [r3, #6]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa76 	bl	80091d4 <USBD_CtlSendStatus>
 8008ce8:	e000      	b.n	8008cec <USBD_GetDescriptor+0x2c8>
    return;
 8008cea:	bf00      	nop
    }
  }
}
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	889b      	ldrh	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d130      	bne.n	8008d68 <USBD_SetAddress+0x74>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d12c      	bne.n	8008d68 <USBD_SetAddress+0x74>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d14:	d828      	bhi.n	8008d68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d104      	bne.n	8008d36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f988 	bl	8009044 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d34:	e01d      	b.n	8008d72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7bfa      	ldrb	r2, [r7, #15]
 8008d3a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fe4b 	bl	80099de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fa43 	bl	80091d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5c:	e009      	b.n	8008d72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d66:	e004      	b.n	8008d72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f96a 	bl	8009044 <USBD_CtlError>
  }
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	885b      	ldrh	r3, [r3, #2]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	4b41      	ldr	r3, [pc, #260]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008d8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d90:	4b40      	ldr	r3, [pc, #256]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d904      	bls.n	8008da2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f952 	bl	8009044 <USBD_CtlError>
 8008da0:	e075      	b.n	8008e8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d002      	beq.n	8008db2 <USBD_SetConfig+0x36>
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d023      	beq.n	8008df8 <USBD_SetConfig+0x7c>
 8008db0:	e062      	b.n	8008e78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008db2:	4b38      	ldr	r3, [pc, #224]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01a      	beq.n	8008df0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008dba:	4b36      	ldr	r3, [pc, #216]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dcc:	4b31      	ldr	r3, [pc, #196]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff f9e7 	bl	80081a6 <USBD_SetClassConfig>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d104      	bne.n	8008de8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f92f 	bl	8009044 <USBD_CtlError>
            return;
 8008de6:	e052      	b.n	8008e8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9f3 	bl	80091d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008dee:	e04e      	b.n	8008e8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f9ef 	bl	80091d4 <USBD_CtlSendStatus>
        break;
 8008df6:	e04a      	b.n	8008e8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008df8:	4b26      	ldr	r3, [pc, #152]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d112      	bne.n	8008e26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008e08:	4b22      	ldr	r3, [pc, #136]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e12:	4b20      	ldr	r3, [pc, #128]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff f9e3 	bl	80081e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9d8 	bl	80091d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e24:	e033      	b.n	8008e8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e26:	4b1b      	ldr	r3, [pc, #108]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d01d      	beq.n	8008e70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff f9d1 	bl	80081e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e42:	4b14      	ldr	r3, [pc, #80]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e4c:	4b11      	ldr	r3, [pc, #68]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff f9a7 	bl	80081a6 <USBD_SetClassConfig>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d104      	bne.n	8008e68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f8ef 	bl	8009044 <USBD_CtlError>
            return;
 8008e66:	e012      	b.n	8008e8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9b3 	bl	80091d4 <USBD_CtlSendStatus>
        break;
 8008e6e:	e00e      	b.n	8008e8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f9af 	bl	80091d4 <USBD_CtlSendStatus>
        break;
 8008e76:	e00a      	b.n	8008e8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f8e2 	bl	8009044 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e80:	4b04      	ldr	r3, [pc, #16]	@ (8008e94 <USBD_SetConfig+0x118>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff f9ac 	bl	80081e4 <USBD_ClrClassConfig>
        break;
 8008e8c:	bf00      	nop
    }
  }
}
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	2000128c 	.word	0x2000128c

08008e98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	88db      	ldrh	r3, [r3, #6]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d004      	beq.n	8008eb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f8c9 	bl	8009044 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008eb2:	e022      	b.n	8008efa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	dc02      	bgt.n	8008ec4 <USBD_GetConfig+0x2c>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dc03      	bgt.n	8008eca <USBD_GetConfig+0x32>
 8008ec2:	e015      	b.n	8008ef0 <USBD_GetConfig+0x58>
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_GetConfig+0x48>
 8008ec8:	e012      	b.n	8008ef0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f91d 	bl	8009118 <USBD_CtlSendData>
        break;
 8008ede:	e00c      	b.n	8008efa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f915 	bl	8009118 <USBD_CtlSendData>
        break;
 8008eee:	e004      	b.n	8008efa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8a6 	bl	8009044 <USBD_CtlError>
        break;
 8008ef8:	bf00      	nop
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d81e      	bhi.n	8008f56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	88db      	ldrh	r3, [r3, #6]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d004      	beq.n	8008f2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f88e 	bl	8009044 <USBD_CtlError>
        break;
 8008f28:	e01a      	b.n	8008f60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f043 0202 	orr.w	r2, r3, #2
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	330c      	adds	r3, #12
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8e2 	bl	8009118 <USBD_CtlSendData>
      break;
 8008f54:	e004      	b.n	8008f60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f873 	bl	8009044 <USBD_CtlError>
      break;
 8008f5e:	bf00      	nop
  }
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d106      	bne.n	8008f88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f926 	bl	80091d4 <USBD_CtlSendStatus>
  }
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d80b      	bhi.n	8008fbe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	885b      	ldrh	r3, [r3, #2]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d10c      	bne.n	8008fc8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f90c 	bl	80091d4 <USBD_CtlSendStatus>
      }
      break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f83f 	bl	8009044 <USBD_CtlError>
      break;
 8008fc6:	e000      	b.n	8008fca <USBD_ClrFeature+0x3a>
      break;
 8008fc8:	bf00      	nop
  }
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781a      	ldrb	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	785a      	ldrb	r2, [r3, #1]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	3302      	adds	r3, #2
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	3303      	adds	r3, #3
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	3304      	adds	r3, #4
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	3305      	adds	r3, #5
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b29b      	uxth	r3, r3
 8009018:	4413      	add	r3, r2
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	3306      	adds	r3, #6
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	3307      	adds	r3, #7
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	b29b      	uxth	r3, r3
 8009032:	4413      	add	r3, r2
 8009034:	b29a      	uxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	80da      	strh	r2, [r3, #6]

}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fc5b 	bl	800990c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009056:	2100      	movs	r1, #0
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc57 	bl	800990c <USBD_LL_StallEP>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b086      	sub	sp, #24
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d032      	beq.n	80090e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f834 	bl	80090ea <USBD_GetLen>
 8009082:	4603      	mov	r3, r0
 8009084:	3301      	adds	r3, #1
 8009086:	b29b      	uxth	r3, r3
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	75fa      	strb	r2, [r7, #23]
 8009096:	461a      	mov	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4413      	add	r3, r2
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	75fa      	strb	r2, [r7, #23]
 80090a8:	461a      	mov	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	2203      	movs	r2, #3
 80090b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090b2:	e012      	b.n	80090da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	60fa      	str	r2, [r7, #12]
 80090ba:	7dfa      	ldrb	r2, [r7, #23]
 80090bc:	1c51      	adds	r1, r2, #1
 80090be:	75f9      	strb	r1, [r7, #23]
 80090c0:	4611      	mov	r1, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	440a      	add	r2, r1
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	75fa      	strb	r2, [r7, #23]
 80090d0:	461a      	mov	r2, r3
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4413      	add	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e8      	bne.n	80090b4 <USBD_GetString+0x4e>
    }
  }
}
 80090e2:	bf00      	nop
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80090f6:	e005      	b.n	8009104 <USBD_GetLen+0x1a>
  {
    len++;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	3301      	adds	r3, #1
 80090fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3301      	adds	r3, #1
 8009102:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f5      	bne.n	80090f8 <USBD_GetLen+0xe>
  }

  return len;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2202      	movs	r2, #2
 800912a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fc6b 	bl	8009a1c <USBD_LL_Transmit>

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	2100      	movs	r1, #0
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fc59 	bl	8009a1c <USBD_LL_Transmit>

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2203      	movs	r2, #3
 8009186:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009192:	88fa      	ldrh	r2, [r7, #6]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	2100      	movs	r1, #0
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 fc5e 	bl	8009a62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	2100      	movs	r1, #0
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 fc4c 	bl	8009a62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2204      	movs	r2, #4
 80091e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091e4:	2300      	movs	r3, #0
 80091e6:	2200      	movs	r2, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fc16 	bl	8009a1c <USBD_LL_Transmit>

  return USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2205      	movs	r2, #5
 8009206:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800920a:	2300      	movs	r3, #0
 800920c:	2200      	movs	r2, #0
 800920e:	2100      	movs	r1, #0
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fc26 	bl	8009a62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009224:	2200      	movs	r2, #0
 8009226:	4912      	ldr	r1, [pc, #72]	@ (8009270 <MX_USB_DEVICE_Init+0x50>)
 8009228:	4812      	ldr	r0, [pc, #72]	@ (8009274 <MX_USB_DEVICE_Init+0x54>)
 800922a:	f7fe ff62 	bl	80080f2 <USBD_Init>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009234:	f7f7 fb7e 	bl	8000934 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009238:	490f      	ldr	r1, [pc, #60]	@ (8009278 <MX_USB_DEVICE_Init+0x58>)
 800923a:	480e      	ldr	r0, [pc, #56]	@ (8009274 <MX_USB_DEVICE_Init+0x54>)
 800923c:	f7fe ff84 	bl	8008148 <USBD_RegisterClass>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009246:	f7f7 fb75 	bl	8000934 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800924a:	490c      	ldr	r1, [pc, #48]	@ (800927c <MX_USB_DEVICE_Init+0x5c>)
 800924c:	4809      	ldr	r0, [pc, #36]	@ (8009274 <MX_USB_DEVICE_Init+0x54>)
 800924e:	f7fe feb5 	bl	8007fbc <USBD_CDC_RegisterInterface>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009258:	f7f7 fb6c 	bl	8000934 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800925c:	4805      	ldr	r0, [pc, #20]	@ (8009274 <MX_USB_DEVICE_Init+0x54>)
 800925e:	f7fe ff8c 	bl	800817a <USBD_Start>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009268:	f7f7 fb64 	bl	8000934 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800926c:	bf00      	nop
 800926e:	bd80      	pop	{r7, pc}
 8009270:	2000012c 	.word	0x2000012c
 8009274:	20001290 	.word	0x20001290
 8009278:	20000018 	.word	0x20000018
 800927c:	2000011c 	.word	0x2000011c

08009280 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009284:	2200      	movs	r2, #0
 8009286:	4905      	ldr	r1, [pc, #20]	@ (800929c <CDC_Init_FS+0x1c>)
 8009288:	4805      	ldr	r0, [pc, #20]	@ (80092a0 <CDC_Init_FS+0x20>)
 800928a:	f7fe fead 	bl	8007fe8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800928e:	4905      	ldr	r1, [pc, #20]	@ (80092a4 <CDC_Init_FS+0x24>)
 8009290:	4803      	ldr	r0, [pc, #12]	@ (80092a0 <CDC_Init_FS+0x20>)
 8009292:	f7fe fec2 	bl	800801a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009296:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009298:	4618      	mov	r0, r3
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20001954 	.word	0x20001954
 80092a0:	20001290 	.word	0x20001290
 80092a4:	20001554 	.word	0x20001554

080092a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
	...

080092b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
 80092c4:	4613      	mov	r3, r2
 80092c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b23      	cmp	r3, #35	@ 0x23
 80092cc:	d84a      	bhi.n	8009364 <CDC_Control_FS+0xac>
 80092ce:	a201      	add	r2, pc, #4	@ (adr r2, 80092d4 <CDC_Control_FS+0x1c>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	08009365 	.word	0x08009365
 80092d8:	08009365 	.word	0x08009365
 80092dc:	08009365 	.word	0x08009365
 80092e0:	08009365 	.word	0x08009365
 80092e4:	08009365 	.word	0x08009365
 80092e8:	08009365 	.word	0x08009365
 80092ec:	08009365 	.word	0x08009365
 80092f0:	08009365 	.word	0x08009365
 80092f4:	08009365 	.word	0x08009365
 80092f8:	08009365 	.word	0x08009365
 80092fc:	08009365 	.word	0x08009365
 8009300:	08009365 	.word	0x08009365
 8009304:	08009365 	.word	0x08009365
 8009308:	08009365 	.word	0x08009365
 800930c:	08009365 	.word	0x08009365
 8009310:	08009365 	.word	0x08009365
 8009314:	08009365 	.word	0x08009365
 8009318:	08009365 	.word	0x08009365
 800931c:	08009365 	.word	0x08009365
 8009320:	08009365 	.word	0x08009365
 8009324:	08009365 	.word	0x08009365
 8009328:	08009365 	.word	0x08009365
 800932c:	08009365 	.word	0x08009365
 8009330:	08009365 	.word	0x08009365
 8009334:	08009365 	.word	0x08009365
 8009338:	08009365 	.word	0x08009365
 800933c:	08009365 	.word	0x08009365
 8009340:	08009365 	.word	0x08009365
 8009344:	08009365 	.word	0x08009365
 8009348:	08009365 	.word	0x08009365
 800934c:	08009365 	.word	0x08009365
 8009350:	08009365 	.word	0x08009365
 8009354:	08009365 	.word	0x08009365
 8009358:	08009365 	.word	0x08009365
 800935c:	08009365 	.word	0x08009365
 8009360:	08009365 	.word	0x08009365
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009364:	bf00      	nop
  }

  return (USBD_OK);
 8009366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop

08009374 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	4805      	ldr	r0, [pc, #20]	@ (8009398 <CDC_Receive_FS+0x24>)
 8009382:	f7fe fe4a 	bl	800801a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009386:	4804      	ldr	r0, [pc, #16]	@ (8009398 <CDC_Receive_FS+0x24>)
 8009388:	f7fe fe89 	bl	800809e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800938c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20001290 	.word	0x20001290

0800939c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093ac:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <CDC_Transmit_FS+0x48>)
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80093be:	2301      	movs	r3, #1
 80093c0:	e00b      	b.n	80093da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80093c2:	887b      	ldrh	r3, [r7, #2]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4806      	ldr	r0, [pc, #24]	@ (80093e4 <CDC_Transmit_FS+0x48>)
 80093ca:	f7fe fe0d 	bl	8007fe8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093ce:	4805      	ldr	r0, [pc, #20]	@ (80093e4 <CDC_Transmit_FS+0x48>)
 80093d0:	f7fe fe36 	bl	8008040 <USBD_CDC_TransmitPacket>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20001290 	.word	0x20001290

080093e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2212      	movs	r2, #18
 80093f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093fa:	4b03      	ldr	r3, [pc, #12]	@ (8009408 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20000148 	.word	0x20000148

0800940c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2204      	movs	r2, #4
 800941c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	@ (800942c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	2000015c 	.word	0x2000015c

08009430 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4907      	ldr	r1, [pc, #28]	@ (8009464 <USBD_FS_ProductStrDescriptor+0x34>)
 8009446:	4808      	ldr	r0, [pc, #32]	@ (8009468 <USBD_FS_ProductStrDescriptor+0x38>)
 8009448:	f7ff fe0d 	bl	8009066 <USBD_GetString>
 800944c:	e004      	b.n	8009458 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4904      	ldr	r1, [pc, #16]	@ (8009464 <USBD_FS_ProductStrDescriptor+0x34>)
 8009452:	4805      	ldr	r0, [pc, #20]	@ (8009468 <USBD_FS_ProductStrDescriptor+0x38>)
 8009454:	f7ff fe07 	bl	8009066 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009458:	4b02      	ldr	r3, [pc, #8]	@ (8009464 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20001d54 	.word	0x20001d54
 8009468:	0800a50c 	.word	0x0800a50c

0800946c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	4904      	ldr	r1, [pc, #16]	@ (800948c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800947c:	4804      	ldr	r0, [pc, #16]	@ (8009490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800947e:	f7ff fdf2 	bl	8009066 <USBD_GetString>
  return USBD_StrDesc;
 8009482:	4b02      	ldr	r3, [pc, #8]	@ (800948c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20001d54 	.word	0x20001d54
 8009490:	0800a524 	.word	0x0800a524

08009494 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	221a      	movs	r2, #26
 80094a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094a6:	f000 f843 	bl	8009530 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094aa:	4b02      	ldr	r3, [pc, #8]	@ (80094b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20000160 	.word	0x20000160

080094b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d105      	bne.n	80094d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	4907      	ldr	r1, [pc, #28]	@ (80094ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80094ce:	4808      	ldr	r0, [pc, #32]	@ (80094f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094d0:	f7ff fdc9 	bl	8009066 <USBD_GetString>
 80094d4:	e004      	b.n	80094e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	4904      	ldr	r1, [pc, #16]	@ (80094ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80094da:	4805      	ldr	r0, [pc, #20]	@ (80094f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094dc:	f7ff fdc3 	bl	8009066 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e0:	4b02      	ldr	r3, [pc, #8]	@ (80094ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20001d54 	.word	0x20001d54
 80094f0:	0800a538 	.word	0x0800a538

080094f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d105      	bne.n	8009512 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	4907      	ldr	r1, [pc, #28]	@ (8009528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800950a:	4808      	ldr	r0, [pc, #32]	@ (800952c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800950c:	f7ff fdab 	bl	8009066 <USBD_GetString>
 8009510:	e004      	b.n	800951c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	4904      	ldr	r1, [pc, #16]	@ (8009528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009516:	4805      	ldr	r0, [pc, #20]	@ (800952c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009518:	f7ff fda5 	bl	8009066 <USBD_GetString>
  }
  return USBD_StrDesc;
 800951c:	4b02      	ldr	r3, [pc, #8]	@ (8009528 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20001d54 	.word	0x20001d54
 800952c:	0800a544 	.word	0x0800a544

08009530 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009536:	4b0f      	ldr	r3, [pc, #60]	@ (8009574 <Get_SerialNum+0x44>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800953c:	4b0e      	ldr	r3, [pc, #56]	@ (8009578 <Get_SerialNum+0x48>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009542:	4b0e      	ldr	r3, [pc, #56]	@ (800957c <Get_SerialNum+0x4c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4413      	add	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009556:	2208      	movs	r2, #8
 8009558:	4909      	ldr	r1, [pc, #36]	@ (8009580 <Get_SerialNum+0x50>)
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f814 	bl	8009588 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009560:	2204      	movs	r2, #4
 8009562:	4908      	ldr	r1, [pc, #32]	@ (8009584 <Get_SerialNum+0x54>)
 8009564:	68b8      	ldr	r0, [r7, #8]
 8009566:	f000 f80f 	bl	8009588 <IntToUnicode>
  }
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	1ffff7e8 	.word	0x1ffff7e8
 8009578:	1ffff7ec 	.word	0x1ffff7ec
 800957c:	1ffff7f0 	.word	0x1ffff7f0
 8009580:	20000162 	.word	0x20000162
 8009584:	20000172 	.word	0x20000172

08009588 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
 800959e:	e027      	b.n	80095f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	0f1b      	lsrs	r3, r3, #28
 80095a4:	2b09      	cmp	r3, #9
 80095a6:	d80b      	bhi.n	80095c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	0f1b      	lsrs	r3, r3, #28
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	4619      	mov	r1, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	440b      	add	r3, r1
 80095b8:	3230      	adds	r2, #48	@ 0x30
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	e00a      	b.n	80095d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	0f1b      	lsrs	r3, r3, #28
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4619      	mov	r1, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	440b      	add	r3, r1
 80095d0:	3237      	adds	r2, #55	@ 0x37
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	011b      	lsls	r3, r3, #4
 80095da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	3301      	adds	r3, #1
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	4413      	add	r3, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	3301      	adds	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]
 80095f0:	7dfa      	ldrb	r2, [r7, #23]
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d3d3      	bcc.n	80095a0 <IntToUnicode+0x18>
  }
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr

08009604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a11      	ldr	r2, [pc, #68]	@ (8009658 <HAL_PCD_MspInit+0x54>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d11b      	bne.n	800964e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009616:	4b11      	ldr	r3, [pc, #68]	@ (800965c <HAL_PCD_MspInit+0x58>)
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	4a10      	ldr	r2, [pc, #64]	@ (800965c <HAL_PCD_MspInit+0x58>)
 800961c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009620:	61d3      	str	r3, [r2, #28]
 8009622:	4b0e      	ldr	r3, [pc, #56]	@ (800965c <HAL_PCD_MspInit+0x58>)
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800962e:	2200      	movs	r2, #0
 8009630:	2100      	movs	r1, #0
 8009632:	2013      	movs	r0, #19
 8009634:	f7f7 fe2f 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009638:	2013      	movs	r0, #19
 800963a:	f7f7 fe48 	bl	80012ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800963e:	2200      	movs	r2, #0
 8009640:	2100      	movs	r1, #0
 8009642:	2014      	movs	r0, #20
 8009644:	f7f7 fe27 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009648:	2014      	movs	r0, #20
 800964a:	f7f7 fe40 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40005c00 	.word	0x40005c00
 800965c:	40021000 	.word	0x40021000

08009660 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f7fe fdc7 	bl	800820a <USBD_LL_SetupStage>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	440b      	add	r3, r1
 80096a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	4619      	mov	r1, r3
 80096ae:	f7fe fdf9 	bl	80082a4 <USBD_LL_DataOutStage>
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	440b      	add	r3, r1
 80096da:	3324      	adds	r3, #36	@ 0x24
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	4619      	mov	r1, r3
 80096e2:	f7fe fe50 	bl	8008386 <USBD_LL_DataInStage>
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe ff60 	bl	80085c2 <USBD_LL_SOF>
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009712:	2301      	movs	r3, #1
 8009714:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	799b      	ldrb	r3, [r3, #6]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d001      	beq.n	8009722 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800971e:	f7f7 f909 	bl	8000934 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009728:	7bfa      	ldrb	r2, [r7, #15]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe ff10 	bl	8008552 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe fec9 	bl	80084d0 <USBD_LL_Reset>
}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe ff0a 	bl	8008570 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7a9b      	ldrb	r3, [r3, #10]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009764:	4b04      	ldr	r3, [pc, #16]	@ (8009778 <HAL_PCD_SuspendCallback+0x30>)
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	4a03      	ldr	r2, [pc, #12]	@ (8009778 <HAL_PCD_SuspendCallback+0x30>)
 800976a:	f043 0306 	orr.w	r3, r3, #6
 800976e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	e000ed00 	.word	0xe000ed00

0800977c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe ff04 	bl	8008598 <USBD_LL_Resume>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80097a0:	4a28      	ldr	r2, [pc, #160]	@ (8009844 <USBD_LL_Init+0xac>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a26      	ldr	r2, [pc, #152]	@ (8009844 <USBD_LL_Init+0xac>)
 80097ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80097b0:	4b24      	ldr	r3, [pc, #144]	@ (8009844 <USBD_LL_Init+0xac>)
 80097b2:	4a25      	ldr	r2, [pc, #148]	@ (8009848 <USBD_LL_Init+0xb0>)
 80097b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097b6:	4b23      	ldr	r3, [pc, #140]	@ (8009844 <USBD_LL_Init+0xac>)
 80097b8:	2208      	movs	r2, #8
 80097ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097bc:	4b21      	ldr	r3, [pc, #132]	@ (8009844 <USBD_LL_Init+0xac>)
 80097be:	2202      	movs	r2, #2
 80097c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097c2:	4b20      	ldr	r3, [pc, #128]	@ (8009844 <USBD_LL_Init+0xac>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009844 <USBD_LL_Init+0xac>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009844 <USBD_LL_Init+0xac>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097d4:	481b      	ldr	r0, [pc, #108]	@ (8009844 <USBD_LL_Init+0xac>)
 80097d6:	f7f8 fb71 	bl	8001ebc <HAL_PCD_Init>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80097e0:	f7f7 f8a8 	bl	8000934 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80097ea:	2318      	movs	r3, #24
 80097ec:	2200      	movs	r2, #0
 80097ee:	2100      	movs	r1, #0
 80097f0:	f7fa f882 	bl	80038f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80097fa:	2358      	movs	r3, #88	@ 0x58
 80097fc:	2200      	movs	r2, #0
 80097fe:	2180      	movs	r1, #128	@ 0x80
 8009800:	f7fa f87a 	bl	80038f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800980a:	23c0      	movs	r3, #192	@ 0xc0
 800980c:	2200      	movs	r2, #0
 800980e:	2181      	movs	r1, #129	@ 0x81
 8009810:	f7fa f872 	bl	80038f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800981a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800981e:	2200      	movs	r2, #0
 8009820:	2101      	movs	r1, #1
 8009822:	f7fa f869 	bl	80038f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800982c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009830:	2200      	movs	r2, #0
 8009832:	2182      	movs	r1, #130	@ 0x82
 8009834:	f7fa f860 	bl	80038f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20001f54 	.word	0x20001f54
 8009848:	40005c00 	.word	0x40005c00

0800984c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009862:	4618      	mov	r0, r3
 8009864:	f7f8 fc20 	bl	80020a8 <HAL_PCD_Start>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 f94e 	bl	8009b10 <USBD_Get_USB_Status>
 8009874:	4603      	mov	r3, r0
 8009876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009878:	7bbb      	ldrb	r3, [r7, #14]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	4608      	mov	r0, r1
 800988c:	4611      	mov	r1, r2
 800988e:	461a      	mov	r2, r3
 8009890:	4603      	mov	r3, r0
 8009892:	70fb      	strb	r3, [r7, #3]
 8009894:	460b      	mov	r3, r1
 8009896:	70bb      	strb	r3, [r7, #2]
 8009898:	4613      	mov	r3, r2
 800989a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80098aa:	78bb      	ldrb	r3, [r7, #2]
 80098ac:	883a      	ldrh	r2, [r7, #0]
 80098ae:	78f9      	ldrb	r1, [r7, #3]
 80098b0:	f7f8 fd74 	bl	800239c <HAL_PCD_EP_Open>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f928 	bl	8009b10 <USBD_Get_USB_Status>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7f8 fdb2 	bl	8002456 <HAL_PCD_EP_Close>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 f909 	bl	8009b10 <USBD_Get_USB_Status>
 80098fe:	4603      	mov	r3, r0
 8009900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009902:	7bbb      	ldrb	r3, [r7, #14]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7f8 fe5a 	bl	80025e4 <HAL_PCD_EP_SetStall>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f8ea 	bl	8009b10 <USBD_Get_USB_Status>
 800993c:	4603      	mov	r3, r0
 800993e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009940:	7bbb      	ldrb	r3, [r7, #14]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	4611      	mov	r1, r2
 8009968:	4618      	mov	r0, r3
 800996a:	f7f8 fe9b 	bl	80026a4 <HAL_PCD_EP_ClrStall>
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 f8cb 	bl	8009b10 <USBD_Get_USB_Status>
 800997a:	4603      	mov	r3, r0
 800997c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800999a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800999c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	da0b      	bge.n	80099bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099aa:	68f9      	ldr	r1, [r7, #12]
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	440b      	add	r3, r1
 80099b6:	3312      	adds	r3, #18
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	e00b      	b.n	80099d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099bc:	78fb      	ldrb	r3, [r7, #3]
 80099be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099c2:	68f9      	ldr	r1, [r7, #12]
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	440b      	add	r3, r1
 80099ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80099d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr

080099de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f8 fca9 	bl	8002354 <HAL_PCD_SetAddress>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 f881 	bl	8009b10 <USBD_Get_USB_Status>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	607a      	str	r2, [r7, #4]
 8009a26:	461a      	mov	r2, r3
 8009a28:	460b      	mov	r3, r1
 8009a2a:	72fb      	strb	r3, [r7, #11]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a3e:	893b      	ldrh	r3, [r7, #8]
 8009a40:	7af9      	ldrb	r1, [r7, #11]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	f7f8 fd97 	bl	8002576 <HAL_PCD_EP_Transmit>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f85e 	bl	8009b10 <USBD_Get_USB_Status>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	460b      	mov	r3, r1
 8009a70:	72fb      	strb	r3, [r7, #11]
 8009a72:	4613      	mov	r3, r2
 8009a74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a84:	893b      	ldrh	r3, [r7, #8]
 8009a86:	7af9      	ldrb	r1, [r7, #11]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	f7f8 fd2c 	bl	80024e6 <HAL_PCD_EP_Receive>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 f83b 	bl	8009b10 <USBD_Get_USB_Status>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f8 fd42 	bl	8002548 <HAL_PCD_EP_GetRxCount>
 8009ac4:	4603      	mov	r3, r0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ad8:	4b02      	ldr	r3, [pc, #8]	@ (8009ae4 <USBD_static_malloc+0x14>)
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr
 8009ae4:	2000222c 	.word	0x2000222c

08009ae8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr

08009afa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bc80      	pop	{r7}
 8009b0e:	4770      	bx	lr

08009b10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d817      	bhi.n	8009b54 <USBD_Get_USB_Status+0x44>
 8009b24:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <USBD_Get_USB_Status+0x1c>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b43 	.word	0x08009b43
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b4f 	.word	0x08009b4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b40:	e00b      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b42:	2302      	movs	r3, #2
 8009b44:	73fb      	strb	r3, [r7, #15]
    break;
 8009b46:	e008      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	e005      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	73fb      	strb	r3, [r7, #15]
    break;
 8009b52:	e002      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b54:	2302      	movs	r3, #2
 8009b56:	73fb      	strb	r3, [r7, #15]
    break;
 8009b58:	bf00      	nop
  }
  return usb_status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bc80      	pop	{r7}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop

08009b68 <sniprintf>:
 8009b68:	b40c      	push	{r2, r3}
 8009b6a:	b530      	push	{r4, r5, lr}
 8009b6c:	4b18      	ldr	r3, [pc, #96]	@ (8009bd0 <sniprintf+0x68>)
 8009b6e:	1e0c      	subs	r4, r1, #0
 8009b70:	681d      	ldr	r5, [r3, #0]
 8009b72:	b09d      	sub	sp, #116	@ 0x74
 8009b74:	da08      	bge.n	8009b88 <sniprintf+0x20>
 8009b76:	238b      	movs	r3, #139	@ 0x8b
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	b01d      	add	sp, #116	@ 0x74
 8009b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b84:	b002      	add	sp, #8
 8009b86:	4770      	bx	lr
 8009b88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009b96:	bf0c      	ite	eq
 8009b98:	4623      	moveq	r3, r4
 8009b9a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	9307      	str	r3, [sp, #28]
 8009ba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ba6:	9002      	str	r0, [sp, #8]
 8009ba8:	9006      	str	r0, [sp, #24]
 8009baa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009bae:	4628      	mov	r0, r5
 8009bb0:	ab21      	add	r3, sp, #132	@ 0x84
 8009bb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bb4:	a902      	add	r1, sp, #8
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	f000 f992 	bl	8009ee0 <_svfiprintf_r>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	bfbc      	itt	lt
 8009bc0:	238b      	movlt	r3, #139	@ 0x8b
 8009bc2:	602b      	strlt	r3, [r5, #0]
 8009bc4:	2c00      	cmp	r4, #0
 8009bc6:	d0da      	beq.n	8009b7e <sniprintf+0x16>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e7d6      	b.n	8009b7e <sniprintf+0x16>
 8009bd0:	2000017c 	.word	0x2000017c

08009bd4 <memset>:
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4402      	add	r2, r0
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d100      	bne.n	8009bde <memset+0xa>
 8009bdc:	4770      	bx	lr
 8009bde:	f803 1b01 	strb.w	r1, [r3], #1
 8009be2:	e7f9      	b.n	8009bd8 <memset+0x4>

08009be4 <__errno>:
 8009be4:	4b01      	ldr	r3, [pc, #4]	@ (8009bec <__errno+0x8>)
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	2000017c 	.word	0x2000017c

08009bf0 <__libc_init_array>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	4d0c      	ldr	r5, [pc, #48]	@ (8009c28 <__libc_init_array+0x38>)
 8009bf6:	4c0d      	ldr	r4, [pc, #52]	@ (8009c2c <__libc_init_array+0x3c>)
 8009bf8:	1b64      	subs	r4, r4, r5
 8009bfa:	10a4      	asrs	r4, r4, #2
 8009bfc:	42a6      	cmp	r6, r4
 8009bfe:	d109      	bne.n	8009c14 <__libc_init_array+0x24>
 8009c00:	f000 fc76 	bl	800a4f0 <_init>
 8009c04:	2600      	movs	r6, #0
 8009c06:	4d0a      	ldr	r5, [pc, #40]	@ (8009c30 <__libc_init_array+0x40>)
 8009c08:	4c0a      	ldr	r4, [pc, #40]	@ (8009c34 <__libc_init_array+0x44>)
 8009c0a:	1b64      	subs	r4, r4, r5
 8009c0c:	10a4      	asrs	r4, r4, #2
 8009c0e:	42a6      	cmp	r6, r4
 8009c10:	d105      	bne.n	8009c1e <__libc_init_array+0x2e>
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c18:	4798      	blx	r3
 8009c1a:	3601      	adds	r6, #1
 8009c1c:	e7ee      	b.n	8009bfc <__libc_init_array+0xc>
 8009c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c22:	4798      	blx	r3
 8009c24:	3601      	adds	r6, #1
 8009c26:	e7f2      	b.n	8009c0e <__libc_init_array+0x1e>
 8009c28:	0800a5ac 	.word	0x0800a5ac
 8009c2c:	0800a5ac 	.word	0x0800a5ac
 8009c30:	0800a5ac 	.word	0x0800a5ac
 8009c34:	0800a5b0 	.word	0x0800a5b0

08009c38 <__retarget_lock_acquire_recursive>:
 8009c38:	4770      	bx	lr

08009c3a <__retarget_lock_release_recursive>:
 8009c3a:	4770      	bx	lr

08009c3c <_free_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4605      	mov	r5, r0
 8009c40:	2900      	cmp	r1, #0
 8009c42:	d040      	beq.n	8009cc6 <_free_r+0x8a>
 8009c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c48:	1f0c      	subs	r4, r1, #4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bfb8      	it	lt
 8009c4e:	18e4      	addlt	r4, r4, r3
 8009c50:	f000 f8de 	bl	8009e10 <__malloc_lock>
 8009c54:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc8 <_free_r+0x8c>)
 8009c56:	6813      	ldr	r3, [r2, #0]
 8009c58:	b933      	cbnz	r3, 8009c68 <_free_r+0x2c>
 8009c5a:	6063      	str	r3, [r4, #4]
 8009c5c:	6014      	str	r4, [r2, #0]
 8009c5e:	4628      	mov	r0, r5
 8009c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c64:	f000 b8da 	b.w	8009e1c <__malloc_unlock>
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d908      	bls.n	8009c7e <_free_r+0x42>
 8009c6c:	6820      	ldr	r0, [r4, #0]
 8009c6e:	1821      	adds	r1, r4, r0
 8009c70:	428b      	cmp	r3, r1
 8009c72:	bf01      	itttt	eq
 8009c74:	6819      	ldreq	r1, [r3, #0]
 8009c76:	685b      	ldreq	r3, [r3, #4]
 8009c78:	1809      	addeq	r1, r1, r0
 8009c7a:	6021      	streq	r1, [r4, #0]
 8009c7c:	e7ed      	b.n	8009c5a <_free_r+0x1e>
 8009c7e:	461a      	mov	r2, r3
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	b10b      	cbz	r3, 8009c88 <_free_r+0x4c>
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	d9fa      	bls.n	8009c7e <_free_r+0x42>
 8009c88:	6811      	ldr	r1, [r2, #0]
 8009c8a:	1850      	adds	r0, r2, r1
 8009c8c:	42a0      	cmp	r0, r4
 8009c8e:	d10b      	bne.n	8009ca8 <_free_r+0x6c>
 8009c90:	6820      	ldr	r0, [r4, #0]
 8009c92:	4401      	add	r1, r0
 8009c94:	1850      	adds	r0, r2, r1
 8009c96:	4283      	cmp	r3, r0
 8009c98:	6011      	str	r1, [r2, #0]
 8009c9a:	d1e0      	bne.n	8009c5e <_free_r+0x22>
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	4408      	add	r0, r1
 8009ca2:	6010      	str	r0, [r2, #0]
 8009ca4:	6053      	str	r3, [r2, #4]
 8009ca6:	e7da      	b.n	8009c5e <_free_r+0x22>
 8009ca8:	d902      	bls.n	8009cb0 <_free_r+0x74>
 8009caa:	230c      	movs	r3, #12
 8009cac:	602b      	str	r3, [r5, #0]
 8009cae:	e7d6      	b.n	8009c5e <_free_r+0x22>
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	1821      	adds	r1, r4, r0
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	bf01      	itttt	eq
 8009cb8:	6819      	ldreq	r1, [r3, #0]
 8009cba:	685b      	ldreq	r3, [r3, #4]
 8009cbc:	1809      	addeq	r1, r1, r0
 8009cbe:	6021      	streq	r1, [r4, #0]
 8009cc0:	6063      	str	r3, [r4, #4]
 8009cc2:	6054      	str	r4, [r2, #4]
 8009cc4:	e7cb      	b.n	8009c5e <_free_r+0x22>
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20002590 	.word	0x20002590

08009ccc <sbrk_aligned>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4e0f      	ldr	r6, [pc, #60]	@ (8009d0c <sbrk_aligned+0x40>)
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	6831      	ldr	r1, [r6, #0]
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	b911      	cbnz	r1, 8009cde <sbrk_aligned+0x12>
 8009cd8:	f000 fba8 	bl	800a42c <_sbrk_r>
 8009cdc:	6030      	str	r0, [r6, #0]
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f000 fba3 	bl	800a42c <_sbrk_r>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d103      	bne.n	8009cf2 <sbrk_aligned+0x26>
 8009cea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009cee:	4620      	mov	r0, r4
 8009cf0:	bd70      	pop	{r4, r5, r6, pc}
 8009cf2:	1cc4      	adds	r4, r0, #3
 8009cf4:	f024 0403 	bic.w	r4, r4, #3
 8009cf8:	42a0      	cmp	r0, r4
 8009cfa:	d0f8      	beq.n	8009cee <sbrk_aligned+0x22>
 8009cfc:	1a21      	subs	r1, r4, r0
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 fb94 	bl	800a42c <_sbrk_r>
 8009d04:	3001      	adds	r0, #1
 8009d06:	d1f2      	bne.n	8009cee <sbrk_aligned+0x22>
 8009d08:	e7ef      	b.n	8009cea <sbrk_aligned+0x1e>
 8009d0a:	bf00      	nop
 8009d0c:	2000258c 	.word	0x2000258c

08009d10 <_malloc_r>:
 8009d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	1ccd      	adds	r5, r1, #3
 8009d16:	f025 0503 	bic.w	r5, r5, #3
 8009d1a:	3508      	adds	r5, #8
 8009d1c:	2d0c      	cmp	r5, #12
 8009d1e:	bf38      	it	cc
 8009d20:	250c      	movcc	r5, #12
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	4606      	mov	r6, r0
 8009d26:	db01      	blt.n	8009d2c <_malloc_r+0x1c>
 8009d28:	42a9      	cmp	r1, r5
 8009d2a:	d904      	bls.n	8009d36 <_malloc_r+0x26>
 8009d2c:	230c      	movs	r3, #12
 8009d2e:	6033      	str	r3, [r6, #0]
 8009d30:	2000      	movs	r0, #0
 8009d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e0c <_malloc_r+0xfc>
 8009d3a:	f000 f869 	bl	8009e10 <__malloc_lock>
 8009d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d42:	461c      	mov	r4, r3
 8009d44:	bb44      	cbnz	r4, 8009d98 <_malloc_r+0x88>
 8009d46:	4629      	mov	r1, r5
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7ff ffbf 	bl	8009ccc <sbrk_aligned>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	4604      	mov	r4, r0
 8009d52:	d158      	bne.n	8009e06 <_malloc_r+0xf6>
 8009d54:	f8d8 4000 	ldr.w	r4, [r8]
 8009d58:	4627      	mov	r7, r4
 8009d5a:	2f00      	cmp	r7, #0
 8009d5c:	d143      	bne.n	8009de6 <_malloc_r+0xd6>
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	d04b      	beq.n	8009dfa <_malloc_r+0xea>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	4639      	mov	r1, r7
 8009d66:	4630      	mov	r0, r6
 8009d68:	eb04 0903 	add.w	r9, r4, r3
 8009d6c:	f000 fb5e 	bl	800a42c <_sbrk_r>
 8009d70:	4581      	cmp	r9, r0
 8009d72:	d142      	bne.n	8009dfa <_malloc_r+0xea>
 8009d74:	6821      	ldr	r1, [r4, #0]
 8009d76:	4630      	mov	r0, r6
 8009d78:	1a6d      	subs	r5, r5, r1
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	f7ff ffa6 	bl	8009ccc <sbrk_aligned>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d03a      	beq.n	8009dfa <_malloc_r+0xea>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	442b      	add	r3, r5
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	bb62      	cbnz	r2, 8009dec <_malloc_r+0xdc>
 8009d92:	f8c8 7000 	str.w	r7, [r8]
 8009d96:	e00f      	b.n	8009db8 <_malloc_r+0xa8>
 8009d98:	6822      	ldr	r2, [r4, #0]
 8009d9a:	1b52      	subs	r2, r2, r5
 8009d9c:	d420      	bmi.n	8009de0 <_malloc_r+0xd0>
 8009d9e:	2a0b      	cmp	r2, #11
 8009da0:	d917      	bls.n	8009dd2 <_malloc_r+0xc2>
 8009da2:	1961      	adds	r1, r4, r5
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	6025      	str	r5, [r4, #0]
 8009da8:	bf18      	it	ne
 8009daa:	6059      	strne	r1, [r3, #4]
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	bf08      	it	eq
 8009db0:	f8c8 1000 	streq.w	r1, [r8]
 8009db4:	5162      	str	r2, [r4, r5]
 8009db6:	604b      	str	r3, [r1, #4]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 f82f 	bl	8009e1c <__malloc_unlock>
 8009dbe:	f104 000b 	add.w	r0, r4, #11
 8009dc2:	1d23      	adds	r3, r4, #4
 8009dc4:	f020 0007 	bic.w	r0, r0, #7
 8009dc8:	1ac2      	subs	r2, r0, r3
 8009dca:	bf1c      	itt	ne
 8009dcc:	1a1b      	subne	r3, r3, r0
 8009dce:	50a3      	strne	r3, [r4, r2]
 8009dd0:	e7af      	b.n	8009d32 <_malloc_r+0x22>
 8009dd2:	6862      	ldr	r2, [r4, #4]
 8009dd4:	42a3      	cmp	r3, r4
 8009dd6:	bf0c      	ite	eq
 8009dd8:	f8c8 2000 	streq.w	r2, [r8]
 8009ddc:	605a      	strne	r2, [r3, #4]
 8009dde:	e7eb      	b.n	8009db8 <_malloc_r+0xa8>
 8009de0:	4623      	mov	r3, r4
 8009de2:	6864      	ldr	r4, [r4, #4]
 8009de4:	e7ae      	b.n	8009d44 <_malloc_r+0x34>
 8009de6:	463c      	mov	r4, r7
 8009de8:	687f      	ldr	r7, [r7, #4]
 8009dea:	e7b6      	b.n	8009d5a <_malloc_r+0x4a>
 8009dec:	461a      	mov	r2, r3
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	42a3      	cmp	r3, r4
 8009df2:	d1fb      	bne.n	8009dec <_malloc_r+0xdc>
 8009df4:	2300      	movs	r3, #0
 8009df6:	6053      	str	r3, [r2, #4]
 8009df8:	e7de      	b.n	8009db8 <_malloc_r+0xa8>
 8009dfa:	230c      	movs	r3, #12
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	6033      	str	r3, [r6, #0]
 8009e00:	f000 f80c 	bl	8009e1c <__malloc_unlock>
 8009e04:	e794      	b.n	8009d30 <_malloc_r+0x20>
 8009e06:	6005      	str	r5, [r0, #0]
 8009e08:	e7d6      	b.n	8009db8 <_malloc_r+0xa8>
 8009e0a:	bf00      	nop
 8009e0c:	20002590 	.word	0x20002590

08009e10 <__malloc_lock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	@ (8009e18 <__malloc_lock+0x8>)
 8009e12:	f7ff bf11 	b.w	8009c38 <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	20002588 	.word	0x20002588

08009e1c <__malloc_unlock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	@ (8009e24 <__malloc_unlock+0x8>)
 8009e1e:	f7ff bf0c 	b.w	8009c3a <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	20002588 	.word	0x20002588

08009e28 <__ssputs_r>:
 8009e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	461f      	mov	r7, r3
 8009e2e:	688e      	ldr	r6, [r1, #8]
 8009e30:	4682      	mov	sl, r0
 8009e32:	42be      	cmp	r6, r7
 8009e34:	460c      	mov	r4, r1
 8009e36:	4690      	mov	r8, r2
 8009e38:	680b      	ldr	r3, [r1, #0]
 8009e3a:	d82d      	bhi.n	8009e98 <__ssputs_r+0x70>
 8009e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e44:	d026      	beq.n	8009e94 <__ssputs_r+0x6c>
 8009e46:	6965      	ldr	r5, [r4, #20]
 8009e48:	6909      	ldr	r1, [r1, #16]
 8009e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e4e:	eba3 0901 	sub.w	r9, r3, r1
 8009e52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e56:	1c7b      	adds	r3, r7, #1
 8009e58:	444b      	add	r3, r9
 8009e5a:	106d      	asrs	r5, r5, #1
 8009e5c:	429d      	cmp	r5, r3
 8009e5e:	bf38      	it	cc
 8009e60:	461d      	movcc	r5, r3
 8009e62:	0553      	lsls	r3, r2, #21
 8009e64:	d527      	bpl.n	8009eb6 <__ssputs_r+0x8e>
 8009e66:	4629      	mov	r1, r5
 8009e68:	f7ff ff52 	bl	8009d10 <_malloc_r>
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	b360      	cbz	r0, 8009eca <__ssputs_r+0xa2>
 8009e70:	464a      	mov	r2, r9
 8009e72:	6921      	ldr	r1, [r4, #16]
 8009e74:	f000 faf8 	bl	800a468 <memcpy>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	6126      	str	r6, [r4, #16]
 8009e86:	444e      	add	r6, r9
 8009e88:	6026      	str	r6, [r4, #0]
 8009e8a:	463e      	mov	r6, r7
 8009e8c:	6165      	str	r5, [r4, #20]
 8009e8e:	eba5 0509 	sub.w	r5, r5, r9
 8009e92:	60a5      	str	r5, [r4, #8]
 8009e94:	42be      	cmp	r6, r7
 8009e96:	d900      	bls.n	8009e9a <__ssputs_r+0x72>
 8009e98:	463e      	mov	r6, r7
 8009e9a:	4632      	mov	r2, r6
 8009e9c:	4641      	mov	r1, r8
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	f000 faaa 	bl	800a3f8 <memmove>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	1b9b      	subs	r3, r3, r6
 8009eaa:	60a3      	str	r3, [r4, #8]
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	4433      	add	r3, r6
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	f000 fae4 	bl	800a484 <_realloc_r>
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d1e0      	bne.n	8009e84 <__ssputs_r+0x5c>
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	6921      	ldr	r1, [r4, #16]
 8009ec6:	f7ff feb9 	bl	8009c3c <_free_r>
 8009eca:	230c      	movs	r3, #12
 8009ecc:	f8ca 3000 	str.w	r3, [sl]
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	e7e9      	b.n	8009eb2 <__ssputs_r+0x8a>
	...

08009ee0 <_svfiprintf_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	4698      	mov	r8, r3
 8009ee6:	898b      	ldrh	r3, [r1, #12]
 8009ee8:	4607      	mov	r7, r0
 8009eea:	061b      	lsls	r3, r3, #24
 8009eec:	460d      	mov	r5, r1
 8009eee:	4614      	mov	r4, r2
 8009ef0:	b09d      	sub	sp, #116	@ 0x74
 8009ef2:	d510      	bpl.n	8009f16 <_svfiprintf_r+0x36>
 8009ef4:	690b      	ldr	r3, [r1, #16]
 8009ef6:	b973      	cbnz	r3, 8009f16 <_svfiprintf_r+0x36>
 8009ef8:	2140      	movs	r1, #64	@ 0x40
 8009efa:	f7ff ff09 	bl	8009d10 <_malloc_r>
 8009efe:	6028      	str	r0, [r5, #0]
 8009f00:	6128      	str	r0, [r5, #16]
 8009f02:	b930      	cbnz	r0, 8009f12 <_svfiprintf_r+0x32>
 8009f04:	230c      	movs	r3, #12
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f0c:	b01d      	add	sp, #116	@ 0x74
 8009f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f12:	2340      	movs	r3, #64	@ 0x40
 8009f14:	616b      	str	r3, [r5, #20]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1a:	2320      	movs	r3, #32
 8009f1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f20:	2330      	movs	r3, #48	@ 0x30
 8009f22:	f04f 0901 	mov.w	r9, #1
 8009f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a0c4 <_svfiprintf_r+0x1e4>
 8009f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f32:	4623      	mov	r3, r4
 8009f34:	469a      	mov	sl, r3
 8009f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3a:	b10a      	cbz	r2, 8009f40 <_svfiprintf_r+0x60>
 8009f3c:	2a25      	cmp	r2, #37	@ 0x25
 8009f3e:	d1f9      	bne.n	8009f34 <_svfiprintf_r+0x54>
 8009f40:	ebba 0b04 	subs.w	fp, sl, r4
 8009f44:	d00b      	beq.n	8009f5e <_svfiprintf_r+0x7e>
 8009f46:	465b      	mov	r3, fp
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ff6b 	bl	8009e28 <__ssputs_r>
 8009f52:	3001      	adds	r0, #1
 8009f54:	f000 80a7 	beq.w	800a0a6 <_svfiprintf_r+0x1c6>
 8009f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f5a:	445a      	add	r2, fp
 8009f5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 809f 	beq.w	800a0a6 <_svfiprintf_r+0x1c6>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f72:	f10a 0a01 	add.w	sl, sl, #1
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f80:	4654      	mov	r4, sl
 8009f82:	2205      	movs	r2, #5
 8009f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f88:	484e      	ldr	r0, [pc, #312]	@ (800a0c4 <_svfiprintf_r+0x1e4>)
 8009f8a:	f000 fa5f 	bl	800a44c <memchr>
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	b9d8      	cbnz	r0, 8009fca <_svfiprintf_r+0xea>
 8009f92:	06d0      	lsls	r0, r2, #27
 8009f94:	bf44      	itt	mi
 8009f96:	2320      	movmi	r3, #32
 8009f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f9c:	0711      	lsls	r1, r2, #28
 8009f9e:	bf44      	itt	mi
 8009fa0:	232b      	movmi	r3, #43	@ 0x2b
 8009fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009faa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fac:	d015      	beq.n	8009fda <_svfiprintf_r+0xfa>
 8009fae:	4654      	mov	r4, sl
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	f04f 0c0a 	mov.w	ip, #10
 8009fb6:	9a07      	ldr	r2, [sp, #28]
 8009fb8:	4621      	mov	r1, r4
 8009fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fbe:	3b30      	subs	r3, #48	@ 0x30
 8009fc0:	2b09      	cmp	r3, #9
 8009fc2:	d94b      	bls.n	800a05c <_svfiprintf_r+0x17c>
 8009fc4:	b1b0      	cbz	r0, 8009ff4 <_svfiprintf_r+0x114>
 8009fc6:	9207      	str	r2, [sp, #28]
 8009fc8:	e014      	b.n	8009ff4 <_svfiprintf_r+0x114>
 8009fca:	eba0 0308 	sub.w	r3, r0, r8
 8009fce:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	46a2      	mov	sl, r4
 8009fd6:	9304      	str	r3, [sp, #16]
 8009fd8:	e7d2      	b.n	8009f80 <_svfiprintf_r+0xa0>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	1d19      	adds	r1, r3, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	9103      	str	r1, [sp, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bfbb      	ittet	lt
 8009fe6:	425b      	neglt	r3, r3
 8009fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8009fec:	9307      	strge	r3, [sp, #28]
 8009fee:	9307      	strlt	r3, [sp, #28]
 8009ff0:	bfb8      	it	lt
 8009ff2:	9204      	strlt	r2, [sp, #16]
 8009ff4:	7823      	ldrb	r3, [r4, #0]
 8009ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ff8:	d10a      	bne.n	800a010 <_svfiprintf_r+0x130>
 8009ffa:	7863      	ldrb	r3, [r4, #1]
 8009ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ffe:	d132      	bne.n	800a066 <_svfiprintf_r+0x186>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	3402      	adds	r4, #2
 800a004:	1d1a      	adds	r2, r3, #4
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	9203      	str	r2, [sp, #12]
 800a00a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a00e:	9305      	str	r3, [sp, #20]
 800a010:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a0c8 <_svfiprintf_r+0x1e8>
 800a014:	2203      	movs	r2, #3
 800a016:	4650      	mov	r0, sl
 800a018:	7821      	ldrb	r1, [r4, #0]
 800a01a:	f000 fa17 	bl	800a44c <memchr>
 800a01e:	b138      	cbz	r0, 800a030 <_svfiprintf_r+0x150>
 800a020:	2240      	movs	r2, #64	@ 0x40
 800a022:	9b04      	ldr	r3, [sp, #16]
 800a024:	eba0 000a 	sub.w	r0, r0, sl
 800a028:	4082      	lsls	r2, r0
 800a02a:	4313      	orrs	r3, r2
 800a02c:	3401      	adds	r4, #1
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a034:	2206      	movs	r2, #6
 800a036:	4825      	ldr	r0, [pc, #148]	@ (800a0cc <_svfiprintf_r+0x1ec>)
 800a038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a03c:	f000 fa06 	bl	800a44c <memchr>
 800a040:	2800      	cmp	r0, #0
 800a042:	d036      	beq.n	800a0b2 <_svfiprintf_r+0x1d2>
 800a044:	4b22      	ldr	r3, [pc, #136]	@ (800a0d0 <_svfiprintf_r+0x1f0>)
 800a046:	bb1b      	cbnz	r3, 800a090 <_svfiprintf_r+0x1b0>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	3307      	adds	r3, #7
 800a04c:	f023 0307 	bic.w	r3, r3, #7
 800a050:	3308      	adds	r3, #8
 800a052:	9303      	str	r3, [sp, #12]
 800a054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a056:	4433      	add	r3, r6
 800a058:	9309      	str	r3, [sp, #36]	@ 0x24
 800a05a:	e76a      	b.n	8009f32 <_svfiprintf_r+0x52>
 800a05c:	460c      	mov	r4, r1
 800a05e:	2001      	movs	r0, #1
 800a060:	fb0c 3202 	mla	r2, ip, r2, r3
 800a064:	e7a8      	b.n	8009fb8 <_svfiprintf_r+0xd8>
 800a066:	2300      	movs	r3, #0
 800a068:	f04f 0c0a 	mov.w	ip, #10
 800a06c:	4619      	mov	r1, r3
 800a06e:	3401      	adds	r4, #1
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	4620      	mov	r0, r4
 800a074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a078:	3a30      	subs	r2, #48	@ 0x30
 800a07a:	2a09      	cmp	r2, #9
 800a07c:	d903      	bls.n	800a086 <_svfiprintf_r+0x1a6>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0c6      	beq.n	800a010 <_svfiprintf_r+0x130>
 800a082:	9105      	str	r1, [sp, #20]
 800a084:	e7c4      	b.n	800a010 <_svfiprintf_r+0x130>
 800a086:	4604      	mov	r4, r0
 800a088:	2301      	movs	r3, #1
 800a08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a08e:	e7f0      	b.n	800a072 <_svfiprintf_r+0x192>
 800a090:	ab03      	add	r3, sp, #12
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	462a      	mov	r2, r5
 800a096:	4638      	mov	r0, r7
 800a098:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d4 <_svfiprintf_r+0x1f4>)
 800a09a:	a904      	add	r1, sp, #16
 800a09c:	f3af 8000 	nop.w
 800a0a0:	1c42      	adds	r2, r0, #1
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	d1d6      	bne.n	800a054 <_svfiprintf_r+0x174>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	065b      	lsls	r3, r3, #25
 800a0aa:	f53f af2d 	bmi.w	8009f08 <_svfiprintf_r+0x28>
 800a0ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0b0:	e72c      	b.n	8009f0c <_svfiprintf_r+0x2c>
 800a0b2:	ab03      	add	r3, sp, #12
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	4b06      	ldr	r3, [pc, #24]	@ (800a0d4 <_svfiprintf_r+0x1f4>)
 800a0bc:	a904      	add	r1, sp, #16
 800a0be:	f000 f87d 	bl	800a1bc <_printf_i>
 800a0c2:	e7ed      	b.n	800a0a0 <_svfiprintf_r+0x1c0>
 800a0c4:	0800a576 	.word	0x0800a576
 800a0c8:	0800a57c 	.word	0x0800a57c
 800a0cc:	0800a580 	.word	0x0800a580
 800a0d0:	00000000 	.word	0x00000000
 800a0d4:	08009e29 	.word	0x08009e29

0800a0d8 <_printf_common>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	4616      	mov	r6, r2
 800a0de:	4698      	mov	r8, r3
 800a0e0:	688a      	ldr	r2, [r1, #8]
 800a0e2:	690b      	ldr	r3, [r1, #16]
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	bfb8      	it	lt
 800a0ea:	4613      	movlt	r3, r2
 800a0ec:	6033      	str	r3, [r6, #0]
 800a0ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0f8:	b10a      	cbz	r2, 800a0fe <_printf_common+0x26>
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	6033      	str	r3, [r6, #0]
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	0699      	lsls	r1, r3, #26
 800a102:	bf42      	ittt	mi
 800a104:	6833      	ldrmi	r3, [r6, #0]
 800a106:	3302      	addmi	r3, #2
 800a108:	6033      	strmi	r3, [r6, #0]
 800a10a:	6825      	ldr	r5, [r4, #0]
 800a10c:	f015 0506 	ands.w	r5, r5, #6
 800a110:	d106      	bne.n	800a120 <_printf_common+0x48>
 800a112:	f104 0a19 	add.w	sl, r4, #25
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	6832      	ldr	r2, [r6, #0]
 800a11a:	1a9b      	subs	r3, r3, r2
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dc2b      	bgt.n	800a178 <_printf_common+0xa0>
 800a120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a124:	6822      	ldr	r2, [r4, #0]
 800a126:	3b00      	subs	r3, #0
 800a128:	bf18      	it	ne
 800a12a:	2301      	movne	r3, #1
 800a12c:	0692      	lsls	r2, r2, #26
 800a12e:	d430      	bmi.n	800a192 <_printf_common+0xba>
 800a130:	4641      	mov	r1, r8
 800a132:	4638      	mov	r0, r7
 800a134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a138:	47c8      	blx	r9
 800a13a:	3001      	adds	r0, #1
 800a13c:	d023      	beq.n	800a186 <_printf_common+0xae>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	6922      	ldr	r2, [r4, #16]
 800a142:	f003 0306 	and.w	r3, r3, #6
 800a146:	2b04      	cmp	r3, #4
 800a148:	bf14      	ite	ne
 800a14a:	2500      	movne	r5, #0
 800a14c:	6833      	ldreq	r3, [r6, #0]
 800a14e:	f04f 0600 	mov.w	r6, #0
 800a152:	bf08      	it	eq
 800a154:	68e5      	ldreq	r5, [r4, #12]
 800a156:	f104 041a 	add.w	r4, r4, #26
 800a15a:	bf08      	it	eq
 800a15c:	1aed      	subeq	r5, r5, r3
 800a15e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a162:	bf08      	it	eq
 800a164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a168:	4293      	cmp	r3, r2
 800a16a:	bfc4      	itt	gt
 800a16c:	1a9b      	subgt	r3, r3, r2
 800a16e:	18ed      	addgt	r5, r5, r3
 800a170:	42b5      	cmp	r5, r6
 800a172:	d11a      	bne.n	800a1aa <_printf_common+0xd2>
 800a174:	2000      	movs	r0, #0
 800a176:	e008      	b.n	800a18a <_printf_common+0xb2>
 800a178:	2301      	movs	r3, #1
 800a17a:	4652      	mov	r2, sl
 800a17c:	4641      	mov	r1, r8
 800a17e:	4638      	mov	r0, r7
 800a180:	47c8      	blx	r9
 800a182:	3001      	adds	r0, #1
 800a184:	d103      	bne.n	800a18e <_printf_common+0xb6>
 800a186:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18e:	3501      	adds	r5, #1
 800a190:	e7c1      	b.n	800a116 <_printf_common+0x3e>
 800a192:	2030      	movs	r0, #48	@ 0x30
 800a194:	18e1      	adds	r1, r4, r3
 800a196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1a0:	4422      	add	r2, r4
 800a1a2:	3302      	adds	r3, #2
 800a1a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1a8:	e7c2      	b.n	800a130 <_printf_common+0x58>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4622      	mov	r2, r4
 800a1ae:	4641      	mov	r1, r8
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	47c8      	blx	r9
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d0e6      	beq.n	800a186 <_printf_common+0xae>
 800a1b8:	3601      	adds	r6, #1
 800a1ba:	e7d9      	b.n	800a170 <_printf_common+0x98>

0800a1bc <_printf_i>:
 800a1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	7e0f      	ldrb	r7, [r1, #24]
 800a1c2:	4691      	mov	r9, r2
 800a1c4:	2f78      	cmp	r7, #120	@ 0x78
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	469a      	mov	sl, r3
 800a1cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1d2:	d807      	bhi.n	800a1e4 <_printf_i+0x28>
 800a1d4:	2f62      	cmp	r7, #98	@ 0x62
 800a1d6:	d80a      	bhi.n	800a1ee <_printf_i+0x32>
 800a1d8:	2f00      	cmp	r7, #0
 800a1da:	f000 80d1 	beq.w	800a380 <_printf_i+0x1c4>
 800a1de:	2f58      	cmp	r7, #88	@ 0x58
 800a1e0:	f000 80b8 	beq.w	800a354 <_printf_i+0x198>
 800a1e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1ec:	e03a      	b.n	800a264 <_printf_i+0xa8>
 800a1ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1f2:	2b15      	cmp	r3, #21
 800a1f4:	d8f6      	bhi.n	800a1e4 <_printf_i+0x28>
 800a1f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a1fc <_printf_i+0x40>)
 800a1f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1fc:	0800a255 	.word	0x0800a255
 800a200:	0800a269 	.word	0x0800a269
 800a204:	0800a1e5 	.word	0x0800a1e5
 800a208:	0800a1e5 	.word	0x0800a1e5
 800a20c:	0800a1e5 	.word	0x0800a1e5
 800a210:	0800a1e5 	.word	0x0800a1e5
 800a214:	0800a269 	.word	0x0800a269
 800a218:	0800a1e5 	.word	0x0800a1e5
 800a21c:	0800a1e5 	.word	0x0800a1e5
 800a220:	0800a1e5 	.word	0x0800a1e5
 800a224:	0800a1e5 	.word	0x0800a1e5
 800a228:	0800a367 	.word	0x0800a367
 800a22c:	0800a293 	.word	0x0800a293
 800a230:	0800a321 	.word	0x0800a321
 800a234:	0800a1e5 	.word	0x0800a1e5
 800a238:	0800a1e5 	.word	0x0800a1e5
 800a23c:	0800a389 	.word	0x0800a389
 800a240:	0800a1e5 	.word	0x0800a1e5
 800a244:	0800a293 	.word	0x0800a293
 800a248:	0800a1e5 	.word	0x0800a1e5
 800a24c:	0800a1e5 	.word	0x0800a1e5
 800a250:	0800a329 	.word	0x0800a329
 800a254:	6833      	ldr	r3, [r6, #0]
 800a256:	1d1a      	adds	r2, r3, #4
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6032      	str	r2, [r6, #0]
 800a25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a264:	2301      	movs	r3, #1
 800a266:	e09c      	b.n	800a3a2 <_printf_i+0x1e6>
 800a268:	6833      	ldr	r3, [r6, #0]
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	1d19      	adds	r1, r3, #4
 800a26e:	6031      	str	r1, [r6, #0]
 800a270:	0606      	lsls	r6, r0, #24
 800a272:	d501      	bpl.n	800a278 <_printf_i+0xbc>
 800a274:	681d      	ldr	r5, [r3, #0]
 800a276:	e003      	b.n	800a280 <_printf_i+0xc4>
 800a278:	0645      	lsls	r5, r0, #25
 800a27a:	d5fb      	bpl.n	800a274 <_printf_i+0xb8>
 800a27c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a280:	2d00      	cmp	r5, #0
 800a282:	da03      	bge.n	800a28c <_printf_i+0xd0>
 800a284:	232d      	movs	r3, #45	@ 0x2d
 800a286:	426d      	negs	r5, r5
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a28c:	230a      	movs	r3, #10
 800a28e:	4858      	ldr	r0, [pc, #352]	@ (800a3f0 <_printf_i+0x234>)
 800a290:	e011      	b.n	800a2b6 <_printf_i+0xfa>
 800a292:	6821      	ldr	r1, [r4, #0]
 800a294:	6833      	ldr	r3, [r6, #0]
 800a296:	0608      	lsls	r0, r1, #24
 800a298:	f853 5b04 	ldr.w	r5, [r3], #4
 800a29c:	d402      	bmi.n	800a2a4 <_printf_i+0xe8>
 800a29e:	0649      	lsls	r1, r1, #25
 800a2a0:	bf48      	it	mi
 800a2a2:	b2ad      	uxthmi	r5, r5
 800a2a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2a6:	6033      	str	r3, [r6, #0]
 800a2a8:	bf14      	ite	ne
 800a2aa:	230a      	movne	r3, #10
 800a2ac:	2308      	moveq	r3, #8
 800a2ae:	4850      	ldr	r0, [pc, #320]	@ (800a3f0 <_printf_i+0x234>)
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2b6:	6866      	ldr	r6, [r4, #4]
 800a2b8:	2e00      	cmp	r6, #0
 800a2ba:	60a6      	str	r6, [r4, #8]
 800a2bc:	db05      	blt.n	800a2ca <_printf_i+0x10e>
 800a2be:	6821      	ldr	r1, [r4, #0]
 800a2c0:	432e      	orrs	r6, r5
 800a2c2:	f021 0104 	bic.w	r1, r1, #4
 800a2c6:	6021      	str	r1, [r4, #0]
 800a2c8:	d04b      	beq.n	800a362 <_printf_i+0x1a6>
 800a2ca:	4616      	mov	r6, r2
 800a2cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2d0:	fb03 5711 	mls	r7, r3, r1, r5
 800a2d4:	5dc7      	ldrb	r7, [r0, r7]
 800a2d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2da:	462f      	mov	r7, r5
 800a2dc:	42bb      	cmp	r3, r7
 800a2de:	460d      	mov	r5, r1
 800a2e0:	d9f4      	bls.n	800a2cc <_printf_i+0x110>
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d10b      	bne.n	800a2fe <_printf_i+0x142>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	07df      	lsls	r7, r3, #31
 800a2ea:	d508      	bpl.n	800a2fe <_printf_i+0x142>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	6861      	ldr	r1, [r4, #4]
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	bfde      	ittt	le
 800a2f4:	2330      	movle	r3, #48	@ 0x30
 800a2f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a2fe:	1b92      	subs	r2, r2, r6
 800a300:	6122      	str	r2, [r4, #16]
 800a302:	464b      	mov	r3, r9
 800a304:	4621      	mov	r1, r4
 800a306:	4640      	mov	r0, r8
 800a308:	f8cd a000 	str.w	sl, [sp]
 800a30c:	aa03      	add	r2, sp, #12
 800a30e:	f7ff fee3 	bl	800a0d8 <_printf_common>
 800a312:	3001      	adds	r0, #1
 800a314:	d14a      	bne.n	800a3ac <_printf_i+0x1f0>
 800a316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a31a:	b004      	add	sp, #16
 800a31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	f043 0320 	orr.w	r3, r3, #32
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	2778      	movs	r7, #120	@ 0x78
 800a32a:	4832      	ldr	r0, [pc, #200]	@ (800a3f4 <_printf_i+0x238>)
 800a32c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	6831      	ldr	r1, [r6, #0]
 800a334:	061f      	lsls	r7, r3, #24
 800a336:	f851 5b04 	ldr.w	r5, [r1], #4
 800a33a:	d402      	bmi.n	800a342 <_printf_i+0x186>
 800a33c:	065f      	lsls	r7, r3, #25
 800a33e:	bf48      	it	mi
 800a340:	b2ad      	uxthmi	r5, r5
 800a342:	6031      	str	r1, [r6, #0]
 800a344:	07d9      	lsls	r1, r3, #31
 800a346:	bf44      	itt	mi
 800a348:	f043 0320 	orrmi.w	r3, r3, #32
 800a34c:	6023      	strmi	r3, [r4, #0]
 800a34e:	b11d      	cbz	r5, 800a358 <_printf_i+0x19c>
 800a350:	2310      	movs	r3, #16
 800a352:	e7ad      	b.n	800a2b0 <_printf_i+0xf4>
 800a354:	4826      	ldr	r0, [pc, #152]	@ (800a3f0 <_printf_i+0x234>)
 800a356:	e7e9      	b.n	800a32c <_printf_i+0x170>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	f023 0320 	bic.w	r3, r3, #32
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	e7f6      	b.n	800a350 <_printf_i+0x194>
 800a362:	4616      	mov	r6, r2
 800a364:	e7bd      	b.n	800a2e2 <_printf_i+0x126>
 800a366:	6833      	ldr	r3, [r6, #0]
 800a368:	6825      	ldr	r5, [r4, #0]
 800a36a:	1d18      	adds	r0, r3, #4
 800a36c:	6961      	ldr	r1, [r4, #20]
 800a36e:	6030      	str	r0, [r6, #0]
 800a370:	062e      	lsls	r6, r5, #24
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	d501      	bpl.n	800a37a <_printf_i+0x1be>
 800a376:	6019      	str	r1, [r3, #0]
 800a378:	e002      	b.n	800a380 <_printf_i+0x1c4>
 800a37a:	0668      	lsls	r0, r5, #25
 800a37c:	d5fb      	bpl.n	800a376 <_printf_i+0x1ba>
 800a37e:	8019      	strh	r1, [r3, #0]
 800a380:	2300      	movs	r3, #0
 800a382:	4616      	mov	r6, r2
 800a384:	6123      	str	r3, [r4, #16]
 800a386:	e7bc      	b.n	800a302 <_printf_i+0x146>
 800a388:	6833      	ldr	r3, [r6, #0]
 800a38a:	2100      	movs	r1, #0
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	6032      	str	r2, [r6, #0]
 800a390:	681e      	ldr	r6, [r3, #0]
 800a392:	6862      	ldr	r2, [r4, #4]
 800a394:	4630      	mov	r0, r6
 800a396:	f000 f859 	bl	800a44c <memchr>
 800a39a:	b108      	cbz	r0, 800a3a0 <_printf_i+0x1e4>
 800a39c:	1b80      	subs	r0, r0, r6
 800a39e:	6060      	str	r0, [r4, #4]
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	6123      	str	r3, [r4, #16]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3aa:	e7aa      	b.n	800a302 <_printf_i+0x146>
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	47d0      	blx	sl
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d0ad      	beq.n	800a316 <_printf_i+0x15a>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	079b      	lsls	r3, r3, #30
 800a3be:	d413      	bmi.n	800a3e8 <_printf_i+0x22c>
 800a3c0:	68e0      	ldr	r0, [r4, #12]
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	bfb8      	it	lt
 800a3c8:	4618      	movlt	r0, r3
 800a3ca:	e7a6      	b.n	800a31a <_printf_i+0x15e>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	47d0      	blx	sl
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d09d      	beq.n	800a316 <_printf_i+0x15a>
 800a3da:	3501      	adds	r5, #1
 800a3dc:	68e3      	ldr	r3, [r4, #12]
 800a3de:	9903      	ldr	r1, [sp, #12]
 800a3e0:	1a5b      	subs	r3, r3, r1
 800a3e2:	42ab      	cmp	r3, r5
 800a3e4:	dcf2      	bgt.n	800a3cc <_printf_i+0x210>
 800a3e6:	e7eb      	b.n	800a3c0 <_printf_i+0x204>
 800a3e8:	2500      	movs	r5, #0
 800a3ea:	f104 0619 	add.w	r6, r4, #25
 800a3ee:	e7f5      	b.n	800a3dc <_printf_i+0x220>
 800a3f0:	0800a587 	.word	0x0800a587
 800a3f4:	0800a598 	.word	0x0800a598

0800a3f8 <memmove>:
 800a3f8:	4288      	cmp	r0, r1
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	eb01 0402 	add.w	r4, r1, r2
 800a400:	d902      	bls.n	800a408 <memmove+0x10>
 800a402:	4284      	cmp	r4, r0
 800a404:	4623      	mov	r3, r4
 800a406:	d807      	bhi.n	800a418 <memmove+0x20>
 800a408:	1e43      	subs	r3, r0, #1
 800a40a:	42a1      	cmp	r1, r4
 800a40c:	d008      	beq.n	800a420 <memmove+0x28>
 800a40e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a412:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a416:	e7f8      	b.n	800a40a <memmove+0x12>
 800a418:	4601      	mov	r1, r0
 800a41a:	4402      	add	r2, r0
 800a41c:	428a      	cmp	r2, r1
 800a41e:	d100      	bne.n	800a422 <memmove+0x2a>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a42a:	e7f7      	b.n	800a41c <memmove+0x24>

0800a42c <_sbrk_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	2300      	movs	r3, #0
 800a430:	4d05      	ldr	r5, [pc, #20]	@ (800a448 <_sbrk_r+0x1c>)
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f7f6 fd6e 	bl	8000f18 <_sbrk>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_sbrk_r+0x1a>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_sbrk_r+0x1a>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20002584 	.word	0x20002584

0800a44c <memchr>:
 800a44c:	4603      	mov	r3, r0
 800a44e:	b510      	push	{r4, lr}
 800a450:	b2c9      	uxtb	r1, r1
 800a452:	4402      	add	r2, r0
 800a454:	4293      	cmp	r3, r2
 800a456:	4618      	mov	r0, r3
 800a458:	d101      	bne.n	800a45e <memchr+0x12>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e003      	b.n	800a466 <memchr+0x1a>
 800a45e:	7804      	ldrb	r4, [r0, #0]
 800a460:	3301      	adds	r3, #1
 800a462:	428c      	cmp	r4, r1
 800a464:	d1f6      	bne.n	800a454 <memchr+0x8>
 800a466:	bd10      	pop	{r4, pc}

0800a468 <memcpy>:
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a470:	d100      	bne.n	800a474 <memcpy+0xc>
 800a472:	4770      	bx	lr
 800a474:	b510      	push	{r4, lr}
 800a476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47a:	4291      	cmp	r1, r2
 800a47c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a480:	d1f9      	bne.n	800a476 <memcpy+0xe>
 800a482:	bd10      	pop	{r4, pc}

0800a484 <_realloc_r>:
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	4607      	mov	r7, r0
 800a48a:	4614      	mov	r4, r2
 800a48c:	460d      	mov	r5, r1
 800a48e:	b921      	cbnz	r1, 800a49a <_realloc_r+0x16>
 800a490:	4611      	mov	r1, r2
 800a492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	f7ff bc3b 	b.w	8009d10 <_malloc_r>
 800a49a:	b92a      	cbnz	r2, 800a4a8 <_realloc_r+0x24>
 800a49c:	f7ff fbce 	bl	8009c3c <_free_r>
 800a4a0:	4625      	mov	r5, r4
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a8:	f000 f81a 	bl	800a4e0 <_malloc_usable_size_r>
 800a4ac:	4284      	cmp	r4, r0
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	d802      	bhi.n	800a4b8 <_realloc_r+0x34>
 800a4b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4b6:	d8f4      	bhi.n	800a4a2 <_realloc_r+0x1e>
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f7ff fc28 	bl	8009d10 <_malloc_r>
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	b908      	cbnz	r0, 800a4c8 <_realloc_r+0x44>
 800a4c4:	4645      	mov	r5, r8
 800a4c6:	e7ec      	b.n	800a4a2 <_realloc_r+0x1e>
 800a4c8:	42b4      	cmp	r4, r6
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	bf28      	it	cs
 800a4d0:	4632      	movcs	r2, r6
 800a4d2:	f7ff ffc9 	bl	800a468 <memcpy>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f7ff fbaf 	bl	8009c3c <_free_r>
 800a4de:	e7f1      	b.n	800a4c4 <_realloc_r+0x40>

0800a4e0 <_malloc_usable_size_r>:
 800a4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e4:	1f18      	subs	r0, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfbc      	itt	lt
 800a4ea:	580b      	ldrlt	r3, [r1, r0]
 800a4ec:	18c0      	addlt	r0, r0, r3
 800a4ee:	4770      	bx	lr

0800a4f0 <_init>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr

0800a4fc <_fini>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr
