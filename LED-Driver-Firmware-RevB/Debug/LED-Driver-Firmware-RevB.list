
LED-Driver-Firmware-RevB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da8  08003da8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003da8  08003da8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003da8  08003da8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da8  08003da8  00004da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dac  08003dac  00004dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003db0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001368  2000000c  08003dbc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  08003dbc  00005374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d43a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002215  00000000  00000000  0001246f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00014688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f2  00000000  00000000  00015378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6ae  00000000  00000000  00015d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e7  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e696  00000000  00000000  0003e9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  000dd0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e0684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003d6c 	.word	0x08003d6c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003d6c 	.word	0x08003d6c

08000224 <SK6812_Init>:
		uint32_t channel,
		uint8_t* dma_buf,
		uint16_t dma_buf_len,
		SK6812_DATA_RGB* led_data,
		uint16_t num_leds
) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]

	stripHandle->timer        = timer;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
	stripHandle->channel      = channel;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
	stripHandle->dma_buf      = dma_buf;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	stripHandle->dma_buf_len  = dma_buf_len;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	8b3a      	ldrh	r2, [r7, #24]
 8000248:	819a      	strh	r2, [r3, #12]
	stripHandle->led_data     = led_data;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	69fa      	ldr	r2, [r7, #28]
 800024e:	611a      	str	r2, [r3, #16]
	stripHandle->num_leds     = num_leds;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	8c3a      	ldrh	r2, [r7, #32]
 8000254:	829a      	strh	r2, [r3, #20]
	stripHandle->dma_done_flag     = 1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	759a      	strb	r2, [r3, #22]

	memset(stripHandle->dma_buf, 0, stripHandle->dma_buf_len);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	6898      	ldr	r0, [r3, #8]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	899b      	ldrh	r3, [r3, #12]
 8000264:	461a      	mov	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f003 fd53 	bl	8003d12 <memset>

	return HAL_TIM_PWM_Init(timer);
 800026c:	68b8      	ldr	r0, [r7, #8]
 800026e:	f002 fbfb 	bl	8002a68 <HAL_TIM_PWM_Init>
 8000272:	4603      	mov	r3, r0

}
 8000274:	4618      	mov	r0, r3
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <SK6812_SetColour>:


void SK6812_SetColour(SK6812_HandleTypeDef* stripHandle, uint16_t index, uint8_t red, uint8_t green, uint8_t blue) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	4608      	mov	r0, r1
 8000286:	4611      	mov	r1, r2
 8000288:	461a      	mov	r2, r3
 800028a:	4603      	mov	r3, r0
 800028c:	807b      	strh	r3, [r7, #2]
 800028e:	460b      	mov	r3, r1
 8000290:	707b      	strb	r3, [r7, #1]
 8000292:	4613      	mov	r3, r2
 8000294:	703b      	strb	r3, [r7, #0]

	if (index >= stripHandle->num_leds) return;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	8a9b      	ldrh	r3, [r3, #20]
 800029a:	887a      	ldrh	r2, [r7, #2]
 800029c:	429a      	cmp	r2, r3
 800029e:	d215      	bcs.n	80002cc <SK6812_SetColour+0x50>
	stripHandle->led_data[index].colour.red = red;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691a      	ldr	r2, [r3, #16]
 80002a4:	887b      	ldrh	r3, [r7, #2]
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	787a      	ldrb	r2, [r7, #1]
 80002ac:	705a      	strb	r2, [r3, #1]
	stripHandle->led_data[index].colour.green = green;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	691a      	ldr	r2, [r3, #16]
 80002b2:	887b      	ldrh	r3, [r7, #2]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	4413      	add	r3, r2
 80002b8:	783a      	ldrb	r2, [r7, #0]
 80002ba:	701a      	strb	r2, [r3, #0]
	stripHandle->led_data[index].colour.blue = blue;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691a      	ldr	r2, [r3, #16]
 80002c0:	887b      	ldrh	r3, [r7, #2]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	7c3a      	ldrb	r2, [r7, #16]
 80002c8:	709a      	strb	r2, [r3, #2]
 80002ca:	e000      	b.n	80002ce <SK6812_SetColour+0x52>
	if (index >= stripHandle->num_leds) return;
 80002cc:	bf00      	nop

}
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr

080002d6 <SK6812_Update>:


HAL_StatusTypeDef SK6812_Update(SK6812_HandleTypeDef* stripHandle) {
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b084      	sub	sp, #16
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]

    if (!stripHandle->dma_done_flag) return HAL_BUSY;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7d9b      	ldrb	r3, [r3, #22]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d101      	bne.n	80002ec <SK6812_Update+0x16>
 80002e8:	2302      	movs	r3, #2
 80002ea:	e04e      	b.n	800038a <SK6812_Update+0xb4>

    uint16_t buf_idx = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	81fb      	strh	r3, [r7, #14]
    for (uint16_t led = 0; led < stripHandle->num_leds; led++) {
 80002f0:	2300      	movs	r3, #0
 80002f2:	81bb      	strh	r3, [r7, #12]
 80002f4:	e031      	b.n	800035a <SK6812_Update+0x84>
        for (uint8_t bit = 0; bit < SK6812_BITS_PER_LED; bit++) {
 80002f6:	2300      	movs	r3, #0
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	e028      	b.n	800034e <SK6812_Update+0x78>
            uint8_t bit_pos = (7 - (bit % 8)) + ((bit / 8) * 8);
 80002fc:	7afb      	ldrb	r3, [r7, #11]
 80002fe:	43db      	mvns	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	b2da      	uxtb	r2, r3
 8000308:	7afb      	ldrb	r3, [r7, #11]
 800030a:	08db      	lsrs	r3, r3, #3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	4413      	add	r3, r2
 8000314:	72bb      	strb	r3, [r7, #10]
            uint8_t val = ((stripHandle->led_data[led].data >> bit_pos) & 0x01) ? SK6812_T1H_VAL : SK6812_T0H_VAL;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691a      	ldr	r2, [r3, #16]
 800031a:	89bb      	ldrh	r3, [r7, #12]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	7abb      	ldrb	r3, [r7, #10]
 8000324:	fa22 f303 	lsr.w	r3, r2, r3
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SK6812_Update+0x5e>
 8000330:	232b      	movs	r3, #43	@ 0x2b
 8000332:	e000      	b.n	8000336 <SK6812_Update+0x60>
 8000334:	2316      	movs	r3, #22
 8000336:	727b      	strb	r3, [r7, #9]
            stripHandle->dma_buf[buf_idx++] = val;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	89fb      	ldrh	r3, [r7, #14]
 800033e:	1c59      	adds	r1, r3, #1
 8000340:	81f9      	strh	r1, [r7, #14]
 8000342:	4413      	add	r3, r2
 8000344:	7a7a      	ldrb	r2, [r7, #9]
 8000346:	701a      	strb	r2, [r3, #0]
        for (uint8_t bit = 0; bit < SK6812_BITS_PER_LED; bit++) {
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	3301      	adds	r3, #1
 800034c:	72fb      	strb	r3, [r7, #11]
 800034e:	7afb      	ldrb	r3, [r7, #11]
 8000350:	2b17      	cmp	r3, #23
 8000352:	d9d3      	bls.n	80002fc <SK6812_Update+0x26>
    for (uint16_t led = 0; led < stripHandle->num_leds; led++) {
 8000354:	89bb      	ldrh	r3, [r7, #12]
 8000356:	3301      	adds	r3, #1
 8000358:	81bb      	strh	r3, [r7, #12]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	8a9b      	ldrh	r3, [r3, #20]
 800035e:	89ba      	ldrh	r2, [r7, #12]
 8000360:	429a      	cmp	r2, r3
 8000362:	d3c8      	bcc.n	80002f6 <SK6812_Update+0x20>
        }
    }

    if (HAL_TIM_PWM_Start_DMA(stripHandle->timer, stripHandle->channel, (uint32_t*)stripHandle->dma_buf, stripHandle->dma_buf_len) == HAL_OK) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6859      	ldr	r1, [r3, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	899b      	ldrh	r3, [r3, #12]
 8000374:	f002 fbc8 	bl	8002b08 <HAL_TIM_PWM_Start_DMA>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d104      	bne.n	8000388 <SK6812_Update+0xb2>
        stripHandle->dma_done_flag = 0;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2200      	movs	r2, #0
 8000382:	759a      	strb	r2, [r3, #22]
        return HAL_OK;
 8000384:	2300      	movs	r3, #0
 8000386:	e000      	b.n	800038a <SK6812_Update+0xb4>
    }
    return HAL_ERROR;
 8000388:	2301      	movs	r3, #1

}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <SK6812_DMACompleteCallback>:

void SK6812_DMACompleteCallback(SK6812_HandleTypeDef* stripHandle) {
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(stripHandle->timer, stripHandle->channel);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	4619      	mov	r1, r3
 80003a4:	4610      	mov	r0, r2
 80003a6:	f002 fd77 	bl	8002e98 <HAL_TIM_PWM_Stop_DMA>
    stripHandle->dma_done_flag = 1;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2201      	movs	r2, #1
 80003ae:	759a      	strb	r2, [r3, #22]

}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

	if (htim == strip1.timer) {
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d102      	bne.n	80003d0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		SK6812_DMACompleteCallback(&strip1);
 80003ca:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80003cc:	f7ff ffe1 	bl	8000392 <SK6812_DMACompleteCallback>
	}

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200005f8 	.word	0x200005f8

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e2:	f000 fe47 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e6:	f000 f865 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ea:	f000 faa5 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 80003ee:	f000 fa49 	bl	8000884 <MX_DMA_Init>
  MX_TIM3_Init();
 80003f2:	f000 f8bb 	bl	800056c <MX_TIM3_Init>
  MX_TIM5_Init();
 80003f6:	f000 f927 	bl	8000648 <MX_TIM5_Init>
  MX_TIM8_Init();
 80003fa:	f000 f99f 	bl	800073c <MX_TIM8_Init>
  MX_USB_PCD_Init();
 80003fe:	f000 fa1f 	bl	8000840 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  SK6812_Init(&strip1, &htim5, TIM_CHANNEL_1, dma_buf1, SK6812_DMA_BUF_LEN(SK6812_NUM_LEDS), led_data1, SK6812_NUM_LEDS);
 8000402:	2378      	movs	r3, #120	@ 0x78
 8000404:	9302      	str	r3, [sp, #8]
 8000406:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <main+0xc8>)
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	f44f 6338 	mov.w	r3, #2944	@ 0xb80
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <main+0xcc>)
 8000412:	2200      	movs	r2, #0
 8000414:	4925      	ldr	r1, [pc, #148]	@ (80004ac <main+0xd0>)
 8000416:	4826      	ldr	r0, [pc, #152]	@ (80004b0 <main+0xd4>)
 8000418:	f7ff ff04 	bl	8000224 <SK6812_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t led = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	71fb      	strb	r3, [r7, #7]
  uint8_t direction = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 8000424:	2300      	movs	r3, #0
 8000426:	717b      	strb	r3, [r7, #5]
 8000428:	e019      	b.n	800045e <main+0x82>
			if (i == led)
 800042a:	797a      	ldrb	r2, [r7, #5]
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	429a      	cmp	r2, r3
 8000430:	d109      	bne.n	8000446 <main+0x6a>
				SK6812_SetColour(&strip1, i, 235, 52, 232);
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	b299      	uxth	r1, r3
 8000436:	23e8      	movs	r3, #232	@ 0xe8
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2334      	movs	r3, #52	@ 0x34
 800043c:	22eb      	movs	r2, #235	@ 0xeb
 800043e:	481c      	ldr	r0, [pc, #112]	@ (80004b0 <main+0xd4>)
 8000440:	f7ff ff1c 	bl	800027c <SK6812_SetColour>
 8000444:	e008      	b.n	8000458 <main+0x7c>
			else
				SK6812_SetColour(&strip1, i, 0, 0, 0);
 8000446:	797b      	ldrb	r3, [r7, #5]
 8000448:	b299      	uxth	r1, r3
 800044a:	2300      	movs	r3, #0
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2300      	movs	r3, #0
 8000450:	2200      	movs	r2, #0
 8000452:	4817      	ldr	r0, [pc, #92]	@ (80004b0 <main+0xd4>)
 8000454:	f7ff ff12 	bl	800027c <SK6812_SetColour>
	  for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 8000458:	797b      	ldrb	r3, [r7, #5]
 800045a:	3301      	adds	r3, #1
 800045c:	717b      	strb	r3, [r7, #5]
 800045e:	797b      	ldrb	r3, [r7, #5]
 8000460:	2b77      	cmp	r3, #119	@ 0x77
 8000462:	d9e2      	bls.n	800042a <main+0x4e>
		}
		if (direction == 0)
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d103      	bne.n	8000472 <main+0x96>
			led++;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3301      	adds	r3, #1
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	e002      	b.n	8000478 <main+0x9c>
		else
			led--;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	3b01      	subs	r3, #1
 8000476:	71fb      	strb	r3, [r7, #7]
		if (led >= SK6812_NUM_LEDS) {
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2b77      	cmp	r3, #119	@ 0x77
 800047c:	d904      	bls.n	8000488 <main+0xac>
			led = SK6812_NUM_LEDS;
 800047e:	2378      	movs	r3, #120	@ 0x78
 8000480:	71fb      	strb	r3, [r7, #7]
			direction = 1;
 8000482:	2301      	movs	r3, #1
 8000484:	71bb      	strb	r3, [r7, #6]
 8000486:	e006      	b.n	8000496 <main+0xba>
		}
		else if (led <= 0) {
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d103      	bne.n	8000496 <main+0xba>
			led = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	71fb      	strb	r3, [r7, #7]
			direction = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	71bb      	strb	r3, [r7, #6]
		}
		SK6812_Update(&strip1);
 8000496:	4806      	ldr	r0, [pc, #24]	@ (80004b0 <main+0xd4>)
 8000498:	f7ff ff1d 	bl	80002d6 <SK6812_Update>
		HAL_Delay(10);
 800049c:	200a      	movs	r0, #10
 800049e:	f000 fe4b 	bl	8001138 <HAL_Delay>
	  for (uint8_t i = 0; i < SK6812_NUM_LEDS; i++) {
 80004a2:	e7bf      	b.n	8000424 <main+0x48>
 80004a4:	20000610 	.word	0x20000610
 80004a8:	200007f0 	.word	0x200007f0
 80004ac:	20000070 	.word	0x20000070
 80004b0:	200005f8 	.word	0x200005f8

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b096      	sub	sp, #88	@ 0x58
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004be:	2228      	movs	r2, #40	@ 0x28
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f003 fc25 	bl	8003d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e8:	2301      	movs	r3, #1
 80004ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f6:	2301      	movs	r3, #1
 80004f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000502:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000504:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000508:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fe16 	bl	8002140 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800051a:	f000 fa47 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	230f      	movs	r3, #15
 8000520:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2302      	movs	r3, #2
 8000524:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800052a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800052e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	2102      	movs	r1, #2
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f882 	bl	8002644 <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000546:	f000 fa31 	bl	80009ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800054a:	2310      	movs	r3, #16
 800054c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4618      	mov	r0, r3
 8000556:	f002 f9d1 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000560:	f000 fa24 	bl	80009ac <Error_Handler>
  }
}
 8000564:	bf00      	nop
 8000566:	3758      	adds	r7, #88	@ 0x58
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_TIM3_Init+0xd4>)
 8000590:	4a2c      	ldr	r2, [pc, #176]	@ (8000644 <MX_TIM3_Init+0xd8>)
 8000592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_TIM3_Init+0xd4>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <MX_TIM3_Init+0xd4>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_TIM3_Init+0xd4>)
 80005a2:	2259      	movs	r2, #89	@ 0x59
 80005a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_TIM3_Init+0xd4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <MX_TIM3_Init+0xd4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005b2:	4823      	ldr	r0, [pc, #140]	@ (8000640 <MX_TIM3_Init+0xd4>)
 80005b4:	f002 fa58 	bl	8002a68 <HAL_TIM_PWM_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80005be:	f000 f9f5 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4619      	mov	r1, r3
 80005d0:	481b      	ldr	r0, [pc, #108]	@ (8000640 <MX_TIM3_Init+0xd4>)
 80005d2:	f003 fa67 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80005dc:	f000 f9e6 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e0:	2360      	movs	r3, #96	@ 0x60
 80005e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	4812      	ldr	r0, [pc, #72]	@ (8000640 <MX_TIM3_Init+0xd4>)
 80005f8:	f002 fe10 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000602:	f000 f9d3 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2208      	movs	r2, #8
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_TIM3_Init+0xd4>)
 800060e:	f002 fe05 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000618:	f000 f9c8 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	220c      	movs	r2, #12
 8000620:	4619      	mov	r1, r3
 8000622:	4807      	ldr	r0, [pc, #28]	@ (8000640 <MX_TIM3_Init+0xd4>)
 8000624:	f002 fdfa 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800062e:	f000 f9bd 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000632:	4803      	ldr	r0, [pc, #12]	@ (8000640 <MX_TIM3_Init+0xd4>)
 8000634:	f000 fbbc 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000028 	.word	0x20000028
 8000644:	40000400 	.word	0x40000400

08000648 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <MX_TIM5_Init+0xec>)
 800066c:	4a32      	ldr	r2, [pc, #200]	@ (8000738 <MX_TIM5_Init+0xf0>)
 800066e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8000670:	4b30      	ldr	r3, [pc, #192]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90-1;
 800067c:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <MX_TIM5_Init+0xec>)
 800067e:	2259      	movs	r2, #89	@ 0x59
 8000680:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <MX_TIM5_Init+0xec>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000690:	f002 f9ea 	bl	8002a68 <HAL_TIM_PWM_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800069a:	f000 f987 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4619      	mov	r1, r3
 80006ac:	4821      	ldr	r0, [pc, #132]	@ (8000734 <MX_TIM5_Init+0xec>)
 80006ae:	f003 f9f9 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80006b8:	f000 f978 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	@ 0x60
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4818      	ldr	r0, [pc, #96]	@ (8000734 <MX_TIM5_Init+0xec>)
 80006d4:	f002 fda2 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80006de:	f000 f965 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2204      	movs	r2, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <MX_TIM5_Init+0xec>)
 80006ea:	f002 fd97 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80006f4:	f000 f95a 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2208      	movs	r2, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000700:	f002 fd8c 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 800070a:	f000 f94f 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	220c      	movs	r2, #12
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000716:	f002 fd81 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000720:	f000 f944 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000724:	4803      	ldr	r0, [pc, #12]	@ (8000734 <MX_TIM5_Init+0xec>)
 8000726:	f000 fb43 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 800072a:	bf00      	nop
 800072c:	3728      	adds	r7, #40	@ 0x28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000070 	.word	0x20000070
 8000738:	40000c00 	.word	0x40000c00

0800073c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b092      	sub	sp, #72	@ 0x48
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fad3 	bl	8003d12 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800076c:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <MX_TIM8_Init+0xfc>)
 800076e:	4a33      	ldr	r2, [pc, #204]	@ (800083c <MX_TIM8_Init+0x100>)
 8000770:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000772:	4b31      	ldr	r3, [pc, #196]	@ (8000838 <MX_TIM8_Init+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_TIM8_Init+0xfc>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 90-1;
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <MX_TIM8_Init+0xfc>)
 8000780:	2259      	movs	r2, #89	@ 0x59
 8000782:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_TIM8_Init+0xfc>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <MX_TIM8_Init+0xfc>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_TIM8_Init+0xfc>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000796:	4828      	ldr	r0, [pc, #160]	@ (8000838 <MX_TIM8_Init+0xfc>)
 8000798:	f002 f966 	bl	8002a68 <HAL_TIM_PWM_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80007a2:	f000 f903 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007b2:	4619      	mov	r1, r3
 80007b4:	4820      	ldr	r0, [pc, #128]	@ (8000838 <MX_TIM8_Init+0xfc>)
 80007b6:	f003 f975 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80007c0:	f000 f8f4 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c4:	2360      	movs	r3, #96	@ 0x60
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	@ (8000838 <MX_TIM8_Init+0xfc>)
 80007ea:	f002 fd17 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80007f4:	f000 f8da 	bl	80009ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM8_Init+0xfc>)
 800081c:	f003 f9bc 	bl	8003b98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8000826:	f000 f8c1 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800082a:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM8_Init+0xfc>)
 800082c:	f000 fac0 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3748      	adds	r7, #72	@ 0x48
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000b8 	.word	0x200000b8
 800083c:	40013400 	.word	0x40013400

08000840 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 8000846:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <MX_USB_PCD_Init+0x40>)
 8000848:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 800084c:	2208      	movs	r2, #8
 800084e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 8000852:	2202      	movs	r2, #2
 8000854:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 800085e:	2200      	movs	r2, #0
 8000860:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_USB_PCD_Init+0x3c>)
 800086a:	f001 fb73 	bl	8001f54 <HAL_PCD_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000874:	f000 f89a 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000320 	.word	0x20000320
 8000880:	40005c00 	.word	0x40005c00

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	4b2a      	ldr	r3, [pc, #168]	@ (8000934 <MX_DMA_Init+0xb0>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a29      	ldr	r2, [pc, #164]	@ (8000934 <MX_DMA_Init+0xb0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_DMA_Init+0xb0>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_DMA_Init+0xb0>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <MX_DMA_Init+0xb0>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_DMA_Init+0xb0>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	200c      	movs	r0, #12
 80008c0:	f000 fd35 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008c4:	200c      	movs	r0, #12
 80008c6:	f000 fd4e 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	200d      	movs	r0, #13
 80008d0:	f000 fd2d 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008d4:	200d      	movs	r0, #13
 80008d6:	f000 fd46 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	2010      	movs	r0, #16
 80008e0:	f000 fd25 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008e4:	2010      	movs	r0, #16
 80008e6:	f000 fd3e 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2038      	movs	r0, #56	@ 0x38
 80008f0:	f000 fd1d 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80008f4:	2038      	movs	r0, #56	@ 0x38
 80008f6:	f000 fd36 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2039      	movs	r0, #57	@ 0x39
 8000900:	f000 fd15 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000904:	2039      	movs	r0, #57	@ 0x39
 8000906:	f000 fd2e 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	203a      	movs	r0, #58	@ 0x3a
 8000910:	f000 fd0d 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000914:	203a      	movs	r0, #58	@ 0x3a
 8000916:	f000 fd26 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	203b      	movs	r0, #59	@ 0x3b
 8000920:	f000 fd05 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8000924:	203b      	movs	r0, #59	@ 0x3b
 8000926:	f000 fd1e 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_GPIO_Init+0x70>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <MX_GPIO_Init+0x70>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_GPIO_Init+0x70>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <MX_GPIO_Init+0x70>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <MX_GPIO_Init+0x70>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_MspInit+0x60>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_MspInit+0x60>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a4c      	ldr	r2, [pc, #304]	@ (8000b5c <HAL_TIM_PWM_MspInit+0x140>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	f040 80a6 	bne.w	8000b7c <HAL_TIM_PWM_MspInit+0x160>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a30:	4b4b      	ldr	r3, [pc, #300]	@ (8000b60 <HAL_TIM_PWM_MspInit+0x144>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	4a4a      	ldr	r2, [pc, #296]	@ (8000b60 <HAL_TIM_PWM_MspInit+0x144>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	61d3      	str	r3, [r2, #28]
 8000a3c:	4b48      	ldr	r3, [pc, #288]	@ (8000b60 <HAL_TIM_PWM_MspInit+0x144>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000a48:	4b46      	ldr	r3, [pc, #280]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a4a:	4a47      	ldr	r2, [pc, #284]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x14c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a4e:	4b45      	ldr	r3, [pc, #276]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a50:	2210      	movs	r2, #16
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b43      	ldr	r3, [pc, #268]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b42      	ldr	r3, [pc, #264]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a60:	4b40      	ldr	r3, [pc, #256]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a68:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000a74:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000a7a:	483a      	ldr	r0, [pc, #232]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a7c:	f000 fc8e 	bl	800139c <HAL_DMA_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000a86:	f7ff ff91 	bl	80009ac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a35      	ldr	r2, [pc, #212]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a90:	4a34      	ldr	r2, [pc, #208]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a32      	ldr	r2, [pc, #200]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a9c:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x148>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000aa4:	4a32      	ldr	r2, [pc, #200]	@ (8000b70 <HAL_TIM_PWM_MspInit+0x154>)
 8000aa6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000aaa:	2210      	movs	r2, #16
 8000aac:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aae:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000ace:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8000ad4:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000ad6:	f000 fc61 	bl	800139c <HAL_DMA_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_TIM_PWM_MspInit+0xc8>
    {
      Error_Handler();
 8000ae0:	f7ff ff64 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a21      	ldr	r2, [pc, #132]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aea:	4a20      	ldr	r2, [pc, #128]	@ (8000b6c <HAL_TIM_PWM_MspInit+0x150>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000af2:	4a21      	ldr	r2, [pc, #132]	@ (8000b78 <HAL_TIM_PWM_MspInit+0x15c>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000af8:	2210      	movs	r2, #16
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000b22:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b24:	f000 fc3a 	bl	800139c <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_TIM_PWM_MspInit+0x116>
    {
      Error_Handler();
 8000b2e:	f7ff ff3d 	bl	80009ac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b38:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a0c      	ldr	r2, [pc, #48]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b42:	621a      	str	r2, [r3, #32]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <HAL_TIM_PWM_MspInit+0x158>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	201d      	movs	r0, #29
 8000b50:	f000 fbed 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b54:	201d      	movs	r0, #29
 8000b56:	f000 fc06 	bl	8001366 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000b5a:	e10a      	b.n	8000d72 <HAL_TIM_PWM_MspInit+0x356>
 8000b5c:	40000400 	.word	0x40000400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	20000100 	.word	0x20000100
 8000b68:	4002006c 	.word	0x4002006c
 8000b6c:	20000144 	.word	0x20000144
 8000b70:	4002001c 	.word	0x4002001c
 8000b74:	20000188 	.word	0x20000188
 8000b78:	40020030 	.word	0x40020030
  else if(htim_pwm->Instance==TIM5)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a7e      	ldr	r2, [pc, #504]	@ (8000d7c <HAL_TIM_PWM_MspInit+0x360>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	f040 80bd 	bne.w	8000d02 <HAL_TIM_PWM_MspInit+0x2e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b88:	4b7d      	ldr	r3, [pc, #500]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x364>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	4a7c      	ldr	r2, [pc, #496]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x364>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	61d3      	str	r3, [r2, #28]
 8000b94:	4b7a      	ldr	r3, [pc, #488]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x364>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA2_Channel5;
 8000ba0:	4b78      	ldr	r3, [pc, #480]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000ba2:	4a79      	ldr	r2, [pc, #484]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x36c>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ba6:	4b77      	ldr	r3, [pc, #476]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000ba8:	2210      	movs	r2, #16
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b75      	ldr	r3, [pc, #468]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b74      	ldr	r3, [pc, #464]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb8:	4b72      	ldr	r3, [pc, #456]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc0:	4b70      	ldr	r3, [pc, #448]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000bd2:	486c      	ldr	r0, [pc, #432]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bd4:	f000 fbe2 	bl	800139c <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_TIM_PWM_MspInit+0x1c6>
      Error_Handler();
 8000bde:	f7ff fee5 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a67      	ldr	r2, [pc, #412]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000be8:	4a66      	ldr	r2, [pc, #408]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x368>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch2.Instance = DMA2_Channel4;
 8000bee:	4b67      	ldr	r3, [pc, #412]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000bf0:	4a67      	ldr	r2, [pc, #412]	@ (8000d90 <HAL_TIM_PWM_MspInit+0x374>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf4:	4b65      	ldr	r3, [pc, #404]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	4b64      	ldr	r3, [pc, #400]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000c00:	4b62      	ldr	r3, [pc, #392]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c02:	2280      	movs	r2, #128	@ 0x80
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c06:	4b61      	ldr	r3, [pc, #388]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000c14:	4b5d      	ldr	r3, [pc, #372]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000c20:	485a      	ldr	r0, [pc, #360]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c22:	f000 fbbb 	bl	800139c <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_TIM_PWM_MspInit+0x214>
      Error_Handler();
 8000c2c:	f7ff febe 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a56      	ldr	r2, [pc, #344]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c36:	4a55      	ldr	r2, [pc, #340]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x370>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch3_up.Instance = DMA2_Channel2;
 8000c3c:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c3e:	4a56      	ldr	r2, [pc, #344]	@ (8000d98 <HAL_TIM_PWM_MspInit+0x37c>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c42:	4b54      	ldr	r3, [pc, #336]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c44:	2210      	movs	r2, #16
 8000c46:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c54:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c5a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8000c62:	4b4c      	ldr	r3, [pc, #304]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8000c68:	4b4a      	ldr	r3, [pc, #296]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8000c6e:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c70:	f000 fb94 	bl	800139c <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_TIM_PWM_MspInit+0x262>
      Error_Handler();
 8000c7a:	f7ff fe97 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a44      	ldr	r2, [pc, #272]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c84:	4a43      	ldr	r2, [pc, #268]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a41      	ldr	r2, [pc, #260]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c8e:	621a      	str	r2, [r3, #32]
 8000c90:	4a40      	ldr	r2, [pc, #256]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x378>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim5_ch4_trig.Instance = DMA2_Channel1;
 8000c96:	4b41      	ldr	r3, [pc, #260]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000c98:	4a41      	ldr	r2, [pc, #260]	@ (8000da0 <HAL_TIM_PWM_MspInit+0x384>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cae:	4b3b      	ldr	r3, [pc, #236]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb6:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8000cbc:	4b37      	ldr	r3, [pc, #220]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000cc2:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8000cc8:	4834      	ldr	r0, [pc, #208]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cca:	f000 fb67 	bl	800139c <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_TIM_PWM_MspInit+0x2bc>
      Error_Handler();
 8000cd4:	f7ff fe6a 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a30      	ldr	r2, [pc, #192]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cde:	4a2f      	ldr	r2, [pc, #188]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000ce8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cea:	4a2c      	ldr	r2, [pc, #176]	@ (8000d9c <HAL_TIM_PWM_MspInit+0x380>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2032      	movs	r0, #50	@ 0x32
 8000cf6:	f000 fb1a 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000cfa:	2032      	movs	r0, #50	@ 0x32
 8000cfc:	f000 fb33 	bl	8001366 <HAL_NVIC_EnableIRQ>
}
 8000d00:	e037      	b.n	8000d72 <HAL_TIM_PWM_MspInit+0x356>
  else if(htim_pwm->Instance==TIM8)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a27      	ldr	r2, [pc, #156]	@ (8000da4 <HAL_TIM_PWM_MspInit+0x388>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d132      	bne.n	8000d72 <HAL_TIM_PWM_MspInit+0x356>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x364>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x364>)
 8000d12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x364>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d26:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <HAL_TIM_PWM_MspInit+0x390>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000d56:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d58:	f000 fb20 	bl	800139c <HAL_DMA_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_TIM_PWM_MspInit+0x34a>
      Error_Handler();
 8000d62:	f7ff fe23 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40000c00 	.word	0x40000c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	200001cc 	.word	0x200001cc
 8000d88:	40020458 	.word	0x40020458
 8000d8c:	20000210 	.word	0x20000210
 8000d90:	40020444 	.word	0x40020444
 8000d94:	20000254 	.word	0x20000254
 8000d98:	4002041c 	.word	0x4002041c
 8000d9c:	20000298 	.word	0x20000298
 8000da0:	40020408 	.word	0x40020408
 8000da4:	40013400 	.word	0x40013400
 8000da8:	200002dc 	.word	0x200002dc
 8000dac:	40020430 	.word	0x40020430

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a39      	ldr	r2, [pc, #228]	@ (8000eb0 <HAL_TIM_MspPostInit+0x100>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d130      	bne.n	8000e32 <HAL_TIM_MspPostInit+0x82>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a37      	ldr	r2, [pc, #220]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b35      	ldr	r3, [pc, #212]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b32      	ldr	r3, [pc, #200]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a31      	ldr	r2, [pc, #196]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e00:	2340      	movs	r3, #64	@ 0x40
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4829      	ldr	r0, [pc, #164]	@ (8000eb8 <HAL_TIM_MspPostInit+0x108>)
 8000e14:	f000 ff0a 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2302      	movs	r3, #2
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4824      	ldr	r0, [pc, #144]	@ (8000ebc <HAL_TIM_MspPostInit+0x10c>)
 8000e2c:	f000 fefe 	bl	8001c2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e30:	e03a      	b.n	8000ea8 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM5)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <HAL_TIM_MspPostInit+0x110>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d118      	bne.n	8000e6e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e54:	230f      	movs	r3, #15
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <HAL_TIM_MspPostInit+0x108>)
 8000e68:	f000 fee0 	bl	8001c2c <HAL_GPIO_Init>
}
 8000e6c:	e01c      	b.n	8000ea8 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <HAL_TIM_MspPostInit+0x114>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d117      	bne.n	8000ea8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <HAL_TIM_MspPostInit+0x118>)
 8000ea4:	f000 fec2 	bl	8001c2c <HAL_GPIO_Init>
}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	@ 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40000400 	.word	0x40000400
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	40000c00 	.word	0x40000c00
 8000ec4:	40013400 	.word	0x40013400
 8000ec8:	40011000 	.word	0x40011000

08000ecc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <HAL_PCD_MspInit+0x34>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10b      	bne.n	8000ef6 <HAL_PCD_MspInit+0x2a>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_PCD_MspInit+0x38>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_PCD_MspInit+0x38>)
 8000ee4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_PCD_MspInit+0x38>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40005c00 	.word	0x40005c00
 8000f04:	40021000 	.word	0x40021000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f8d2 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <DMA1_Channel2_IRQHandler+0x10>)
 8000f66:	f000 fbf7 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000144 	.word	0x20000144

08000f74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <DMA1_Channel3_IRQHandler+0x10>)
 8000f7a:	f000 fbed 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000188 	.word	0x20000188

08000f88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <DMA1_Channel6_IRQHandler+0x10>)
 8000f8e:	f000 fbe3 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000100 	.word	0x20000100

08000f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <TIM3_IRQHandler+0x10>)
 8000fa2:	f002 f84b 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000028 	.word	0x20000028

08000fb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <TIM5_IRQHandler+0x10>)
 8000fb6:	f002 f841 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000070 	.word	0x20000070

08000fc4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA2_Channel1_IRQHandler+0x10>)
 8000fca:	f000 fbc5 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000298 	.word	0x20000298

08000fd8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <DMA2_Channel2_IRQHandler+0x10>)
 8000fde:	f000 fbbb 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000254 	.word	0x20000254

08000fec <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <DMA2_Channel3_IRQHandler+0x10>)
 8000ff2:	f000 fbb1 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002dc 	.word	0x200002dc

08001000 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001004:	4803      	ldr	r0, [pc, #12]	@ (8001014 <DMA2_Channel4_5_IRQHandler+0x14>)
 8001006:	f000 fba7 	bl	8001758 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <DMA2_Channel4_5_IRQHandler+0x18>)
 800100c:	f000 fba4 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000210 	.word	0x20000210
 8001018:	200001cc 	.word	0x200001cc

0800101c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff fff8 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480b      	ldr	r0, [pc, #44]	@ (800105c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800102e:	490c      	ldr	r1, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001030:	4a0c      	ldr	r2, [pc, #48]	@ (8001064 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001044:	4c09      	ldr	r4, [pc, #36]	@ (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f002 fe67 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff f9c1 	bl	80003dc <main>
  bx lr
 800105a:	4770      	bx	lr
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001064:	08003db0 	.word	0x08003db0
  ldr r2, =_sbss
 8001068:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800106c:	20001374 	.word	0x20001374

08001070 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_Init+0x28>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_Init+0x28>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f947 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fc92 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f95f 	bl	8001382 <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010dc:	f000 f927 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_IncTick+0x1c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_IncTick+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a03      	ldr	r2, [pc, #12]	@ (8001120 <HAL_IncTick+0x20>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	20000008 	.word	0x20000008
 8001120:	20001370 	.word	0x20001370

08001124 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b02      	ldr	r3, [pc, #8]	@ (8001134 <HAL_GetTick+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	20001370 	.word	0x20001370

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff fff0 	bl	8001124 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffe0 	bl	8001124 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4906      	ldr	r1, [pc, #24]	@ (8001218 <__NVIC_EnableIRQ+0x34>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f8:	f7ff ff90 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff2d 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff42 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff35 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa2 	bl	80012d4 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e059      	b.n	8001466 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <HAL_DMA_Init+0xd4>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d80f      	bhi.n	80013de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_DMA_Init+0xd8>)
 80013c6:	4413      	add	r3, r2
 80013c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001478 <HAL_DMA_Init+0xdc>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a28      	ldr	r2, [pc, #160]	@ (800147c <HAL_DMA_Init+0xe0>)
 80013da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013dc:	e00e      	b.n	80013fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <HAL_DMA_Init+0xe4>)
 80013e6:	4413      	add	r3, r2
 80013e8:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <HAL_DMA_Init+0xdc>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	009a      	lsls	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <HAL_DMA_Init+0xe8>)
 80013fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001412:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40020407 	.word	0x40020407
 8001474:	bffdfff8 	.word	0xbffdfff8
 8001478:	cccccccd 	.word	0xcccccccd
 800147c:	40020000 	.word	0x40020000
 8001480:	bffdfbf8 	.word	0xbffdfbf8
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_DMA_Start_IT+0x20>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e04b      	b.n	8001540 <HAL_DMA_Start_IT+0xb8>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d13a      	bne.n	8001532 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fb75 	bl	8001bd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 020e 	orr.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e00f      	b.n	8001520 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0204 	bic.w	r2, r2, #4
 800150e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 020a 	orr.w	r2, r2, #10
 800151e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e005      	b.n	800153e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800153a:	2302      	movs	r3, #2
 800153c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d005      	beq.n	800156c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2204      	movs	r2, #4
 8001564:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e0d6      	b.n	800171a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 020e 	bic.w	r2, r2, #14
 800157a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b64      	ldr	r3, [pc, #400]	@ (8001724 <HAL_DMA_Abort_IT+0x1dc>)
 8001594:	429a      	cmp	r2, r3
 8001596:	d958      	bls.n	800164a <HAL_DMA_Abort_IT+0x102>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a62      	ldr	r2, [pc, #392]	@ (8001728 <HAL_DMA_Abort_IT+0x1e0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d04f      	beq.n	8001642 <HAL_DMA_Abort_IT+0xfa>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a61      	ldr	r2, [pc, #388]	@ (800172c <HAL_DMA_Abort_IT+0x1e4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d048      	beq.n	800163e <HAL_DMA_Abort_IT+0xf6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001730 <HAL_DMA_Abort_IT+0x1e8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d040      	beq.n	8001638 <HAL_DMA_Abort_IT+0xf0>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001734 <HAL_DMA_Abort_IT+0x1ec>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d038      	beq.n	8001632 <HAL_DMA_Abort_IT+0xea>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a5c      	ldr	r2, [pc, #368]	@ (8001738 <HAL_DMA_Abort_IT+0x1f0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d030      	beq.n	800162c <HAL_DMA_Abort_IT+0xe4>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a5b      	ldr	r2, [pc, #364]	@ (800173c <HAL_DMA_Abort_IT+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d028      	beq.n	8001626 <HAL_DMA_Abort_IT+0xde>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_DMA_Abort_IT+0x1dc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d020      	beq.n	8001620 <HAL_DMA_Abort_IT+0xd8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a57      	ldr	r2, [pc, #348]	@ (8001740 <HAL_DMA_Abort_IT+0x1f8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d019      	beq.n	800161c <HAL_DMA_Abort_IT+0xd4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a55      	ldr	r2, [pc, #340]	@ (8001744 <HAL_DMA_Abort_IT+0x1fc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d012      	beq.n	8001618 <HAL_DMA_Abort_IT+0xd0>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a54      	ldr	r2, [pc, #336]	@ (8001748 <HAL_DMA_Abort_IT+0x200>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00a      	beq.n	8001612 <HAL_DMA_Abort_IT+0xca>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a52      	ldr	r2, [pc, #328]	@ (800174c <HAL_DMA_Abort_IT+0x204>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d102      	bne.n	800160c <HAL_DMA_Abort_IT+0xc4>
 8001606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160a:	e01b      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 800160c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001610:	e018      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001616:	e015      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001618:	2310      	movs	r3, #16
 800161a:	e013      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 800161c:	2301      	movs	r3, #1
 800161e:	e011      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001620:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001624:	e00e      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001626:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800162a:	e00b      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 800162c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001630:	e008      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001636:	e005      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163c:	e002      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 800163e:	2310      	movs	r3, #16
 8001640:	e000      	b.n	8001644 <HAL_DMA_Abort_IT+0xfc>
 8001642:	2301      	movs	r3, #1
 8001644:	4a42      	ldr	r2, [pc, #264]	@ (8001750 <HAL_DMA_Abort_IT+0x208>)
 8001646:	6053      	str	r3, [r2, #4]
 8001648:	e057      	b.n	80016fa <HAL_DMA_Abort_IT+0x1b2>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a36      	ldr	r2, [pc, #216]	@ (8001728 <HAL_DMA_Abort_IT+0x1e0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d04f      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x1ac>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a34      	ldr	r2, [pc, #208]	@ (800172c <HAL_DMA_Abort_IT+0x1e4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d048      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x1a8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a33      	ldr	r2, [pc, #204]	@ (8001730 <HAL_DMA_Abort_IT+0x1e8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d040      	beq.n	80016ea <HAL_DMA_Abort_IT+0x1a2>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a31      	ldr	r2, [pc, #196]	@ (8001734 <HAL_DMA_Abort_IT+0x1ec>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d038      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x19c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a30      	ldr	r2, [pc, #192]	@ (8001738 <HAL_DMA_Abort_IT+0x1f0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d030      	beq.n	80016de <HAL_DMA_Abort_IT+0x196>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2e      	ldr	r2, [pc, #184]	@ (800173c <HAL_DMA_Abort_IT+0x1f4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d028      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x190>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a26      	ldr	r2, [pc, #152]	@ (8001724 <HAL_DMA_Abort_IT+0x1dc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d020      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x18a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2a      	ldr	r2, [pc, #168]	@ (8001740 <HAL_DMA_Abort_IT+0x1f8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d019      	beq.n	80016ce <HAL_DMA_Abort_IT+0x186>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <HAL_DMA_Abort_IT+0x1fc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_Abort_IT+0x182>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <HAL_DMA_Abort_IT+0x200>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00a      	beq.n	80016c4 <HAL_DMA_Abort_IT+0x17c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a26      	ldr	r2, [pc, #152]	@ (800174c <HAL_DMA_Abort_IT+0x204>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d102      	bne.n	80016be <HAL_DMA_Abort_IT+0x176>
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	e01b      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c2:	e018      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c8:	e015      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016ca:	2310      	movs	r3, #16
 80016cc:	e013      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e011      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016d6:	e00e      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016dc:	e00b      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e2:	e008      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e8:	e005      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ee:	e002      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016f0:	2310      	movs	r3, #16
 80016f2:	e000      	b.n	80016f6 <HAL_DMA_Abort_IT+0x1ae>
 80016f4:	2301      	movs	r3, #1
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_DMA_Abort_IT+0x20c>)
 80016f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
    } 
  }
  return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40020080 	.word	0x40020080
 8001728:	40020008 	.word	0x40020008
 800172c:	4002001c 	.word	0x4002001c
 8001730:	40020030 	.word	0x40020030
 8001734:	40020044 	.word	0x40020044
 8001738:	40020058 	.word	0x40020058
 800173c:	4002006c 	.word	0x4002006c
 8001740:	40020408 	.word	0x40020408
 8001744:	4002041c 	.word	0x4002041c
 8001748:	40020430 	.word	0x40020430
 800174c:	40020444 	.word	0x40020444
 8001750:	40020400 	.word	0x40020400
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	2204      	movs	r2, #4
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80f1 	beq.w	8001964 <HAL_DMA_IRQHandler+0x20c>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80eb 	beq.w	8001964 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001930 <HAL_DMA_IRQHandler+0x1d8>)
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d958      	bls.n	800186a <HAL_DMA_IRQHandler+0x112>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001934 <HAL_DMA_IRQHandler+0x1dc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d04f      	beq.n	8001862 <HAL_DMA_IRQHandler+0x10a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001938 <HAL_DMA_IRQHandler+0x1e0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d048      	beq.n	800185e <HAL_DMA_IRQHandler+0x106>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5a      	ldr	r2, [pc, #360]	@ (800193c <HAL_DMA_IRQHandler+0x1e4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d040      	beq.n	8001858 <HAL_DMA_IRQHandler+0x100>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a59      	ldr	r2, [pc, #356]	@ (8001940 <HAL_DMA_IRQHandler+0x1e8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d038      	beq.n	8001852 <HAL_DMA_IRQHandler+0xfa>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a57      	ldr	r2, [pc, #348]	@ (8001944 <HAL_DMA_IRQHandler+0x1ec>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d030      	beq.n	800184c <HAL_DMA_IRQHandler+0xf4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a56      	ldr	r2, [pc, #344]	@ (8001948 <HAL_DMA_IRQHandler+0x1f0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d028      	beq.n	8001846 <HAL_DMA_IRQHandler+0xee>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001930 <HAL_DMA_IRQHandler+0x1d8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d020      	beq.n	8001840 <HAL_DMA_IRQHandler+0xe8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a52      	ldr	r2, [pc, #328]	@ (800194c <HAL_DMA_IRQHandler+0x1f4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d019      	beq.n	800183c <HAL_DMA_IRQHandler+0xe4>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a50      	ldr	r2, [pc, #320]	@ (8001950 <HAL_DMA_IRQHandler+0x1f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d012      	beq.n	8001838 <HAL_DMA_IRQHandler+0xe0>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a4f      	ldr	r2, [pc, #316]	@ (8001954 <HAL_DMA_IRQHandler+0x1fc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00a      	beq.n	8001832 <HAL_DMA_IRQHandler+0xda>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4d      	ldr	r2, [pc, #308]	@ (8001958 <HAL_DMA_IRQHandler+0x200>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d102      	bne.n	800182c <HAL_DMA_IRQHandler+0xd4>
 8001826:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800182a:	e01b      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 800182c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001830:	e018      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001836:	e015      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001838:	2340      	movs	r3, #64	@ 0x40
 800183a:	e013      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 800183c:	2304      	movs	r3, #4
 800183e:	e011      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001840:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001844:	e00e      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001846:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800184a:	e00b      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 800184c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001850:	e008      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001852:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001856:	e005      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800185c:	e002      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 800185e:	2340      	movs	r3, #64	@ 0x40
 8001860:	e000      	b.n	8001864 <HAL_DMA_IRQHandler+0x10c>
 8001862:	2304      	movs	r3, #4
 8001864:	4a3d      	ldr	r2, [pc, #244]	@ (800195c <HAL_DMA_IRQHandler+0x204>)
 8001866:	6053      	str	r3, [r2, #4]
 8001868:	e057      	b.n	800191a <HAL_DMA_IRQHandler+0x1c2>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a31      	ldr	r2, [pc, #196]	@ (8001934 <HAL_DMA_IRQHandler+0x1dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04f      	beq.n	8001914 <HAL_DMA_IRQHandler+0x1bc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2f      	ldr	r2, [pc, #188]	@ (8001938 <HAL_DMA_IRQHandler+0x1e0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d048      	beq.n	8001910 <HAL_DMA_IRQHandler+0x1b8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2e      	ldr	r2, [pc, #184]	@ (800193c <HAL_DMA_IRQHandler+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d040      	beq.n	800190a <HAL_DMA_IRQHandler+0x1b2>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2c      	ldr	r2, [pc, #176]	@ (8001940 <HAL_DMA_IRQHandler+0x1e8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d038      	beq.n	8001904 <HAL_DMA_IRQHandler+0x1ac>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <HAL_DMA_IRQHandler+0x1ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d030      	beq.n	80018fe <HAL_DMA_IRQHandler+0x1a6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <HAL_DMA_IRQHandler+0x1f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d028      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x1a0>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a21      	ldr	r2, [pc, #132]	@ (8001930 <HAL_DMA_IRQHandler+0x1d8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d020      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x19a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a25      	ldr	r2, [pc, #148]	@ (800194c <HAL_DMA_IRQHandler+0x1f4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d019      	beq.n	80018ee <HAL_DMA_IRQHandler+0x196>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a24      	ldr	r2, [pc, #144]	@ (8001950 <HAL_DMA_IRQHandler+0x1f8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d012      	beq.n	80018ea <HAL_DMA_IRQHandler+0x192>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <HAL_DMA_IRQHandler+0x1fc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x18c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <HAL_DMA_IRQHandler+0x200>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d102      	bne.n	80018de <HAL_DMA_IRQHandler+0x186>
 80018d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018dc:	e01b      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018e2:	e018      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e8:	e015      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018ea:	2340      	movs	r3, #64	@ 0x40
 80018ec:	e013      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e011      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018f6:	e00e      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018fc:	e00b      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 80018fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001902:	e008      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 8001904:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001908:	e005      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 800190a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800190e:	e002      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 8001910:	2340      	movs	r3, #64	@ 0x40
 8001912:	e000      	b.n	8001916 <HAL_DMA_IRQHandler+0x1be>
 8001914:	2304      	movs	r3, #4
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <HAL_DMA_IRQHandler+0x208>)
 8001918:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8136 	beq.w	8001b90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800192c:	e130      	b.n	8001b90 <HAL_DMA_IRQHandler+0x438>
 800192e:	bf00      	nop
 8001930:	40020080 	.word	0x40020080
 8001934:	40020008 	.word	0x40020008
 8001938:	4002001c 	.word	0x4002001c
 800193c:	40020030 	.word	0x40020030
 8001940:	40020044 	.word	0x40020044
 8001944:	40020058 	.word	0x40020058
 8001948:	4002006c 	.word	0x4002006c
 800194c:	40020408 	.word	0x40020408
 8001950:	4002041c 	.word	0x4002041c
 8001954:	40020430 	.word	0x40020430
 8001958:	40020444 	.word	0x40020444
 800195c:	40020400 	.word	0x40020400
 8001960:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	2202      	movs	r2, #2
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80dd 	beq.w	8001b30 <HAL_DMA_IRQHandler+0x3d8>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80d7 	beq.w	8001b30 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10b      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020a 	bic.w	r2, r2, #10
 800199e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b7b      	ldr	r3, [pc, #492]	@ (8001b9c <HAL_DMA_IRQHandler+0x444>)
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d958      	bls.n	8001a66 <HAL_DMA_IRQHandler+0x30e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a79      	ldr	r2, [pc, #484]	@ (8001ba0 <HAL_DMA_IRQHandler+0x448>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d04f      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x306>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a78      	ldr	r2, [pc, #480]	@ (8001ba4 <HAL_DMA_IRQHandler+0x44c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d048      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x302>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a76      	ldr	r2, [pc, #472]	@ (8001ba8 <HAL_DMA_IRQHandler+0x450>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d040      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x2fc>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	@ (8001bac <HAL_DMA_IRQHandler+0x454>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d038      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x2f6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a73      	ldr	r2, [pc, #460]	@ (8001bb0 <HAL_DMA_IRQHandler+0x458>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d030      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x2f0>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a72      	ldr	r2, [pc, #456]	@ (8001bb4 <HAL_DMA_IRQHandler+0x45c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d028      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x2ea>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a69      	ldr	r2, [pc, #420]	@ (8001b9c <HAL_DMA_IRQHandler+0x444>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d020      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x2e4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb8 <HAL_DMA_IRQHandler+0x460>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d019      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x2e0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a6c      	ldr	r2, [pc, #432]	@ (8001bbc <HAL_DMA_IRQHandler+0x464>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d012      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x2dc>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6b      	ldr	r2, [pc, #428]	@ (8001bc0 <HAL_DMA_IRQHandler+0x468>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00a      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x2d6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a69      	ldr	r2, [pc, #420]	@ (8001bc4 <HAL_DMA_IRQHandler+0x46c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d102      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x2d0>
 8001a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a26:	e01b      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a2c:	e018      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a32:	e015      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a34:	2320      	movs	r3, #32
 8001a36:	e013      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e011      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a40:	e00e      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a46:	e00b      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a4c:	e008      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a52:	e005      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a58:	e002      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e000      	b.n	8001a60 <HAL_DMA_IRQHandler+0x308>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	4a59      	ldr	r2, [pc, #356]	@ (8001bc8 <HAL_DMA_IRQHandler+0x470>)
 8001a62:	6053      	str	r3, [r2, #4]
 8001a64:	e057      	b.n	8001b16 <HAL_DMA_IRQHandler+0x3be>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba0 <HAL_DMA_IRQHandler+0x448>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d04f      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x3b8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba4 <HAL_DMA_IRQHandler+0x44c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d048      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x3b4>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba8 <HAL_DMA_IRQHandler+0x450>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d040      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x3ae>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a48      	ldr	r2, [pc, #288]	@ (8001bac <HAL_DMA_IRQHandler+0x454>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d038      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x3a8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a47      	ldr	r2, [pc, #284]	@ (8001bb0 <HAL_DMA_IRQHandler+0x458>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d030      	beq.n	8001afa <HAL_DMA_IRQHandler+0x3a2>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a45      	ldr	r2, [pc, #276]	@ (8001bb4 <HAL_DMA_IRQHandler+0x45c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d028      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x39c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8001b9c <HAL_DMA_IRQHandler+0x444>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d020      	beq.n	8001aee <HAL_DMA_IRQHandler+0x396>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a41      	ldr	r2, [pc, #260]	@ (8001bb8 <HAL_DMA_IRQHandler+0x460>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_DMA_IRQHandler+0x392>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a40      	ldr	r2, [pc, #256]	@ (8001bbc <HAL_DMA_IRQHandler+0x464>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d012      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x38e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc0 <HAL_DMA_IRQHandler+0x468>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x388>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3d      	ldr	r2, [pc, #244]	@ (8001bc4 <HAL_DMA_IRQHandler+0x46c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d102      	bne.n	8001ada <HAL_DMA_IRQHandler+0x382>
 8001ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad8:	e01b      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001ada:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ade:	e018      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae4:	e015      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e013      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e011      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001af2:	e00e      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001af4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001af8:	e00b      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001afa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001afe:	e008      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b04:	e005      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0a:	e002      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e000      	b.n	8001b12 <HAL_DMA_IRQHandler+0x3ba>
 8001b10:	2302      	movs	r3, #2
 8001b12:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <HAL_DMA_IRQHandler+0x474>)
 8001b14:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d034      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b2e:	e02f      	b.n	8001b90 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	2208      	movs	r2, #8
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d028      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x43a>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d023      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 020e 	bic.w	r2, r2, #14
 8001b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
    }
  }
  return;
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
}
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020080 	.word	0x40020080
 8001ba0:	40020008 	.word	0x40020008
 8001ba4:	4002001c 	.word	0x4002001c
 8001ba8:	40020030 	.word	0x40020030
 8001bac:	40020044 	.word	0x40020044
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	4002006c 	.word	0x4002006c
 8001bb8:	40020408 	.word	0x40020408
 8001bbc:	4002041c 	.word	0x4002041c
 8001bc0:	40020430 	.word	0x40020430
 8001bc4:	40020444 	.word	0x40020444
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d108      	bne.n	8001c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c0e:	e007      	b.n	8001c20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b08b      	sub	sp, #44	@ 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e179      	b.n	8001f34 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c40:	2201      	movs	r2, #1
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8168 	bne.w	8001f2e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a96      	ldr	r2, [pc, #600]	@ (8001ebc <HAL_GPIO_Init+0x290>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c68:	4a94      	ldr	r2, [pc, #592]	@ (8001ebc <HAL_GPIO_Init+0x290>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d875      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c6e:	4a94      	ldr	r2, [pc, #592]	@ (8001ec0 <HAL_GPIO_Init+0x294>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d058      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c74:	4a92      	ldr	r2, [pc, #584]	@ (8001ec0 <HAL_GPIO_Init+0x294>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d86f      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c7a:	4a92      	ldr	r2, [pc, #584]	@ (8001ec4 <HAL_GPIO_Init+0x298>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d052      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c80:	4a90      	ldr	r2, [pc, #576]	@ (8001ec4 <HAL_GPIO_Init+0x298>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d869      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c86:	4a90      	ldr	r2, [pc, #576]	@ (8001ec8 <HAL_GPIO_Init+0x29c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04c      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec8 <HAL_GPIO_Init+0x29c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d863      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c92:	4a8e      	ldr	r2, [pc, #568]	@ (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d046      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c98:	4a8c      	ldr	r2, [pc, #560]	@ (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d85d      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d82a      	bhi.n	8001cf8 <HAL_GPIO_Init+0xcc>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d859      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <HAL_GPIO_Init+0x80>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d5b 	.word	0x08001d5b
 8001cc0:	08001d5b 	.word	0x08001d5b
 8001cc4:	08001d5b 	.word	0x08001d5b
 8001cc8:	08001d5b 	.word	0x08001d5b
 8001ccc:	08001d5b 	.word	0x08001d5b
 8001cd0:	08001d5b 	.word	0x08001d5b
 8001cd4:	08001d5b 	.word	0x08001d5b
 8001cd8:	08001d5b 	.word	0x08001d5b
 8001cdc:	08001d5b 	.word	0x08001d5b
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d5b 	.word	0x08001d5b
 8001ce8:	08001d5b 	.word	0x08001d5b
 8001cec:	08001d5b 	.word	0x08001d5b
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d1d 	.word	0x08001d1d
 8001cf8:	4a75      	ldr	r2, [pc, #468]	@ (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfe:	e02c      	b.n	8001d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e029      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e024      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	3308      	adds	r3, #8
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e01f      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	330c      	adds	r3, #12
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e01a      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e013      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	611a      	str	r2, [r3, #16]
          break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	615a      	str	r2, [r3, #20]
          break;
 8001d52:	e003      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          break;
 8001d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2bff      	cmp	r3, #255	@ 0xff
 8001d60:	d801      	bhi.n	8001d66 <HAL_GPIO_Init+0x13a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_Init+0x13e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2bff      	cmp	r3, #255	@ 0xff
 8001d70:	d802      	bhi.n	8001d78 <HAL_GPIO_Init+0x14c>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x152>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	3b08      	subs	r3, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	210f      	movs	r1, #15
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80c1 	beq.w	8001f2e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dac:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a48      	ldr	r2, [pc, #288]	@ (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b46      	ldr	r3, [pc, #280]	@ (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc4:	4a44      	ldr	r2, [pc, #272]	@ (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3c      	ldr	r2, [pc, #240]	@ (8001edc <HAL_GPIO_Init+0x2b0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01f      	beq.n	8001e30 <HAL_GPIO_Init+0x204>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee0 <HAL_GPIO_Init+0x2b4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d019      	beq.n	8001e2c <HAL_GPIO_Init+0x200>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_GPIO_Init+0x1fc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a39      	ldr	r2, [pc, #228]	@ (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_GPIO_Init+0x1f8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a38      	ldr	r2, [pc, #224]	@ (8001eec <HAL_GPIO_Init+0x2c0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x1f4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a37      	ldr	r2, [pc, #220]	@ (8001ef0 <HAL_GPIO_Init+0x2c4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_GPIO_Init+0x1f0>
 8001e18:	2305      	movs	r3, #5
 8001e1a:	e00a      	b.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	e008      	b.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e30:	2300      	movs	r3, #0
 8001e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e42:	4925      	ldr	r1, [pc, #148]	@ (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4924      	ldr	r1, [pc, #144]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4920      	ldr	r1, [pc, #128]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	491a      	ldr	r1, [pc, #104]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4916      	ldr	r1, [pc, #88]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d025      	beq.n	8001ef8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4910      	ldr	r1, [pc, #64]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	e025      	b.n	8001f06 <HAL_GPIO_Init+0x2da>
 8001eba:	bf00      	nop
 8001ebc:	10320000 	.word	0x10320000
 8001ec0:	10310000 	.word	0x10310000
 8001ec4:	10220000 	.word	0x10220000
 8001ec8:	10210000 	.word	0x10210000
 8001ecc:	10120000 	.word	0x10120000
 8001ed0:	10110000 	.word	0x10110000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40010800 	.word	0x40010800
 8001ee0:	40010c00 	.word	0x40010c00
 8001ee4:	40011000 	.word	0x40011000
 8001ee8:	40011400 	.word	0x40011400
 8001eec:	40011800 	.word	0x40011800
 8001ef0:	40011c00 	.word	0x40011c00
 8001ef4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ef8:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	4913      	ldr	r1, [pc, #76]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	490e      	ldr	r1, [pc, #56]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
 8001f1e:	e006      	b.n	8001f2e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	4909      	ldr	r1, [pc, #36]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f ae7e 	bne.w	8001c40 <HAL_GPIO_Init+0x14>
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	372c      	adds	r7, #44	@ 0x2c
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0e8      	b.n	8002138 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe ffa6 	bl	8000ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fe70 	bl	8003c78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa2:	f001 fe5c 	bl	8003c5e <USB_CoreInit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0bf      	b.n	8002138 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fe74 	bl	8003cac <USB_SetCurrentMode>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0b0      	b.n	8002138 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e03e      	b.n	800205a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3311      	adds	r3, #17
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3310      	adds	r3, #16
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	3313      	adds	r3, #19
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3320      	adds	r3, #32
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	3324      	adds	r3, #36	@ 0x24
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	3301      	adds	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	791b      	ldrb	r3, [r3, #4]
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3bb      	bcc.n	8001fdc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e044      	b.n	80020f4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	3301      	adds	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3b5      	bcc.n	800206a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002108:	f001 fddc 	bl	8003cc4 <USB_DevInit>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00c      	b.n	8002138 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f001 fde4 	bl	8003cfe <USB_DevDisconnect>

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e272      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002160:	4b92      	ldr	r3, [pc, #584]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00c      	beq.n	8002186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800216c:	4b8f      	ldr	r3, [pc, #572]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d112      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
 8002178:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002184:	d10b      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002186:	4b89      	ldr	r3, [pc, #548]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06c      	beq.n	800226c <HAL_RCC_OscConfig+0x12c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d168      	bne.n	800226c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e24c      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x76>
 80021a8:	4b80      	ldr	r3, [pc, #512]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a7f      	ldr	r2, [pc, #508]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e02e      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b7b      	ldr	r3, [pc, #492]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7a      	ldr	r2, [pc, #488]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b78      	ldr	r3, [pc, #480]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a77      	ldr	r2, [pc, #476]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xbc>
 80021e2:	4b72      	ldr	r3, [pc, #456]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a71      	ldr	r2, [pc, #452]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b6f      	ldr	r3, [pc, #444]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021fc:	4b6b      	ldr	r3, [pc, #428]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6a      	ldr	r2, [pc, #424]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b68      	ldr	r3, [pc, #416]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a67      	ldr	r2, [pc, #412]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ff82 	bl	8001124 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe ff7e 	bl	8001124 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	@ 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e200      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b5d      	ldr	r3, [pc, #372]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xe4>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe ff6e 	bl	8001124 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe ff6a 	bl	8001124 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	@ 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1ec      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x10c>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227a:	4b4c      	ldr	r3, [pc, #304]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002286:	4b49      	ldr	r3, [pc, #292]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
 8002292:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b43      	ldr	r3, [pc, #268]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1c0      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4939      	ldr	r1, [pc, #228]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe ff23 	bl	8001124 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e2:	f7fe ff1f 	bl	8001124 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1a1      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4927      	ldr	r1, [pc, #156]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe ff02 	bl	8001124 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fefe 	bl	8001124 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e180      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d03a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d019      	beq.n	800238a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_RCC_OscConfig+0x274>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7fe fee2 	bl	8001124 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fede 	bl	8001124 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e160      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 fa9c 	bl	80028c0 <RCC_Delay>
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_RCC_OscConfig+0x274>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7fe fec8 	bl	8001124 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002396:	e00f      	b.n	80023b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7fe fec4 	bl	8001124 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d908      	bls.n	80023b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e146      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	42420000 	.word	0x42420000
 80023b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b92      	ldr	r3, [pc, #584]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e9      	bne.n	8002398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a6 	beq.w	800251e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b88      	ldr	r3, [pc, #544]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a87      	ldr	r2, [pc, #540]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b85      	ldr	r3, [pc, #532]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b82      	ldr	r3, [pc, #520]	@ (8002608 <HAL_RCC_OscConfig+0x4c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCC_OscConfig+0x4c8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7e      	ldr	r2, [pc, #504]	@ (8002608 <HAL_RCC_OscConfig+0x4c8>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7fe fe85 	bl	8001124 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7fe fe81 	bl	8001124 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	@ 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e103      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	4b75      	ldr	r3, [pc, #468]	@ (8002608 <HAL_RCC_OscConfig+0x4c8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x312>
 8002444:	4b6f      	ldr	r3, [pc, #444]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a6e      	ldr	r2, [pc, #440]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e02d      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x334>
 800245a:	4b6a      	ldr	r3, [pc, #424]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a69      	ldr	r2, [pc, #420]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b67      	ldr	r3, [pc, #412]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a66      	ldr	r2, [pc, #408]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x356>
 800247c:	4b61      	ldr	r3, [pc, #388]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a60      	ldr	r2, [pc, #384]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	4b5e      	ldr	r3, [pc, #376]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a5d      	ldr	r2, [pc, #372]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002496:	4b5b      	ldr	r3, [pc, #364]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a5a      	ldr	r2, [pc, #360]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b58      	ldr	r3, [pc, #352]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a57      	ldr	r2, [pc, #348]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fe35 	bl	8001124 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fe31 	bl	8001124 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0b1      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x37e>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fe1f 	bl	8001124 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fe1b 	bl	8001124 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e09b      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b40      	ldr	r3, [pc, #256]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b3c      	ldr	r3, [pc, #240]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a3b      	ldr	r2, [pc, #236]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8087 	beq.w	8002636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b36      	ldr	r3, [pc, #216]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d061      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d146      	bne.n	80025ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b33      	ldr	r3, [pc, #204]	@ (800260c <HAL_RCC_OscConfig+0x4cc>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fdef 	bl	8001124 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fdeb 	bl	8001124 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e06d      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002572:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4921      	ldr	r1, [pc, #132]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b1f      	ldr	r3, [pc, #124]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a19      	ldr	r1, [r3, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	430b      	orrs	r3, r1
 8002596:	491b      	ldr	r1, [pc, #108]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259c:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_RCC_OscConfig+0x4cc>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fdbf 	bl	8001124 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fdbb 	bl	8001124 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e03d      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x46a>
 80025c8:	e035      	b.n	8002636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <HAL_RCC_OscConfig+0x4cc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fda8 	bl	8001124 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fda4 	bl	8001124 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e026      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x498>
 80025f6:	e01e      	b.n	8002636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e019      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
 8002604:	40021000 	.word	0x40021000
 8002608:	40007000 	.word	0x40007000
 800260c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_OscConfig+0x500>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d0      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b6a      	ldr	r3, [pc, #424]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b67      	ldr	r3, [pc, #412]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4965      	ldr	r1, [pc, #404]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d040      	beq.n	8002764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d115      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e073      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06b      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b39      	ldr	r3, [pc, #228]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4936      	ldr	r1, [pc, #216]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002734:	f7fe fcf6 	bl	8001124 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fcf2 	bl	8001124 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e053      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b27      	ldr	r3, [pc, #156]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d210      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4922      	ldr	r1, [pc, #136]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027be:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f821 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	490a      	ldr	r1, [pc, #40]	@ (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	5ccb      	ldrb	r3, [r1, r3]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <HAL_RCC_ClockConfig+0x1cc>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_RCC_ClockConfig+0x1d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fc54 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40022000 	.word	0x40022000
 8002808:	40021000 	.word	0x40021000
 800280c:	08003d84 	.word	0x08003d84
 8002810:	20000000 	.word	0x20000000
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002832:	4b1e      	ldr	r3, [pc, #120]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x30>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x36>
 8002846:	e027      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800284a:	613b      	str	r3, [r7, #16]
      break;
 800284c:	e027      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a17      	ldr	r2, [pc, #92]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002866:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0c5b      	lsrs	r3, r3, #17
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	4a11      	ldr	r2, [pc, #68]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0d      	ldr	r2, [pc, #52]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800287a:	fb03 f202 	mul.w	r2, r3, r2
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e004      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0c      	ldr	r2, [pc, #48]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	613b      	str	r3, [r7, #16]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	693b      	ldr	r3, [r7, #16]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	007a1200 	.word	0x007a1200
 80028b4:	08003d94 	.word	0x08003d94
 80028b8:	08003da4 	.word	0x08003da4
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c8:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <RCC_Delay+0x34>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <RCC_Delay+0x38>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0a5b      	lsrs	r3, r3, #9
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028dc:	bf00      	nop
  }
  while (Delay --);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	60fa      	str	r2, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f9      	bne.n	80028dc <RCC_Delay+0x1c>
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000000 	.word	0x20000000
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d07d      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002932:	61d3      	str	r3, [r2, #28]
 8002934:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b46      	ldr	r3, [pc, #280]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d118      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002950:	4b43      	ldr	r3, [pc, #268]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a42      	ldr	r2, [pc, #264]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295c:	f7fe fbe2 	bl	8001124 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	e008      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fbde 	bl	8001124 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e06d      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002982:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02e      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d027      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029b6:	4a29      	ldr	r2, [pc, #164]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d014      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe fbad 	bl	8001124 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fba9 	bl	8001124 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e036      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ee      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4917      	ldr	r1, [pc, #92]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a20:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	490b      	ldr	r1, [pc, #44]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4904      	ldr	r1, [pc, #16]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42420440 	.word	0x42420440

08002a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fd ffc4 	bl	8000a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fd82 	bl	80035b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e022      	b.n	8002b7a <HAL_TIM_PWM_Start_DMA+0x72>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d109      	bne.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x46>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	e015      	b.n	8002b7a <HAL_TIM_PWM_Start_DMA+0x72>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x60>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e008      	b.n	8002b7a <HAL_TIM_PWM_Start_DMA+0x72>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e171      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_TIM_PWM_Start_DMA+0x94>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e022      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0xda>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d109      	bne.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0xae>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e015      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0xda>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d109      	bne.n	8002bd0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e008      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0xda>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d024      	beq.n	8002c30 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_TIM_PWM_Start_DMA+0xea>
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e137      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c04:	e016      	b.n	8002c34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c14:	e00e      	b.n	8002c34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c24:	e006      	b.n	8002c34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c2e:	e001      	b.n	8002c34 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e118      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	f200 80ae 	bhi.w	8002d98 <HAL_TIM_PWM_Start_DMA+0x290>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002d99 	.word	0x08002d99
 8002c4c:	08002d99 	.word	0x08002d99
 8002c50:	08002d99 	.word	0x08002d99
 8002c54:	08002cc1 	.word	0x08002cc1
 8002c58:	08002d99 	.word	0x08002d99
 8002c5c:	08002d99 	.word	0x08002d99
 8002c60:	08002d99 	.word	0x08002d99
 8002c64:	08002d09 	.word	0x08002d09
 8002c68:	08002d99 	.word	0x08002d99
 8002c6c:	08002d99 	.word	0x08002d99
 8002c70:	08002d99 	.word	0x08002d99
 8002c74:	08002d51 	.word	0x08002d51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	4a7c      	ldr	r2, [pc, #496]	@ (8002e70 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	4a7b      	ldr	r2, [pc, #492]	@ (8002e74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002c86:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	4a7a      	ldr	r2, [pc, #488]	@ (8002e78 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3334      	adds	r3, #52	@ 0x34
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	f7fe fbf2 	bl	8001488 <HAL_DMA_Start_IT>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0db      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cbc:	60da      	str	r2, [r3, #12]
      break;
 8002cbe:	e06e      	b.n	8002d9e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e70 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	4a68      	ldr	r2, [pc, #416]	@ (8002e78 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3338      	adds	r3, #56	@ 0x38
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	f7fe fbce 	bl	8001488 <HAL_DMA_Start_IT>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0b7      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d04:	60da      	str	r2, [r3, #12]
      break;
 8002d06:	e04a      	b.n	8002d9e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	4a58      	ldr	r2, [pc, #352]	@ (8002e70 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002d16:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	333c      	adds	r3, #60	@ 0x3c
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	f7fe fbaa 	bl	8001488 <HAL_DMA_Start_IT>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e093      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d4c:	60da      	str	r2, [r3, #12]
      break;
 8002d4e:	e026      	b.n	8002d9e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	4a46      	ldr	r2, [pc, #280]	@ (8002e70 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	4a45      	ldr	r2, [pc, #276]	@ (8002e74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	4a44      	ldr	r2, [pc, #272]	@ (8002e78 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3340      	adds	r3, #64	@ 0x40
 8002d74:	461a      	mov	r2, r3
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	f7fe fb86 	bl	8001488 <HAL_DMA_Start_IT>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06f      	b.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d94:	60da      	str	r2, [r3, #12]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d15f      	bne.n	8002e64 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fe55 	bl	8003a5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <HAL_TIM_PWM_Start_DMA+0x374>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002e80 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	@ (8002e7c <HAL_TIM_PWM_Start_DMA+0x374>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	@ (8002e80 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d01d      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d018      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a20      	ldr	r2, [pc, #128]	@ (8002e84 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e88 <HAL_TIM_PWM_Start_DMA+0x380>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <HAL_TIM_PWM_Start_DMA+0x384>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	@ (8002e90 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e94 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d010      	beq.n	8002e64 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	e007      	b.n	8002e64 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	0800349f 	.word	0x0800349f
 8002e74:	08003547 	.word	0x08003547
 8002e78:	0800340d 	.word	0x0800340d
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40013400 	.word	0x40013400
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40014c00 	.word	0x40014c00
 8002e94:	40001800 	.word	0x40001800

08002e98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d855      	bhi.n	8002f58 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002eac:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ee9 	.word	0x08002ee9
 8002eb8:	08002f59 	.word	0x08002f59
 8002ebc:	08002f59 	.word	0x08002f59
 8002ec0:	08002f59 	.word	0x08002f59
 8002ec4:	08002f05 	.word	0x08002f05
 8002ec8:	08002f59 	.word	0x08002f59
 8002ecc:	08002f59 	.word	0x08002f59
 8002ed0:	08002f59 	.word	0x08002f59
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002f59 	.word	0x08002f59
 8002edc:	08002f59 	.word	0x08002f59
 8002ee0:	08002f59 	.word	0x08002f59
 8002ee4:	08002f3d 	.word	0x08002f3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ef6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fb23 	bl	8001548 <HAL_DMA_Abort_IT>
      break;
 8002f02:	e02c      	b.n	8002f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fb15 	bl	8001548 <HAL_DMA_Abort_IT>
      break;
 8002f1e:	e01e      	b.n	8002f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fb07 	bl	8001548 <HAL_DMA_Abort_IT>
      break;
 8002f3a:	e010      	b.n	8002f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe faf9 	bl	8001548 <HAL_DMA_Abort_IT>
      break;
 8002f56:	e002      	b.n	8002f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d161      	bne.n	8003028 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fd75 	bl	8003a5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2f      	ldr	r2, [pc, #188]	@ (8003034 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	@ (8003038 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d017      	beq.n	8002fc0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10f      	bne.n	8002fc0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10f      	bne.n	8002ff0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_TIM_PWM_Stop_DMA+0x168>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ffe:	e013      	b.n	8003028 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d104      	bne.n	8003010 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800300e:	e00b      	b.n	8003028 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d104      	bne.n	8003020 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800301e:	e003      	b.n	8003028 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40013400 	.word	0x40013400

0800303c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0202 	mvn.w	r2, #2
 8003070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f99c 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f98f 	bl	80033b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd f98f 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0204 	mvn.w	r2, #4
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f976 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f969 	bl	80033b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fd f969 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0208 	mvn.w	r2, #8
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2204      	movs	r2, #4
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f950 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f943 	bl	80033b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fd f943 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d020      	beq.n	8003184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01b      	beq.n	8003184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0210 	mvn.w	r2, #16
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2208      	movs	r2, #8
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f92a 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f91d 	bl	80033b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd f91d 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0201 	mvn.w	r2, #1
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8fc 	bl	80033a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fd40 	bl	8003c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8fc 	bl	80033e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0220 	mvn.w	r2, #32
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fd13 	bl	8003c3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003236:	2302      	movs	r3, #2
 8003238:	e0ae      	b.n	8003398 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	f200 809f 	bhi.w	8003388 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800324a:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003285 	.word	0x08003285
 8003254:	08003389 	.word	0x08003389
 8003258:	08003389 	.word	0x08003389
 800325c:	08003389 	.word	0x08003389
 8003260:	080032c5 	.word	0x080032c5
 8003264:	08003389 	.word	0x08003389
 8003268:	08003389 	.word	0x08003389
 800326c:	08003389 	.word	0x08003389
 8003270:	08003307 	.word	0x08003307
 8003274:	08003389 	.word	0x08003389
 8003278:	08003389 	.word	0x08003389
 800327c:	08003389 	.word	0x08003389
 8003280:	08003347 	.word	0x08003347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa3a 	bl	8003704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6999      	ldr	r1, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	619a      	str	r2, [r3, #24]
      break;
 80032c2:	e064      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fa8a 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	619a      	str	r2, [r3, #24]
      break;
 8003304:	e043      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fadd 	bl	80038cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0208 	orr.w	r2, r2, #8
 8003320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0204 	bic.w	r2, r2, #4
 8003330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69d9      	ldr	r1, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	61da      	str	r2, [r3, #28]
      break;
 8003344:	e023      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fb31 	bl	80039b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69d9      	ldr	r1, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	021a      	lsls	r2, r3, #8
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	61da      	str	r2, [r3, #28]
      break;
 8003386:	e002      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
      break;
 800338c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d107      	bne.n	8003434 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003432:	e02a      	b.n	800348a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d107      	bne.n	800344e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2202      	movs	r2, #2
 8003442:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344c:	e01d      	b.n	800348a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d107      	bne.n	8003468 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2204      	movs	r2, #4
 800345c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003466:	e010      	b.n	800348a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d107      	bne.n	8003482 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003480:	e003      	b.n	800348a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ffb5 	bl	80033fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d10b      	bne.n	80034ce <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d136      	bne.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034cc:	e031      	b.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d10b      	bne.n	80034f0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d125      	bne.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ee:	e020      	b.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10b      	bne.n	8003512 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2204      	movs	r2, #4
 80034fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d114      	bne.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003510:	e00f      	b.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d10a      	bne.n	8003532 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2208      	movs	r2, #8
 8003520:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7fc ff40 	bl	80003b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	771a      	strb	r2, [r3, #28]
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d103      	bne.n	8003566 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	771a      	strb	r2, [r3, #28]
 8003564:	e019      	b.n	800359a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d103      	bne.n	8003578 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2202      	movs	r2, #2
 8003574:	771a      	strb	r2, [r3, #28]
 8003576:	e010      	b.n	800359a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d103      	bne.n	800358a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2204      	movs	r2, #4
 8003586:	771a      	strb	r2, [r3, #28]
 8003588:	e007      	b.n	800359a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d102      	bne.n	800359a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2208      	movs	r2, #8
 8003598:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff1b 	bl	80033d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	771a      	strb	r2, [r3, #28]
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a45      	ldr	r2, [pc, #276]	@ (80036d8 <TIM_Base_SetConfig+0x128>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a44      	ldr	r2, [pc, #272]	@ (80036dc <TIM_Base_SetConfig+0x12c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00f      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d6:	d00b      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a41      	ldr	r2, [pc, #260]	@ (80036e0 <TIM_Base_SetConfig+0x130>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a40      	ldr	r2, [pc, #256]	@ (80036e4 <TIM_Base_SetConfig+0x134>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3f      	ldr	r2, [pc, #252]	@ (80036e8 <TIM_Base_SetConfig+0x138>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <TIM_Base_SetConfig+0x128>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a33      	ldr	r2, [pc, #204]	@ (80036dc <TIM_Base_SetConfig+0x12c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d027      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003618:	d023      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a30      	ldr	r2, [pc, #192]	@ (80036e0 <TIM_Base_SetConfig+0x130>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01f      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <TIM_Base_SetConfig+0x134>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <TIM_Base_SetConfig+0x138>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d017      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <TIM_Base_SetConfig+0x13c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2c      	ldr	r2, [pc, #176]	@ (80036f0 <TIM_Base_SetConfig+0x140>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00f      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <TIM_Base_SetConfig+0x144>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <TIM_Base_SetConfig+0x148>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a29      	ldr	r2, [pc, #164]	@ (80036fc <TIM_Base_SetConfig+0x14c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a28      	ldr	r2, [pc, #160]	@ (8003700 <TIM_Base_SetConfig+0x150>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0f      	ldr	r2, [pc, #60]	@ (80036d8 <TIM_Base_SetConfig+0x128>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <TIM_Base_SetConfig+0x12c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
  }
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40013400 	.word	0x40013400
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40014c00 	.word	0x40014c00
 80036f0:	40015000 	.word	0x40015000
 80036f4:	40015400 	.word	0x40015400
 80036f8:	40001800 	.word	0x40001800
 80036fc:	40001c00 	.word	0x40001c00
 8003700:	40002000 	.word	0x40002000

08003704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0201 	bic.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	@ (80037dc <TIM_OC1_SetConfig+0xd8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x64>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1f      	ldr	r2, [pc, #124]	@ (80037e0 <TIM_OC1_SetConfig+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a15      	ldr	r2, [pc, #84]	@ (80037dc <TIM_OC1_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC1_SetConfig+0x8e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <TIM_OC1_SetConfig+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40013400 	.word	0x40013400

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f023 0210 	bic.w	r2, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <TIM_OC2_SetConfig+0xe0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0x68>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a20      	ldr	r2, [pc, #128]	@ (80038c8 <TIM_OC2_SetConfig+0xe4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <TIM_OC2_SetConfig+0xe0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC2_SetConfig+0x94>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <TIM_OC2_SetConfig+0xe4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d113      	bne.n	80038a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800387e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400

080038cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <TIM_OC3_SetConfig+0xe0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_OC3_SetConfig+0x66>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a20      	ldr	r2, [pc, #128]	@ (80039b0 <TIM_OC3_SetConfig+0xe4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10d      	bne.n	800394e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800394c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a16      	ldr	r2, [pc, #88]	@ (80039ac <TIM_OC3_SetConfig+0xe0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_OC3_SetConfig+0x92>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a15      	ldr	r2, [pc, #84]	@ (80039b0 <TIM_OC3_SetConfig+0xe4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d113      	bne.n	8003986 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800396c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40013400 	.word	0x40013400

080039b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <TIM_OC4_SetConfig+0xa0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_OC4_SetConfig+0x68>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <TIM_OC4_SetConfig+0xa4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d109      	bne.n	8003a30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	019b      	lsls	r3, r3, #6
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40013400 	.word	0x40013400

08003a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2201      	movs	r2, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	401a      	ands	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e05a      	b.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a20      	ldr	r2, [pc, #128]	@ (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b12:	d018      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a19      	ldr	r2, [pc, #100]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	@ (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10c      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40014c00 	.word	0x40014c00
 8003b94:	40001800 	.word	0x40001800

08003b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e03d      	b.n	8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	4638      	mov	r0, r7
 8003c68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c80:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003c84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	4013      	ands	r3, r2
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4638      	mov	r0, r7
 8003cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <memset>:
 8003d12:	4603      	mov	r3, r0
 8003d14:	4402      	add	r2, r0
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d100      	bne.n	8003d1c <memset+0xa>
 8003d1a:	4770      	bx	lr
 8003d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d20:	e7f9      	b.n	8003d16 <memset+0x4>
	...

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	2600      	movs	r6, #0
 8003d28:	4d0c      	ldr	r5, [pc, #48]	@ (8003d5c <__libc_init_array+0x38>)
 8003d2a:	4c0d      	ldr	r4, [pc, #52]	@ (8003d60 <__libc_init_array+0x3c>)
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	f000 f81a 	bl	8003d6c <_init>
 8003d38:	2600      	movs	r6, #0
 8003d3a:	4d0a      	ldr	r5, [pc, #40]	@ (8003d64 <__libc_init_array+0x40>)
 8003d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d68 <__libc_init_array+0x44>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08003da8 	.word	0x08003da8
 8003d60:	08003da8 	.word	0x08003da8
 8003d64:	08003da8 	.word	0x08003da8
 8003d68:	08003dac 	.word	0x08003dac

08003d6c <_init>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr

08003d78 <_fini>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr
